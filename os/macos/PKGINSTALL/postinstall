#!/bin/sh
#set -x

INSTALL_BINS="/Applications/CellframeNode.app/Contents/MacOS/"
INSTALL_RES=/Applications/CellframeNode.app/Contents/Resources
USER_RES="/Library/Application Support/CellframeNode" 

mkdir -p "${USER_RES}/"

# Backup existing network configurations to preserve user settings
NETWORK_BACKUP_DIR="${USER_RES}/network_backup_$$"
if [ -d "${USER_RES}/etc/network" ]; then
    echo "[!] Backing up existing network configurations"
    mkdir -p "${NETWORK_BACKUP_DIR}"
    cp -r "${USER_RES}/etc/network/"* "${NETWORK_BACKUP_DIR}/" 2>/dev/null || true
fi

# Copy configuration files (this will overwrite existing configs)
cp -r "${INSTALL_RES}/etc" "${USER_RES}/"
cp -r "${INSTALL_RES}/share" "${USER_RES}/"

# Restore user's network configurations, preserving disabled networks
if [ -d "${NETWORK_BACKUP_DIR}" ]; then
    echo "[!] Restoring user network configurations"
    for backup_file in "${NETWORK_BACKUP_DIR}"/*; do
        if [ -f "${backup_file}" ]; then
            filename=$(basename "${backup_file}")
            target_file="${USER_RES}/etc/network/${filename}"
            
            # If it's a disabled network (.cfg.dis), restore it and remove any duplicate .cfg
            if [[ "${filename}" == *.cfg.dis ]]; then
                network_name="${filename%.cfg.dis}"
                active_config="${USER_RES}/etc/network/${network_name}.cfg"
                
                echo "[!] Restoring disabled network: ${network_name}"
                cp "${backup_file}" "${target_file}"
                
                # Remove the active config if it exists to prevent duplicates
                if [ -f "${active_config}" ]; then
                    echo "[!] Removing duplicate active config for disabled network: ${network_name}"
                    rm -f "${active_config}"
                fi
            # If it's an active network (.cfg), only restore if no .cfg.dis exists
            elif [[ "${filename}" == *.cfg ]]; then
                network_name="${filename%.cfg}"
                disabled_config="${USER_RES}/etc/network/${network_name}.cfg.dis"
                
                # Only restore active config if user doesn't have it disabled
                if [ ! -f "${disabled_config}" ]; then
                    echo "[!] Restoring active network: ${network_name}"
                    cp "${backup_file}" "${target_file}"
                else
                    echo "[!] Skipping active config for ${network_name} - user has it disabled"
                fi
            fi
        fi
    done
    
    # Clean up backup directory
    rm -rf "${NETWORK_BACKUP_DIR}"
fi

mkdir -p "${USER_RES}/var/run/"

# Check for potential duplicate network configs before running setup
echo "[!] Checking for network config duplicates before setup"
NETWORK_DIR="${USER_RES}/etc/network"
if [ -d "${NETWORK_DIR}" ]; then
    # Use find to avoid shell glob expansion issues when no .cfg files exist
    find "${NETWORK_DIR}" -maxdepth 1 -name "*.cfg" -type f | while read -r cfg_file; do
        if [ -f "${cfg_file}" ]; then
            basename_cfg=$(basename "${cfg_file}" .cfg)
            dis_file="${cfg_file}.dis"
            if [ -f "${dis_file}" ]; then
                echo "[!] Warning: Found both ${cfg_file} and ${dis_file}, removing .dis file to prevent conflicts"
                rm -f "${dis_file}"
            fi
        fi
    done
fi

# Run configuration setup
${INSTALL_BINS}/cellframe-node-config -i "${USER_RES}/share/default.setup"

# Final check and cleanup for duplicate configs after setup
echo "[!] Post-setup cleanup: checking for network config duplicates"
if [ -d "${NETWORK_DIR}" ]; then
    # Use find to avoid shell glob expansion issues when no .cfg files exist
    find "${NETWORK_DIR}" -maxdepth 1 -name "*.cfg" -type f | while read -r cfg_file; do
        if [ -f "${cfg_file}" ]; then
            basename_cfg=$(basename "${cfg_file}" .cfg)
            dis_file="${cfg_file}.dis"
            if [ -f "${dis_file}" ]; then
                echo "[!] Warning: Found duplicate configs after setup: ${cfg_file} and ${dis_file}"
                echo "[!] Keeping user's enabled config and removing duplicate disabled config"
                rm -f "${dis_file}"
            fi
        fi
    done
fi

echo "[!] Set cfg permissions"
find "${USER_RES}/" -type d -exec chmod 777 {} \;
find "${USER_RES}/" -type f -exec chmod 666 {} \;

echo "[!] Copy daemon plist"
cp ${INSTALL_RES}/com.demlabs.cellframe-node.plist /Library/LaunchDaemons/

${INSTALL_BINS}/cellframe-node-config -e service enable
