#!/bin/sh
#set -x

INSTALL_BINS="/Applications/CellframeNode.app/Contents/MacOS/"
INSTALL_RES=/Applications/CellframeNode.app/Contents/Resources
USER_RES="/Library/Application Support/CellframeNode" 

mkdir -p "${USER_RES}/"

# Backup existing network configuration files to preserve user settings
NETWORK_BACKUP_DIR="${USER_RES}/network_backup_$$"
if [ -d "${USER_RES}/etc/network" ]; then
    echo "[!] Backing up existing network configurations"
    mkdir -p "${NETWORK_BACKUP_DIR}"
    # Only backup .cfg and .cfg.dis files, not directories
    # Use explicit loop to avoid issues with extended attributes on macOS
    find "${USER_RES}/etc/network" -maxdepth 1 -type f \( -name "*.cfg" -o -name "*.cfg.dis" \) | while read -r config_file; do
        if [ -f "${config_file}" ]; then
            filename=$(basename "${config_file}")
            echo "[!] Backing up: ${filename}"
            cp "${config_file}" "${NETWORK_BACKUP_DIR}/${filename}"
        fi
    done
fi

# Copy configuration files (this will overwrite existing configs)
cp -r "${INSTALL_RES}/etc" "${USER_RES}/"
cp -r "${INSTALL_RES}/share" "${USER_RES}/"

# Restore user's network configurations, preserving user's choices
if [ -d "${NETWORK_BACKUP_DIR}" ]; then
    echo "[!] Restoring user network configurations"
    
    # Analyze user's network preferences
    for backup_file in "${NETWORK_BACKUP_DIR}"/*; do
        if [ -f "${backup_file}" ]; then
            filename=$(basename "${backup_file}")
            
            if [[ "${filename}" == *.cfg.dis ]]; then
                # User had this network disabled
                network_name="${filename%.cfg.dis}"
                target_dis_file="${USER_RES}/etc/network/${filename}"
                target_cfg_file="${USER_RES}/etc/network/${network_name}.cfg"
                
                echo "[!] Restoring disabled network: ${network_name}"
                cp "${backup_file}" "${target_dis_file}"
                
                # Remove any .cfg file for this network to prevent conflicts
                if [ -f "${target_cfg_file}" ]; then
                    echo "[!] Removing conflicting active config for disabled network: ${network_name}"
                    rm -f "${target_cfg_file}"
                fi
                
            elif [[ "${filename}" == *.cfg ]]; then
                # User had this network enabled
                network_name="${filename%.cfg}"
                target_cfg_file="${USER_RES}/etc/network/${filename}"
                target_dis_file="${USER_RES}/etc/network/${network_name}.cfg.dis"
                
                echo "[!] Restoring enabled network: ${network_name}"
                cp "${backup_file}" "${target_cfg_file}"
                
                # Remove any .cfg.dis file for this network to prevent conflicts
                if [ -f "${target_dis_file}" ]; then
                    echo "[!] Removing conflicting disabled config for enabled network: ${network_name}"
                    rm -f "${target_dis_file}"
                fi
            fi
        fi
    done
    
    # Clean up backup directory
    rm -rf "${NETWORK_BACKUP_DIR}"
fi

mkdir -p "${USER_RES}/var/run/"

# Check for potential duplicate network configs before running setup
echo "[!] Checking for network config duplicates before setup"
NETWORK_DIR="${USER_RES}/etc/network"
if [ -d "${NETWORK_DIR}" ]; then
    # Check for .cfg.dis files first and remove corresponding .cfg files
    find "${NETWORK_DIR}" -maxdepth 1 -name "*.cfg.dis" -type f | while read -r dis_file; do
        if [ -f "${dis_file}" ]; then
            basename_dis=$(basename "${dis_file}" .cfg.dis)
            cfg_file="${NETWORK_DIR}/${basename_dis}.cfg"
            if [ -f "${cfg_file}" ]; then
                echo "[!] Warning: Found both ${cfg_file} and ${dis_file}, removing .cfg file to keep network disabled"
                rm -f "${cfg_file}"
            fi
        fi
    done
fi

# Run configuration setup
${INSTALL_BINS}/cellframe-node-config -i "${USER_RES}/share/default.setup"

# Final check and cleanup for duplicate configs after setup
echo "[!] Post-setup cleanup: checking for network config duplicates"
if [ -d "${NETWORK_DIR}" ]; then
    # Check for .cfg.dis files first and remove corresponding .cfg files that may have been created by setup
    find "${NETWORK_DIR}" -maxdepth 1 -name "*.cfg.dis" -type f | while read -r dis_file; do
        if [ -f "${dis_file}" ]; then
            basename_dis=$(basename "${dis_file}" .cfg.dis)
            cfg_file="${NETWORK_DIR}/${basename_dis}.cfg"
            if [ -f "${cfg_file}" ]; then
                echo "[!] Warning: Found duplicate configs after setup: ${cfg_file} and ${dis_file}"
                echo "[!] Keeping user's disabled config and removing duplicate enabled config"
                rm -f "${cfg_file}"
            fi
        fi
    done
    
    # Also check for weird filenames like .cfg.dis.cfg and clean them up
    find "${NETWORK_DIR}" -maxdepth 1 -name "*.cfg.dis.*" -type f | while read -r weird_file; do
        if [ -f "${weird_file}" ]; then
            echo "[!] Warning: Found weird config file: ${weird_file}, removing it"
            rm -f "${weird_file}"
        fi
    done
fi

echo "[!] Set cfg permissions"
find "${USER_RES}/" -type d -exec chmod 777 {} \;
find "${USER_RES}/" -type f -exec chmod 666 {} \;

echo "[!] Copy daemon plist"
cp ${INSTALL_RES}/com.demlabs.cellframe-node.plist /Library/LaunchDaemons/

${INSTALL_BINS}/cellframe-node-config -e service enable
