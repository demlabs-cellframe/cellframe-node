#!/bin/bash -e
. /usr/share/debconf/confmodule

DAP_CHAINS_NAME="cellframe"
DAP_APP_NAME="$DAP_CHAINS_NAME-node"
DAP_PREFIX="/opt/$DAP_APP_NAME"

DAP_CFG_TPL="$DAP_PREFIX/share/configs/$DAP_APP_NAME.cfg.tpl"

# Store write config to new if present smth
DAP_CFG="$DAP_PREFIX/etc/$DAP_APP_NAME.cfg"

#fixed link with python library
BUILD_PYTHON_VERSION=/usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0

[ -h $BUILD_PYTHON_VERSION ] && rm $BUILD_PYTHON_VERSION
#STANDART_PYTHON_LIB=$(ls /usr/lib/x86_64-linux-gnu | grep "libpython3.*.so.1.0" | cut -d" " -f1 | head -n1)
#[ -e $BUILD_PYTHON_VERSION ] || ln -sf /usr/lib/x86_64-linux-gnu/$STANDART_PYTHON_LIB /usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0


#unpack PYTHON_ENV
if [[ -e /opt/cellframe-node/share/cpython.tar.xz ]]; then 
    rm -rf /opt/cellframe-node/etc/lib /opt/cellframe-node/etc/bin /opt/cellframe-node/var/python || true
    mkdir -p /opt/cellframe-node/var || true
    tar -C /opt/cellframe-node -xf /opt/cellframe-node/share/cpython.tar.xz || true
    rm /opt/cellframe-node/share/cpython.tar.xz || true
fi
# Check profile.d symlink

[ -e "/etc/profile.d/$DAP_APP_NAME.sh" ] || ln -sf $DAP_PREFIX/share/profile.d/$DAP_APP_NAME.sh /etc/profile.d/$DAP_APP_NAME.sh

# Init node config
if [ -e "$DAP_CFG" ]; then
    DAP_CFG="$DAP_PREFIX/etc/$DAP_APP_NAME.cfg.dpkg-new"
else
    DAP_CFG="$DAP_PREFIX/etc/$DAP_APP_NAME.cfg"
fi

cat $DAP_CFG_TPL > $DAP_CFG || true

sed -i "s/{PREFIX}/\/opt\/$DAP_APP_NAME/g" $DAP_CFG  || true

db_get cellframe-node/debug_mode || true
sed -i "s/{DEBUG_MODE}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/auto_online || true
sed -i "s/{AUTO_ONLINE}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/server_enabled || true
sed -i "s/{SERVER_ENABLED}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/server_port || true
sed -i "s/{SERVER_PORT}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/server_addr || true
sed -i "s/{SERVER_ADDR}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/notify_srv_addr || true
sed -i "s/{NOTIFY_SRV_ADDR}/$RET/g" $DAP_CFG  || true

db_get cellframe-node/notify_srv_port || true
sed -i "s/{NOTIFY_SRV_PORT}/$RET/g" $DAP_CFG  || true

# Init subzero
NET_NAME="subzero"

db_get cellframe-node/subzero_enabled || true
if [ "$RET" = "true" ]; then
    DAP_CFG_NET="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    DAP_CFG_NET_TPL="$DAP_PREFIX/share/configs/network/$NET_NAME.cfg.tpl"
    DAP_NET_CFG=""
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg.dpkg-new"
    else
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    fi

    cat $DAP_CFG_NET_TPL > $DAP_NET_CFG || true
    db_get cellframe-node/subzero_node_type || true
    NODE_TYPE=$RET
    sed -i "s/{NODE_TYPE}/$NODE_TYPE/g" $DAP_NET_CFG  || true
    echo "[*] Enabled subzero"
fi

# Init mileena
NET_NAME="mileena"

db_get cellframe-node/mileena_enabled || true
if [ "$RET" = "true" ]; then
    DAP_CFG_NET="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    DAP_CFG_NET_TPL="$DAP_PREFIX/share/configs/network/$NET_NAME.cfg.tpl"
    DAP_NET_CFG=""
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg.dpkg-new"
    else
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    fi

    cat $DAP_CFG_NET_TPL > $DAP_NET_CFG || true
    db_get cellframe-node/mileena_node_type || true
    NODE_TYPE=$RET
    sed -i "s/{NODE_TYPE}/$NODE_TYPE/g" $DAP_NET_CFG  || true
    echo "[*] Enabled mileena"
fi

# Init Minkowski
NET_NAME="kelvpn-minkowski"

db_get cellframe-node/kelvpn_minkowski_enabled || true
if [ "$RET" = "true" ]; then
    DAP_CFG_NET="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    DAP_CFG_NET_TPL="$DAP_PREFIX/share/configs/network/$NET_NAME.cfg.tpl"
    DAP_NET_CFG=""
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg.dpkg-new"
    else
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    fi

    cat $DAP_CFG_NET_TPL > $DAP_NET_CFG || true
    db_get cellframe-node/kelvpn_minkowski_node_type || true
    NODE_TYPE=$RET
    sed -i "s/{NODE_TYPE}/$NODE_TYPE/g" $DAP_NET_CFG  || true
    echo "[*] Enabled subzero"
fi

# Init Backbone
NET_NAME="Backbone"

db_get cellframe-node/backbone_enabled || true
if [ "$RET" = "true" ]; then
    DAP_CFG_NET="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    DAP_CFG_NET_TPL="$DAP_PREFIX/share/configs/network/$NET_NAME.cfg.tpl"
    DAP_NET_CFG=""
    if [ -e "$DAP_CFG_NET" ]; then
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg.dpkg-new"
    else
	DAP_NET_CFG="$DAP_PREFIX/etc/network/$NET_NAME.cfg"
    fi

    cat $DAP_CFG_NET_TPL > $DAP_NET_CFG || true
    db_get cellframe-node/backbone_node_type || true
    NODE_TYPE=$RET
    sed -i "s/{NODE_TYPE}/$NODE_TYPE/g" $DAP_NET_CFG  || true
    echo "[*] Enabled Backbone"
fi

mkdir -p $DAP_PREFIX/var/log     || true
mkdir -p $DAP_PREFIX/var/plugins || true

#Set up Python plugins
db_get cellframe-node/enable_python_plugins || true
if [ "$RET" = "true" ]; then
    sed -i 's/#\[plugins\]/\[plugins\]/g' $DAP_CFG || true
    sed -i 's/#py_load=.*/py_load=true/g' $DAP_CFG || true
    db_get cellframe-node/python_plugins_path || true
    sed -i "s|#py_path=.*|py_path=$RET|g" $DAP_CFG || true
    echo "[*] Enabled Python plugins"
fi

cat /etc/passwd| grep cellframe-node || adduser --system --no-create-home --group --home /opt/cellframe-node cellframe-node || true

echo "[*] Check /etc/systemd/system/$DAP_APP_NAME.service file..."
if [ -e /etc/systemd/system/$DAP_APP_NAME.service ]; then
    echo "[*] Restarting $DAP_APP_NAME to implement changes"
    systemctl --system stop $DAP_APP_NAME  >> /dev/null|| true
    echo "[*] Stopped $DAP_APP_NAME"
    systemctl daemon-reload || true
    systemctl --system start $DAP_APP_NAME || true
    echo "[*] Started $DAP_APP_NAME"
else
    echo "[!] Installing $DAP_APP_NAME as systemd service (haven't found /etc/systemd/system/$DAP_APP_NAME.service)"
    ln -sf $DAP_PREFIX/share/$DAP_APP_NAME.service /etc/systemd/system/$DAP_APP_NAME.service || true
    systemctl --system enable $DAP_PREFIX/share/$DAP_APP_NAME.service || true
#    systemctl --system start $DAP_APP_NAME
    echo "[ ] Execute 'systemctl start $DAP_APP_NAME' to start $DAP_APP_NAME service"

    #USERMAN=`users | awk '{print $1}'`
    
    echo "[ ] Additional configuration"
    adduser --system --no-create-home --group --home /opt/cellframe-node cellframe-node || true
    #usermod -aG $DAP_CHAINS_NAME `users | awk '{print $1}'`
    for username in $(cat /etc/passwd | grep "/home" | cut -d ':' -f1); do
        usermod -aG cellframe-node $username || true
    done
    mkdir -p $DAP_PREFIX/var/{run,lib/wallet,lib/global_db,var/plugins} || true
    #mkdir -p $DAP_PREFIX/var/{run,lib/ca,lib/wallet,lib/global_db,var/plugins} || true
    touch $DAP_PREFIX/var/run/cellframe-node.pid || true
    #chown -R $USERMAN:$USERMAN $DAP_PREFIX
    for filename in $(find $DAP_PREFIX | grep -v bugreport); do
        if [ -d $filename ]; then
            chmod 0775 $filename 2>/dev/null || true
        else
            chmod 0664 $filename 2>/dev/null || true
        fi
    done
    chmod 0666 $DAP_CFG
    chmod 0666 $DAP_CFG_TPL
    chmod 0774 $DAP_PREFIX/bin/* || true
    chmod 0777 $DAP_PREFIX/bin/$DAP_APP_NAME-cli $DAP_PREFIX/bin/pip3* $DAP_PREFIX/bin/python3* || true
    
    service cellframe-node start || true
    systemctl restart cellframe-node || true
    
fi

echo "[ ] Enabling logrotate"
chmod 644  $DAP_PREFIX/share/logrotate/$DAP_APP_NAME || true
ln -sf $DAP_PREFIX/share/logrotate/logrotate.timer /etc/systemd/system/logrotate.timer || true
ln -sf $DAP_PREFIX/share/logrotate/$DAP_APP_NAME /etc/logrotate.d/$DAP_APP_NAME || true
chmod 644 /etc/logrotate.d/$DAP_APP_NAME || true
systemctl reenable logrotate.timer || true 

echo "[!] Done"