#!/usr/bin/env bash
#
# Stage Environment - самодостаточный wrapper для stage_env.py
#
# Автоматически создаёт venv, устанавливает зависимости и запускает Python CLI.
# Этот скрипт делает stage-env полностью портативным модулем.
#
# Usage:
#   ./stage-env <command> [options]
#   ./stage-env start --topology default
#   ./stage-env status
#   ./stage-env build --clean
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Helper functions
info() {
    echo -e "${BLUE}ℹ${NC} $1" >&2
}

success() {
    echo -e "${GREEN}✓${NC} $1" >&2
}

error() {
    echo -e "${RED}✗${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}⚠${NC} $1" >&2
}

# Directories
STAGE_ENV_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$STAGE_ENV_DIR/.venv"
PYTHON_CLI="$STAGE_ENV_DIR/stage_env.py"
REQUIREMENTS="$STAGE_ENV_DIR/requirements.txt"

# Check prerequisites
check_prerequisites() {
    local missing=()
    
    if ! command -v python3 &> /dev/null; then
        missing+=("python3")
    fi
    
    if ! command -v docker &> /dev/null; then
        missing+=("docker")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        error "Missing required tools: ${missing[*]}"
        error "Please install them before running stage-env"
        exit 1
    fi
}

# Setup virtual environment
setup_venv() {
    if [ ! -d "$VENV_DIR" ]; then
        info "Creating Python virtual environment..."
        python3 -m venv "$VENV_DIR"
        success "Virtual environment created"
        
        # Mark as needing dependencies install
        NEED_INSTALL=1
    else
        # Check if requirements changed
        if [ -f "$VENV_DIR/.requirements_hash" ]; then
            local current_hash=$(md5sum "$REQUIREMENTS" 2>/dev/null | cut -d' ' -f1)
            local stored_hash=$(cat "$VENV_DIR/.requirements_hash" 2>/dev/null)
            
            if [ "$current_hash" != "$stored_hash" ]; then
                info "Requirements changed, updating dependencies..."
                NEED_INSTALL=1
            fi
        else
            NEED_INSTALL=1
        fi
    fi
}

# Install/update dependencies
install_dependencies() {
    if [ -n "$NEED_INSTALL" ]; then
        info "Installing Python dependencies..."
        
        # Activate venv temporarily for installation
        source "$VENV_DIR/bin/activate"
        
        # Upgrade pip quietly
        pip install --quiet --upgrade pip
        
        # Install requirements
        if [ -f "$REQUIREMENTS" ]; then
            pip install --quiet -r "$REQUIREMENTS"
            
            # Save requirements hash
            md5sum "$REQUIREMENTS" | cut -d' ' -f1 > "$VENV_DIR/.requirements_hash"
            
            success "Dependencies installed"
        else
            warning "requirements.txt not found, skipping dependencies"
        fi
        
        deactivate
    fi
}

# Main execution
main() {
    # Check prerequisites
    check_prerequisites
    
    # Setup venv (if needed)
    setup_venv
    
    # Install/update dependencies (if needed)
    install_dependencies
    
    # Activate venv
    source "$VENV_DIR/bin/activate"
    
    # Check if Python CLI exists
    if [ ! -f "$PYTHON_CLI" ]; then
        error "stage_env.py not found at $PYTHON_CLI"
        exit 1
    fi
    
    # Make sure it's executable
    if [ ! -x "$PYTHON_CLI" ]; then
        chmod +x "$PYTHON_CLI"
    fi
    
    # Run Python CLI with all arguments
    exec python3 "$PYTHON_CLI" "$@"
}

# Run main
main "$@"

