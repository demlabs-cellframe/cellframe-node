# Example: Wait-for-Datum Helper
# Demonstrates monitoring datum processing through all network stages

name: Wait-for-Datum Example
description: Intelligent waiting for datum lifecycle (mempool → block → propagation)
tags: [example, wait_for_datum, monitoring]
version: "1.0"

network:
  topology: default

includes:
  - ../common/create_test_cert.yml
  - ../common/set_net_default.yml

defaults:
  node: node1
  wait: 2s

setup:
  - cli: wallet new -w test_wallet
  
  - cli: wallet info -w test_wallet
    save_wallet: wallet_addr

test:
  # Create and emit token
  - cli: token_decl -token WAITDEMO -total_supply 1000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs test_cert
    save: token_hash
  
  - cli: token_emit -token WAITDEMO -value 10000 -addr {{wallet_addr}} -certs test_cert
    save: emission_hash
  
  # MODERN: Intelligent waiting - monitors actual datum lifecycle
  # Replaces: wait: 30s (guessing how long to wait)
  - wait_for_datum: "{{emission_hash}}"
    # All defaults are optimal - no need to override!
    # Timeouts: 0.5s mempool → 30s block → 60s propagation
    save_status: emission_status

check:
  # Verify emission succeeded
  - cli: token info -name WAITDEMO
    contains: "WAITDEMO"
  
  # Status should be 'propagated' or 'in_blocks'
  - python: |
      status = ctx.get_variable('emission_status')
      assert status.status.value in ['propagated', 'in_blocks'], f"Expected success, got {status.status.value}"

---

# Example 2: Transaction with explicit timeouts (NOT recommended - use defaults!)
name: Transaction Wait with Custom Timeouts
description: Shows how to override timeouts (but you usually shouldn't)
tags: [example, transaction, wait_for_datum, custom_timeouts]

network:
  topology: default

includes:
  - ../common/create_test_cert.yml
  - ../common/set_net_default.yml

setup:
  - cli: wallet new -w sender
  - cli: wallet new -w receiver
  
  - cli: wallet info -w sender
    save_wallet: sender_addr
  
  - cli: wallet info -w receiver
    save_wallet: receiver_addr
  
  # Prepare tokens
  - cli: token_decl -token TXDEMO -total_supply 1000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs test_cert
    save: declaration_hash

  - wait_for_datum: "{{declaration_hash}}"

  - cli: token_emit -token TXDEMO -value 10000 -addr {{sender_addr}} -certs test_cert
    save: emission_hash

  - wait_for_datum: "{{emission_hash}}"

test:
  # Create transaction
  - cli: tx_create -token TXDEMO -from {{emission_hash}}:0 -to_addr {{receiver_addr}} -value 5000 -fee 0.1
    save: tx_hash
  
  # Monitor transaction with custom timeouts (usually NOT needed!)
  - wait_for_datum: "{{tx_hash}}"
    timeout_total: 90       # Override default 300s
    timeout_in_blocks: 60   # Override default 180s
    check_interval: 1       # Check every second instead of 2s

check:
  - cli: tx_history -tx {{tx_hash}}
    contains: "{{tx_hash}}"

---

# Example 3: Multiple datums (recommended pattern)
name: Multiple Datums Wait
description: Monitor multiple datums efficiently
tags: [example, multiple, wait_for_datum]

network:
  topology: default

includes:
  - ../common/create_test_cert.yml
  - ../common/set_net_default.yml
  - ../common/wallets/create_wallet.yml  # Provides wallet_addr

test:
  # Create multiple tokens
  - cli: token_decl -token BATCH1 -total_supply 1000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs test_cert
    save: token1
  
  - cli: token_decl -token BATCH2 -total_supply 2000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs test_cert
    save: token2
  
  # Wait for BOTH tokens to be processed
  - wait_for_datum:
      - "{{token1}}"
      - "{{token2}}"
    # Monitors both concurrently - returns when BOTH are done!

  # Now emit from both tokens
  - cli: token_emit -token BATCH1 -value 1000 -addr {{wallet_addr}} -certs test_cert
    save: emit1
  
  - cli: token_emit -token BATCH2 -value 2000 -addr {{wallet_addr}} -certs test_cert
    save: emit2
  
  # Wait for both emissions
  - wait_for_datum: ["{{emit1}}", "{{emit2}}"]

check:
  - cli: token list
    contains: "BATCH1"
  
  - cli: token list
    contains: "BATCH2"

---

# Example 4: MINIMAL syntax (recommended!)
name: Minimal Wait-for-Datum
description: Simplest possible usage - just the hash
tags: [example, minimal, best_practice]

network:
  topology: default

includes:
  - ../common/create_test_cert.yml
  - ../common/set_net_default.yml
  - ../common/wallets/create_wallet.yml

test:
  - cli: token_decl -token MINIMAL -total_supply 1000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs test_cert
    save: hash
  
  # ✅ BEST PRACTICE: Minimal syntax - all defaults are optimal!
  - wait_for_datum: "{{hash}}"
  
  # That's it! No timeout overrides, no extra params.
  # Fails fast (0.5s) if datum not created
  # Returns immediately when done
  # Default timeouts are tuned for real network behavior

check:
  - cli: token info -name MINIMAL
    contains: "MINIMAL"

