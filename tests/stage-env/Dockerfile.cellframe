# Dockerfile for Cellframe Node test environment
# 
# Test Node = Stock Cellframe Node for testing
# 
# Build Arguments:
#   NODE_ID: Node identifier (1, 2, 3...)
#   NODE_ROLE: Node role (root, master, full)
#   CELLFRAME_VERSION: Cellframe Node version (default: latest)
#   BUILD_TYPE: debug (default, includes debug symbols) or release (optimized)
#
# Architecture Support:
#   Automatically detects system architecture (amd64, arm64, etc.)
#   Downloads appropriate Cellframe Node package for target architecture  
#   FAIL FAST principle: No fallbacks - exact architecture match required
#   Intelligent caching: Packages cached between builds for efficiency
#
# Usage:
#   Development/Debugging: docker build --build-arg BUILD_TYPE=debug
#   Performance/Load tests: docker build --build-arg BUILD_TYPE=release
#   Specific version: docker build --build-arg CELLFRAME_VERSION=5.4-28
#
FROM debian:bookworm-slim

ARG NODE_ID=1
ARG NODE_ROLE=root
ARG CELLFRAME_VERSION=latest
ARG BUILD_TYPE=debug

# Install required packages (base packages always, debug tools conditionally)
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    ca-certificates \
    gnupg \
    lsb-release \
    procps \
    net-tools \
    iputils-ping \
    telnet \
    jq \
    python3 \
    openssl \
    python3-pip \
    less \
    pv \
    logrotate \
    irqbalance \
    && \
    # Install debug tools only for debug builds
    if [ "$BUILD_TYPE" = "debug" ]; then \
        apt-get install -y htop strace gdb valgrind vim nano; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Note: cellframe user and directories will be created by package postinst

# Create systemctl stub for Docker (cellframe-node postinst tries to use systemctl)
RUN echo '#!/bin/bash\nexit 0' > /usr/bin/systemctl && \
    chmod +x /usr/bin/systemctl

# Create cache directory for Cellframe packages (persistent across builds)
RUN mkdir -p /var/cache/cellframe-packages

# Download and install Cellframe Node with intelligent caching
RUN set -x && \
    # Universal architecture detection (works on all Unix systems)
    UNAME_ARCH=$(uname -m) && \
    echo "Hardware architecture: $UNAME_ARCH" && \
    \
    # Map hardware architecture to Debian package architecture
    case "$UNAME_ARCH" in \
        x86_64|amd64) \
            ARCH="amd64" ;; \
        aarch64|arm64) \
            ARCH="arm64" ;; \
        armv7l|armhf) \
            ARCH="armhf" ;; \
        i386|i686) \
            ARCH="i386" ;; \
        *) \
            echo "WARNING: Unknown architecture $UNAME_ARCH, defaulting to amd64" && \
            ARCH="amd64" ;; \
    esac && \
    echo "Package architecture: $ARCH" && \
    \
    # Set package suffix based on build type and architecture
    # Note: ARM packages are typically only available in release format
    if [ "$BUILD_TYPE" = "release" ] || [ "$ARCH" = "arm64" ] || [ "$ARCH" = "armhf" ]; then \
        PACKAGE_SUFFIX=""; \
        if [ "$BUILD_TYPE" = "debug" ] && [ "$ARCH" != "amd64" ]; then \
            echo "INFO: Debug packages not available for $ARCH, using release package"; \
        fi; \
    else \
        PACKAGE_SUFFIX="-dbg"; \
    fi && \
    \
    # Create cache key for this configuration
    CACHE_KEY="${CELLFRAME_VERSION}_${BUILD_TYPE}_${ARCH}" && \
    CACHE_FILE="/var/cache/cellframe-packages/cellframe-node-${CACHE_KEY}.deb" && \
    CACHE_INFO="/var/cache/cellframe-packages/cellframe-node-${CACHE_KEY}.info" && \
    CACHE_TIMESTAMP="/var/cache/cellframe-packages/cellframe-node-${CACHE_KEY}.timestamp" && \
    echo "Cache key: $CACHE_KEY" && \
    \
    # For 'latest', always check if newer version available (cache max 1 day)
    USE_CACHE=false && \
    if [ -f "$CACHE_FILE" ] && [ -f "$CACHE_INFO" ]; then \
        if [ "$CELLFRAME_VERSION" = "latest" ] && [ -f "$CACHE_TIMESTAMP" ]; then \
            CACHE_AGE=$(($(date +%s) - $(cat "$CACHE_TIMESTAMP"))) && \
            if [ $CACHE_AGE -lt 86400 ]; then \
                echo "Cache is recent (${CACHE_AGE}s old), using cached package" && \
                USE_CACHE=true; \
            else \
                echo "Cache is old (${CACHE_AGE}s), will check for updates" && \
                USE_CACHE=false; \
            fi; \
        else \
            echo "Using cached package for specific version" && \
            USE_CACHE=true; \
        fi; \
    fi && \
    \
    if [ "$USE_CACHE" = "true" ]; then \
        echo "Found cached package: $CACHE_FILE" && \
        CACHED_INFO=$(cat "$CACHE_INFO") && \
        echo "Cached info: $CACHED_INFO" && \
        cp "$CACHE_FILE" /tmp/cellframe-node.deb; \
    else \
        echo "Downloading fresh package..." && \
        \
        # Determine download URL based on version and architecture
        if [ "$CELLFRAME_VERSION" = "latest" ]; then \
            # For latest version, get the most recent available for current architecture
            echo "Fetching latest version for architecture: $ARCH" && \
            LATEST_VERSION=$(wget -qO- http://pub.cellframe.net/linux/cellframe-node/master/ | \
                            grep -oP "cellframe-node-\K[0-9]+\.[0-9]+-[0-9]+(?=${PACKAGE_SUFFIX}-${ARCH}\.deb)" | \
                            sort -V | tail -1); \
            if [ -z "$LATEST_VERSION" ]; then \
                echo "ERROR: No Cellframe Node packages found for architecture: $ARCH" && \
                echo "FAIL FAST: Check package availability or use specific version" && \
                exit 1; \
            fi && \
            DOWNLOAD_URL="http://pub.cellframe.net/linux/cellframe-node/master/cellframe-node-${LATEST_VERSION}${PACKAGE_SUFFIX}-${ARCH}.deb" && \
            ACTUAL_VERSION="$LATEST_VERSION"; \
        else \
            # Use specific version for current architecture
            DOWNLOAD_URL="http://pub.cellframe.net/linux/cellframe-node/master/cellframe-node-${CELLFRAME_VERSION}${PACKAGE_SUFFIX}-${ARCH}.deb" && \
            ACTUAL_VERSION="$CELLFRAME_VERSION"; \
        fi && \
        \
        echo "Download configuration:" && \
        echo "  Hardware: $UNAME_ARCH" && \
        echo "  Package arch: $ARCH" && \
        echo "  Build type: $BUILD_TYPE (suffix: $PACKAGE_SUFFIX)" && \
        echo "  Version: $ACTUAL_VERSION" && \
        echo "  URL: $DOWNLOAD_URL" && \
        \
        # Download with Fail Fast principle - no fallbacks
        echo "Downloading exact package for $ARCH architecture..." && \
        wget -O /tmp/cellframe-node.deb "$DOWNLOAD_URL" || { \
            echo "ERROR: Failed to download Cellframe Node package" && \
            echo "  URL: $DOWNLOAD_URL" && \
            echo "  Architecture: $ARCH" && \
            echo "  Version: $ACTUAL_VERSION" && \
            echo "  Build type: $BUILD_TYPE" && \
            echo "FAIL FAST: No fallbacks - fix the configuration or package availability" && \
            exit 1; \
        } && \
        \
        # Cache the downloaded package for future builds
        echo "Caching package for future use..." && \
        cp /tmp/cellframe-node.deb "$CACHE_FILE" && \
        echo "version=${ACTUAL_VERSION},arch=${ARCH},build_type=${BUILD_TYPE},download_url=${DOWNLOAD_URL}" > "$CACHE_INFO" && \
        date +%s > "$CACHE_TIMESTAMP" && \
        echo "Cached at: $(date)"; \
    fi && \
    \
    # Install package with dependency resolution
    echo "Installing Cellframe Node package..." && \
    (dpkg -i /tmp/cellframe-node.deb || (apt-get update && apt-get install -f -y)) && \
    rm /tmp/cellframe-node.deb

# Copy modular configs to disable production networks
# Using cellframe-node.cfg.d/ approach - proper modular configuration
COPY config/templates/cellframe-node.cfg.d/disable-production-networks.cfg \
     /opt/cellframe-node/etc/cellframe-node.cfg.d/

# Ensure required runtime directories exist AFTER package installation
# Check which directories package doesn't create and add them
RUN mkdir -p /opt/cellframe-node/var/run \
             /opt/cellframe-node/var/lib/plugins && \
    chmod -R 755 /opt/cellframe-node/var

# Skip cellframe-node --version check during build to avoid:
# 1. Unnecessary synchronization with production networks
# 2. Disk space exhaustion in Docker build layer
# 3. Long build times
# Installation verification will happen at container runtime via healthchecks

# Add Cellframe Node binaries to PATH
ENV PATH="/opt/cellframe-node/bin:/opt/cellframe-node/sbin:${PATH}"

# Install build dependencies for test plugins compilation
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for testing (CF20 compatible)
# Use --break-system-packages for Debian 12+ pip restrictions
RUN pip3 install --break-system-packages requests pycryptodome

# Note: Test plugins can be installed dynamically via YAML scenarios using the 'packages' section
# This allows flexible plugin installation per test scenario

# Note: Base configs created by package postinst
# Network-specific configs will be mounted via volumes at runtime

# Create cellframe-node.cfg.d directory for modular configuration
# Note: cellframe-node.cfg.d/ created by package, we'll add our configs via volumes

# Note: Base cellframe-node.cfg will be provided by the official Cellframe Node package
# We only add modular configurations through cellframe-node.cfg.d/ and network/ directories

# Set environment variables
ENV CELLFRAME_NODE_ROOT=/opt/cellframe-node
ENV PATH=$PATH:/opt/cellframe-node/bin
ENV DAP_DEBUG=1
ENV CELLFRAME_DEBUG=1

# Expose ports
EXPOSE 8545 8546 8547 7007 31337

# Note: Running as root inside container to avoid permission issues with mounted volumes
# This is standard practice for Docker containers that need to write to host-mounted volumes
WORKDIR /opt/cellframe-node

# Copy minimal entrypoint script
COPY scripts/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Use entrypoint for init, CMD for main process
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]
