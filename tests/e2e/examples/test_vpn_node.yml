name: "VPN Node Testing"
description: "Test Cellframe node with VPN capabilities (OpenVPN/WireGuard)"

# Network configuration with custom Docker settings
network:
  topology: minimal
  nodes:
    - name: vpn_server
      role: root
      validator: true
      # Install VPN packages
      custom_packages:
        - wireguard-tools
        - openvpn
        - iproute2
      # Docker customizations for VPN
      # Note: /dev/net/tun usually exists by default in containers
      # Only NET_ADMIN capability is required for TUN/TAP usage
      docker_capabilities:
        - NET_ADMIN
        - NET_RAW
      docker_extra:
        sysctls:
          net.ipv4.ip_forward: "1"
          net.ipv6.conf.all.forwarding: "1"
      custom_env:
        VPN_ENABLED: "true"
    
    - name: vpn_client
      role: full
      # Install VPN client tools
      custom_packages:
        - wireguard-tools
        - iproute2
      # Docker customizations
      # NET_ADMIN is sufficient for VPN client operations
      docker_capabilities:
        - NET_ADMIN
    
    - name: regular_node
      role: full
      # Regular node without VPN (for comparison)

# Global defaults
defaults:
  node: vpn_server
  wait: 2s

# Setup VPN infrastructure
setup:
  - cli: "version"
    description: "Check node version"
  
  - bash: |
      # Check if TUN device is available
      if [ -e /dev/net/tun ]; then
        echo "TUN device available"
        exit 0
      else
        echo "TUN device NOT available"
        exit 1
      fi
    node: vpn_server
    description: "Verify TUN device in VPN server"
  
  - bash: |
      # Check NET_ADMIN capability
      if ip link add dummy0 type dummy 2>/dev/null; then
        ip link delete dummy0
        echo "NET_ADMIN capability present"
        exit 0
      else
        echo "NET_ADMIN capability MISSING"
        exit 1
      fi
    node: vpn_server
    description: "Verify NET_ADMIN capability"

# Test VPN functionality
test:
  - group:
      description: "Network configuration tests"
      defaults:
        node: vpn_server
      steps:
        - bash: |
            # Check IP forwarding
            if [ "$(cat /proc/sys/net/ipv4/ip_forward)" = "1" ]; then
              echo "IP forwarding enabled"
              exit 0
            else
              echo "IP forwarding disabled"
              exit 1
            fi
          description: "Verify IP forwarding is enabled"
        
        - bash: |
            # Create WireGuard interface
            ip link add wg0 type wireguard
            if [ $? -eq 0 ]; then
              echo "WireGuard interface created"
              ip link delete wg0
              exit 0
            else
              echo "Failed to create WireGuard interface"
              exit 1
            fi
          description: "Test WireGuard interface creation"
  
  - group:
      description: "VPN client connectivity"
      defaults:
        node: vpn_client
      steps:
        - bash: |
            # Check TUN device on client
            [ -e /dev/net/tun ] && echo "TUN available on client"
          description: "Verify TUN on client node"

# Validation
check:
  - cli: "stats"
    node: vpn_server
    expect: success
    description: "Verify VPN server is operational"
  
  - cli: "stats"
    node: vpn_client
    expect: success
    description: "Verify VPN client is operational"
  
  - python: |
      # Verify all VPN-enabled nodes have required capabilities
      print("VPN test suite completed successfully")
    description: "Final validation"

