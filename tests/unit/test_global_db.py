#!/usr/bin/env python3
"""
üóÉÔ∏è Unit —Ç–µ—Å—Ç—ã –¥–ª—è dap.global_db –º–æ–¥—É–ª—è

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
- Gdb: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ë–î
- GdbCluster: –∫–ª–∞—Å—Ç–µ—Ä –ë–î
- GdbNode: —É–∑–µ–ª –ë–î
- GdbInstance: —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
"""

import unittest
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º DAP
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

class TestDapGlobalDbImports(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤ global_db –º–æ–¥—É–ª—è"""
    
    def test_import_global_db_module(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ global_db –º–æ–¥—É–ª—è"""
        try:
            from dap import global_db
            self.assertIsNotNone(global_db)
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å dap.global_db: {e}")
    
    def test_import_global_db_classes(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ global_db"""
        try:
            from dap.global_db import Gdb, GdbCluster, GdbNode, GdbInstance
            self.assertIsNotNone(Gdb)
            self.assertIsNotNone(GdbCluster)
            self.assertIsNotNone(GdbNode)
            self.assertIsNotNone(GdbInstance)
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã global_db: {e}")


class TestGdbClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ Gdb"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        try:
            from dap.global_db import Gdb
            self.Gdb = Gdb
        except ImportError:
            self.skipTest("–ö–ª–∞—Å—Å Gdb –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_gdb_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Gdb"""
        try:
            gdb_instance = self.Gdb()
            self.assertIsNotNone(gdb_instance)
        except Exception as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Gdb: {e}")
    
    def test_gdb_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ Gdb"""
        try:
            gdb_instance = self.Gdb()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            expected_methods = ['get', 'set', 'delete', 'keys', 'exists']
            for method_name in expected_methods:
                if hasattr(gdb_instance, method_name):
                    method = getattr(gdb_instance, method_name)
                    self.assertTrue(callable(method))
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ Gdb: {e}")


class TestGdbClusterClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ GdbCluster"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        try:
            from dap.global_db import GdbCluster
            self.GdbCluster = GdbCluster
        except ImportError:
            self.skipTest("–ö–ª–∞—Å—Å GdbCluster –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_gdb_cluster_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GdbCluster"""
        try:
            cluster_instance = self.GdbCluster()
            self.assertIsNotNone(cluster_instance)
        except Exception as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä GdbCluster: {e}")
    
    def test_gdb_cluster_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ GdbCluster"""
        try:
            cluster_instance = self.GdbCluster()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            expected_methods = ['add_node', 'remove_node', 'get_nodes', 'sync']
            for method_name in expected_methods:
                if hasattr(cluster_instance, method_name):
                    method = getattr(cluster_instance, method_name)
                    self.assertTrue(callable(method))
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ GdbCluster: {e}")


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ runner'–∞
    unittest.main(verbosity=2, buffer=True) 