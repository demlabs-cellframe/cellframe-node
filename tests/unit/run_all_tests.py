#!/usr/bin/env python3
"""
üèÉ‚Äç‚ôÇÔ∏è Runner –¥–ª—è –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤ Python DAP SDK

–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ unit —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª–µ–π:
- test_core.py: —Ç–µ—Å—Ç—ã core –º–æ–¥—É–ª—è
- test_crypto.py: —Ç–µ—Å—Ç—ã crypto –º–æ–¥—É–ª—è  
- test_network.py: —Ç–µ—Å—Ç—ã network –º–æ–¥—É–ª—è
- test_config.py: —Ç–µ—Å—Ç—ã config –º–æ–¥—É–ª—è
- test_events.py: —Ç–µ—Å—Ç—ã events –º–æ–¥—É–ª—è
- test_global_db.py: —Ç–µ—Å—Ç—ã global_db –º–æ–¥—É–ª—è
- test_common.py: —Ç–µ—Å—Ç—ã common –º–æ–¥—É–ª—è
"""

import unittest
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º DAP
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

def run_all_unit_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤"""
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_dir = Path(__file__).parent
    test_files = [
        'test_core.py',
        'test_crypto.py', 
        'test_network.py',
        'test_config.py',
        'test_events.py',
        'test_global_db.py',
        'test_common.py'
    ]
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤ Python DAP SDK")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for test_file in test_files:
        test_path = test_dir / test_file
        if test_path.exists():
            print(f"üìù –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç—ã –∏–∑ {test_file}")
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module_name = test_file[:-3]  # —É–±–∏—Ä–∞–µ–º .py
                spec = unittest.util.spec_from_file_location(module_name, test_path)
                module = unittest.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ suite
                module_suite = loader.loadTestsFromModule(module)
                suite.addTest(module_suite)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {test_file}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(
        verbosity=2,
        buffer=True,
        stream=sys.stdout
    )
    
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"   üí• –û—à–∏–±–∫–∏: {len(result.errors)}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(result.skipped) if hasattr(result, 'skipped') else 0}")
    print(f"   üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    if result.wasSuccessful():
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        return 1


if __name__ == '__main__':
    sys.exit(run_all_unit_tests()) 