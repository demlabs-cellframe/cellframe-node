#!/usr/bin/env python3
"""
üîß Unit —Ç–µ—Å—Ç—ã –¥–ª—è dap.common –º–æ–¥—É–ª—è

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–µ –∫–ª–∞—Å—Å—ã –∏ —É—Ç–∏–ª–∏—Ç—ã:
- DapCommon: –æ–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã
- DapUtils: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- DapHelpers: –ø–æ–º–æ—â–Ω–∏–∫–∏
- DapConstants: –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
"""

import unittest
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º DAP
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

class TestDapCommonImports(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–º–ø–æ—Ä—Ç–æ–≤ common –º–æ–¥—É–ª—è"""
    
    def test_import_common_module(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ common –º–æ–¥—É–ª—è"""
        try:
            from dap import common
            self.assertIsNotNone(common)
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å dap.common: {e}")
    
    def test_import_common_classes(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ common"""
        try:
            from dap.common import DapCommon, DapUtils, DapHelpers, DapConstants
            self.assertIsNotNone(DapCommon)
            self.assertIsNotNone(DapUtils)
            self.assertIsNotNone(DapHelpers)
            self.assertIsNotNone(DapConstants)
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã common: {e}")


class TestDapCommonClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ DapCommon"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        try:
            from dap.common import DapCommon
            self.DapCommon = DapCommon
        except ImportError:
            self.skipTest("–ö–ª–∞—Å—Å DapCommon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_dap_common_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DapCommon"""
        try:
            common_instance = self.DapCommon()
            self.assertIsNotNone(common_instance)
        except Exception as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DapCommon: {e}")
    
    def test_dap_common_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ DapCommon"""
        try:
            common_instance = self.DapCommon()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            expected_methods = ['init', 'cleanup', 'get_version', 'get_info']
            for method_name in expected_methods:
                if hasattr(common_instance, method_name):
                    method = getattr(common_instance, method_name)
                    self.assertTrue(callable(method))
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ DapCommon: {e}")


class TestDapUtilsClass(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∫–ª–∞—Å—Å–∞ DapUtils"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        try:
            from dap.common import DapUtils
            self.DapUtils = DapUtils
        except ImportError:
            self.skipTest("–ö–ª–∞—Å—Å DapUtils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_dap_utils_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DapUtils"""
        try:
            utils_instance = self.DapUtils()
            self.assertIsNotNone(utils_instance)
        except Exception as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä DapUtils: {e}")
    
    def test_dap_utils_methods(self):
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞ DapUtils"""
        try:
            utils_instance = self.DapUtils()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
            expected_methods = ['format_bytes', 'parse_address', 'validate_hash', 'convert_data']
            for method_name in expected_methods:
                if hasattr(utils_instance, method_name):
                    method = getattr(utils_instance, method_name)
                    self.assertTrue(callable(method))
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ DapUtils: {e}")


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ runner'–∞
    unittest.main(verbosity=2, buffer=True) 