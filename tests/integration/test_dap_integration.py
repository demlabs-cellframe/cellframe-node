#!/usr/bin/env python3
"""
üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Python DAP SDK

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã DAP
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥—É–ª–µ–π
- –ü–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C –±–∏–Ω–¥–∏–Ω–≥–æ–≤
"""

import unittest
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º DAP
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

class TestDapIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã DAP SDK"""
    
    def test_full_dap_import(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ DAP SDK"""
        try:
            import dap
            self.assertIsNotNone(dap)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            if hasattr(dap, '__version__'):
                version = dap.__version__
                self.assertIsInstance(version, str)
                self.assertGreater(len(version), 0)
                print(f"‚úÖ DAP SDK –≤–µ—Ä—Å–∏—è: {version}")
            
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DAP SDK: {e}")
    
    def test_all_modules_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        modules = ['core', 'crypto', 'network', 'config', 'events', 'global_db', 'common']
        imported_modules = []
        failed_modules = []
        
        for module_name in modules:
            try:
                module = __import__(f'dap.{module_name}', fromlist=[module_name])
                imported_modules.append(module_name)
                print(f"‚úÖ –ú–æ–¥—É–ª—å dap.{module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except ImportError as e:
                failed_modules.append((module_name, str(e)))
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ dap.{module_name}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ –º–æ–¥—É–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å
        success_rate = len(imported_modules) / len(modules)
        self.assertGreaterEqual(success_rate, 0.5, 
                               f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–æ–¥—É–ª–µ–π –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å: {failed_modules}")
        
        print(f"üìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {len(imported_modules)}/{len(modules)}")
    
    def test_dap_main_classes_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ DAP"""
        try:
            from dap import (
                DapException,
                DapSign, DapCert,
                Gdb, GdbCluster
            )
            
            classes = [DapException, DapSign, DapCert, Gdb, GdbCluster]
            for cls in classes:
                self.assertTrue(callable(cls), f"–ö–ª–∞—Å—Å {cls.__name__} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è callable")
                print(f"‚úÖ –ö–ª–∞—Å—Å {cls.__name__} –¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except ImportError as e:
            print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            # –ù–µ fails —Ç–µ—Å—Ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    
    def test_c_extension_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ C —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ C –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–±—Ä–∞–Ω—ã)
            import python_dap
            self.assertIsNotNone(python_dap)
            print("‚úÖ C —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ python_dap –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except ImportError:
            print("‚ö†Ô∏è  C —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ python_dap –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ —Å–æ–±—Ä–∞–Ω–æ)")
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ —Å–æ–±—Ä–∞–Ω
            pass
    
    def test_basic_functionality_chain(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
            from dap.core import Dap
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            dap_instance = Dap()
            self.assertIsNotNone(dap_instance)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            if hasattr(dap_instance, 'init'):
                try:
                    result = dap_instance.init()
                    print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DAP: {result}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DAP –Ω–µ —É–¥–∞–ª–∞—Å—å (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
            
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            
        except ImportError:
            print("‚ö†Ô∏è  Core –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.skipTest("Core –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def test_crypto_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            from dap.crypto import DapSign, DapHash
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
            sign_obj = DapSign()
            hash_obj = DapHash()
            
            self.assertIsNotNone(sign_obj)
            self.assertIsNotNone(hash_obj)
            
            print("‚úÖ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except ImportError:
            print("‚ö†Ô∏è  –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            self.skipTest("Crypto –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def test_network_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π"""
        try:
            from dap.network import DapClient, DapServer
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
            client_obj = DapClient()
            server_obj = DapServer()
            
            self.assertIsNotNone(client_obj)
            self.assertIsNotNone(server_obj)
            
            print("‚úÖ –°–µ—Ç–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except ImportError:
            print("‚ö†Ô∏è  –°–µ—Ç–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            self.skipTest("Network –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


class TestDapSystemIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def test_full_system_initialization(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã DAP...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            from dap import core, crypto, network, config
            
            modules = [core, crypto, network, config]
            initialized_modules = []
            
            for i, module in enumerate(modules):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω
                    self.assertIsNotNone(module)
                    initialized_modules.append(module.__name__)
                    print(f"‚úÖ –ú–æ–¥—É–ª—å {module.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {module.__name__}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
            self.assertGreater(len(initialized_modules), 0, 
                             "–ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è")
            
            print(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –º–æ–¥—É–ª–µ–π: {len(initialized_modules)}/4")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.skipTest("–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Python DAP SDK")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ runner'–∞
    unittest.main(verbosity=2, buffer=True) 