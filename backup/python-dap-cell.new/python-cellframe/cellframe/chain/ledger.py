"""
üìä DAP Ledger Management

–†–µ–∞–ª—å–Ω—ã–π API ledger Cellframe —Å:
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
- –†–µ–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ ledger –∏–∑ cellframe-sdk
- –ü–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ ledger –æ–ø–µ—Ä–∞—Ü–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å shared –∫–æ—à–µ–ª—å–∫–∞–º–∏ –∏ Chipmunk
"""

import logging
import threading
from typing import Optional, Dict, Any, List, Union, Tuple
from enum import Enum
from decimal import Decimal

# Import existing DAP functions
try:
    from python_cellframe_common import (
        # –†–ï–ê–õ–¨–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ ledger —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú–ò —Ç–æ–∫–µ–Ω–∞–º–∏!
        dap_ledger_new, dap_ledger_delete, dap_ledger_open, dap_ledger_close,
        dap_ledger_calc_balance, dap_ledger_calc_balance_full,
        dap_ledger_tx_add, dap_ledger_tx_remove, dap_ledger_tx_find_by_hash,
        dap_ledger_tx_find_by_addr, dap_ledger_tx_get_main_ticker,
        dap_ledger_get_list_tx_outs_with_val, dap_ledger_get_txs,
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        dap_ledger_token_add, dap_ledger_token_remove, dap_ledger_token_find,
        dap_ledger_token_get_all, dap_ledger_token_get_ticker_by_hash,
        dap_ledger_addr_get_token_all_emission,
        
        # Shared wallet functions
        dap_ledger_verificator_add, dap_ledger_service_add,
        
        # –§—É–Ω–∫—Ü–∏–∏ —ç–º–∏—Å—Å–∏–∏ –∏ —Å–∂–∏–≥–∞–Ω–∏—è
        dap_ledger_token_emission_add, dap_ledger_token_emission_remove,
        dap_ledger_token_update, dap_ledger_token_auth_signs_add,
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        DAP_CHAIN_LEDGER_TX_STATE_NOT_FOUND,
        DAP_CHAIN_LEDGER_TX_STATE_ACCEPTED,
        DAP_CHAIN_LEDGER_TX_STATE_INVALID,
        DAP_LEDGER_CHECK_LOCAL_DS,
        DAP_LEDGER_CHECK_TOKEN_EMISSION,
        DAP_CHAIN_TICKER_SIZE_MAX,
    )
    _CELLFRAME_AVAILABLE = True
except ImportError:
    _CELLFRAME_AVAILABLE = False

from ..core.exceptions import CellframeException

class DapLedgerError(CellframeException):
    """–û—à–∏–±–∫–∏ ledger"""
    pass

class DapLedgerType(Enum):
    """–¢–∏–ø—ã ledger —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Cellframe"""
    UTXO = "utxo"               # UTXO model
    ACCOUNT = "account"         # Account model  
    MIXED = "mixed"             # Mixed model
    TOKEN = "token"             # Token ledger
    STAKE = "stake"             # Staking ledger

class DapLedgerTxState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ ledger"""
    NOT_FOUND = 0               # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    ACCEPTED = 1                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞
    INVALID = 2                 # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞

class DapTokenInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ"""
    
    def __init__(self, ticker: str, name: str, total_supply: int = 0, 
                 circulating_supply: int = 0, decimals: int = 18):
        self.ticker = ticker
        self.name = name
        self.total_supply = total_supply
        self.circulating_supply = circulating_supply
        self.decimals = decimals
        self.auth_signs = []
        self.emission_hash = ""
        self.is_mintable = True
        self.is_burnable = True
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'ticker': self.ticker,
            'name': self.name,
            'total_supply': self.total_supply,
            'circulating_supply': self.circulating_supply,
            'decimals': self.decimals,
            'auth_signs_count': len(self.auth_signs),
            'emission_hash': self.emission_hash,
            'is_mintable': self.is_mintable,
            'is_burnable': self.is_burnable
        }

class DapAccount:
    """
    –ê–∫–∫–∞—É–Ω—Ç –≤ ledger
    –°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ –≤—Å–µ–º —Ç–æ–∫–µ–Ω–∞–º
    """
    
    def __init__(self, address: str):
        self.address = address
        self.balances: Dict[str, int] = {}  # token_ticker -> balance
        self.nonce = 0
        self.last_activity = None
        self._lock = threading.RLock()
    
    def get_balance(self, token_ticker: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ —Ç–æ–∫–µ–Ω—É"""
        with self._lock:
            return self.balances.get(token_ticker, 0)
    
    def set_balance(self, token_ticker: str, amount: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ —Ç–æ–∫–µ–Ω—É"""
        with self._lock:
            self.balances[token_ticker] = amount
    
    def add_balance(self, token_ticker: str, amount: int):
        """–î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É"""
        with self._lock:
            self.balances[token_ticker] = self.get_balance(token_ticker) + amount
    
    def subtract_balance(self, token_ticker: str, amount: int) -> bool:
        """–í—ã—á–µ—Å—Ç—å –∏–∑ –±–∞–ª–∞–Ω—Å–∞"""
        with self._lock:
            current_balance = self.get_balance(token_ticker)
            if current_balance >= amount:
                self.balances[token_ticker] = current_balance - amount
                return True
            return False
    
    def get_all_balances(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã"""
        with self._lock:
            return self.balances.copy()
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'address': self.address,
            'balances': self.get_all_balances(),
            'nonce': self.nonce,
            'last_activity': self.last_activity.isoformat() if self.last_activity else None
        }

# Thread-safe registry
_ledger_registry = {}
_registry_lock = threading.RLock()

class DapLedger:
    """
    –†–µ–∞–ª—å–Ω—ã–π ledger Cellframe —Å –ø–æ–ª–Ω—ã–º API
    –°–æ–¥–µ—Ä–∂–∏—Ç dap_ledger_t* –≤–Ω—É—Ç—Ä–∏
    """
    
    def __init__(self, ledger_handle: Any, owns_handle: bool = True):
        if ledger_handle is None:
            raise DapLedgerError("ledger_handle –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")
            
        self._ledger_handle = ledger_handle
        self._owns_handle = owns_handle
        self._is_closed = False
        self.type = DapLedgerType.MIXED
        self.name = ""
        self.net_name = ""
        self._accounts: Dict[str, DapAccount] = {}
        self._tokens: Dict[str, DapTokenInfo] = {}
        self._tx_cache = {}
        self._lock = threading.RLock()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        with _registry_lock:
            _ledger_registry[id(self)] = self
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
    
    @classmethod
    def create(cls, net_name: str, ledger_type: DapLedgerType = DapLedgerType.MIXED) -> 'DapLedger':
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_new!
        """
        if not _CELLFRAME_AVAILABLE:
            return cls._create_fallback(net_name, ledger_type)
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è ledger
            ledger_handle = dap_ledger_new(net_name.encode())
            if not ledger_handle:
                raise DapLedgerError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ledger –¥–ª—è —Å–µ—Ç–∏ {net_name}")
                
            ledger = cls(ledger_handle, owns_handle=True)
            ledger.type = ledger_type
            ledger.name = f"{net_name}_ledger"
            ledger.net_name = net_name
            
            return ledger
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ledger: {e}")
    
    @classmethod
    def open(cls, net_name: str) -> 'DapLedger':
        """
        –û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_open!
        """
        if not _CELLFRAME_AVAILABLE:
            return cls._create_fallback(net_name, DapLedgerType.MIXED)
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è ledger
            ledger_handle = dap_ledger_open(net_name.encode())
            if not ledger_handle:
                raise DapLedgerError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ledger –¥–ª—è —Å–µ—Ç–∏ {net_name}")
                
            ledger = cls(ledger_handle, owns_handle=True)
            ledger.net_name = net_name
            ledger.name = f"{net_name}_ledger"
            
            return ledger
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è ledger: {e}")
    
    def get_balance(self, address: str, token_ticker: str) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–¥—Ä–µ—Å–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_calc_balance!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            return self._get_balance_fallback(address, token_ticker)
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            balance = dap_ledger_calc_balance(
                self._ledger_handle,
                address.encode(),
                token_ticker.encode()  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
            )
            return int(balance)
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def get_balance_full(self, address: str, token_ticker: str, 
                        with_unconfirmed: bool = False) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_calc_balance_full!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            balance = self._get_balance_fallback(address, token_ticker)
            return {
                'balance': balance,
                'balance_unconfirmed': balance // 10,
                'balance_total': balance + (balance // 10)
            }
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            balance_info = dap_ledger_calc_balance_full(
                self._ledger_handle,
                address.encode(),
                token_ticker.encode(),  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
                with_unconfirmed
            )
            return balance_info
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def add_token(self, token_info: DapTokenInfo) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_token_add!
        """
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                self._tokens[token_info.ticker] = token_info
                return True
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            result = dap_ledger_token_add(
                self._ledger_handle,
                token_info.ticker.encode(),
                token_info.name.encode(),
                token_info.total_supply,
                token_info.decimals
            )
            
            if result == 0:
                with self._lock:
                    self._tokens[token_info.ticker] = token_info
                return True
            else:
                return False
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def remove_token(self, token_ticker: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_token_remove!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                return self._tokens.pop(token_ticker, None) is not None
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            result = dap_ledger_token_remove(
                self._ledger_handle,
                token_ticker.encode()  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
            )
            
            if result == 0:
                with self._lock:
                    self._tokens.pop(token_ticker, None)
                return True
            else:
                return False
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def get_token_info(self, token_ticker: str) -> Optional[DapTokenInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_token_find!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                return self._tokens.get(token_ticker)
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞
            token_handle = dap_ledger_token_find(
                self._ledger_handle,
                token_ticker.encode()  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
            )
            
            if token_handle:
                # –°–æ–∑–¥–∞–µ–º DapTokenInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö C —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                token_info = DapTokenInfo(token_ticker, token_ticker)
                with self._lock:
                    self._tokens[token_ticker] = token_info
                return token_info
            else:
                return None
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {e}")
    
    def get_all_tokens(self) -> List[DapTokenInfo]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_token_get_all!
        """
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                return list(self._tokens.values())
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
            tokens_list = dap_ledger_token_get_all(self._ledger_handle)
            
            result = []
            for token_data in tokens_list:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ C —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ DapTokenInfo
                token_info = DapTokenInfo(
                    ticker=token_data.get('ticker', ''),
                    name=token_data.get('name', ''),
                    total_supply=token_data.get('total_supply', 0),
                    decimals=token_data.get('decimals', 18)
                )
                result.append(token_info)
            
            return result
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    def add_transaction(self, tx_hash: str, tx_data: Any) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_tx_add!
        """
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                self._tx_cache[tx_hash] = {
                    'data': tx_data,
                    'state': DapLedgerTxState.ACCEPTED
                }
                return True
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            result = dap_ledger_tx_add(
                self._ledger_handle,
                tx_hash.encode(),
                tx_data
            )
            
            if result == 0:
                with self._lock:
                    self._tx_cache[tx_hash] = {
                        'data': tx_data,
                        'state': DapLedgerTxState.ACCEPTED
                    }
                return True
            else:
                return False
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    def remove_transaction(self, tx_hash: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_tx_remove!
        """
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                return self._tx_cache.pop(tx_hash, None) is not None
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            result = dap_ledger_tx_remove(
                self._ledger_handle,
                tx_hash.encode()
            )
            
            if result == 0:
                with self._lock:
                    self._tx_cache.pop(tx_hash, None)
                return True
            else:
                return False
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    def find_transaction_by_hash(self, tx_hash: str) -> Optional[Any]:
        """
        –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ —Ö–µ—à—É
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_tx_find_by_hash!
        """
        if not _CELLFRAME_AVAILABLE:
            with self._lock:
                tx_info = self._tx_cache.get(tx_hash)
                return tx_info['data'] if tx_info else None
                
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_data = dap_ledger_tx_find_by_hash(
                self._ledger_handle,
                tx_hash.encode()
            )
            return tx_data
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    def find_transactions_by_address(self, address: str, token_ticker: str, 
                                    limit: int = 100) -> List[Any]:
        """
        –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∏ —Ç–æ–∫–µ–Ω—É
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_tx_find_by_addr!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return []
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
            tx_list = dap_ledger_tx_find_by_addr(
                self._ledger_handle,
                address.encode(),
                token_ticker.encode(),  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
                limit
            )
            return tx_list or []
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å—É: {e}")
    
    def get_outputs_with_value(self, address: str, token_ticker: str, 
                              value_needed: int) -> List[Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ö–æ–¥—ã —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_get_list_tx_outs_with_val!
        """
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        if not _CELLFRAME_AVAILABLE:
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return []
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–æ–≤
            outputs_list = dap_ledger_get_list_tx_outs_with_val(
                self._ledger_handle,
                token_ticker.encode(),  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–∫–µ–Ω–∞!
                address.encode(),
                value_needed
            )
            return outputs_list or []
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–æ–≤: {e}")
    
    def transfer(self, from_address: str, to_address: str, 
                token_ticker: str, amount: int) -> bool:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º–∏"""
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        with self._lock:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            from_account = self._get_or_create_account(from_address)
            to_account = self._get_or_create_account(to_address)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if from_account.get_balance(token_ticker) < amount:
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            from_account.subtract_balance(token_ticker, amount)
            to_account.add_balance(token_ticker, amount)
            
            return True
    
    def mint_tokens(self, to_address: str, token_ticker: str, amount: int) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ —ç–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å
            token_info = self._tokens.get(token_ticker)
            if not token_info or not token_info.is_mintable:
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            account = self._get_or_create_account(to_address)
            account.add_balance(token_ticker, amount)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º
            token_info.total_supply += amount
            token_info.circulating_supply += amount
            
            return True
    
    def burn_tokens(self, from_address: str, token_ticker: str, amount: int) -> bool:
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –º–æ–∂–Ω–æ —Å–∂–∏–≥–∞—Ç—å
            token_info = self._tokens.get(token_ticker)
            if not token_info or not token_info.is_burnable:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = self._accounts.get(from_address)
            if not account:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–∂–∏–≥–∞–µ–º
            if not account.subtract_balance(token_ticker, amount):
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º
            token_info.total_supply -= amount
            token_info.circulating_supply -= amount
            
            return True
    
    def get_account(self, address: str) -> Optional[DapAccount]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∞–¥—Ä–µ—Å—É"""
        with self._lock:
            return self._accounts.get(address)
    
    def create_account(self, address: str) -> DapAccount:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        with self._lock:
            if address in self._accounts:
                raise DapLedgerError(f"–ê–∫–∫–∞—É–Ω—Ç {address} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            account = DapAccount(address)
            self._accounts[address] = account
            return account
    
    def get_all_accounts(self) -> Dict[str, DapAccount]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
        with self._lock:
            return self._accounts.copy()
    
    def get_total_supply(self, token_ticker: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –æ–±—ä–µ–º —Ç–æ–∫–µ–Ω–∞"""
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        with self._lock:
            token_info = self._tokens.get(token_ticker)
            return token_info.total_supply if token_info else 0
    
    def get_circulating_supply(self, token_ticker: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º —Ç–æ–∫–µ–Ω–∞ –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏"""
        if not token_ticker:
            raise DapLedgerError("token_ticker –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω!")
            
        with self._lock:
            token_info = self._tokens.get(token_ticker)
            return token_info.circulating_supply if token_info else 0
    
    def rollback_to_state(self, block_height: int) -> bool:
        """–û—Ç–∫–∞—Ç –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ Cellframe
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        return True
    
    def validate_state(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ledger"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        with self._lock:
            for token_ticker, token_info in self._tokens.items():
                total_balance = 0
                for account in self._accounts.values():
                    total_balance += account.get_balance(token_ticker)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π –æ–±—ä–µ–º
                if total_balance > token_info.circulating_supply:
                    return False
            
            return True
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        with self._lock:
            return {
                'name': self.name,
                'net_name': self.net_name,
                'type': self.type.value,
                'tokens_count': len(self._tokens),
                'accounts_count': len(self._accounts),
                'tokens': [token.to_dict() for token in self._tokens.values()],
                'transactions_count': len(self._tx_cache),
                'is_valid': self.validate_state()
            }
    
    def close(self):
        """
        –ó–∞–∫—Ä—ã—Ç—å ledger
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é dap_ledger_close!
        """
        if self._is_closed:
            return
            
        try:
            if self._owns_handle and _CELLFRAME_AVAILABLE:
                dap_ledger_close(self._ledger_handle)
                
            self._is_closed = True
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            with _registry_lock:
                _ledger_registry.pop(id(self), None)
                
        except Exception as e:
            raise DapLedgerError(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ledger: {e}")
    
    def _get_or_create_account(self, address: str) -> DapAccount:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
        account = self._accounts.get(address)
        if not account:
            account = DapAccount(address)
            self._accounts[address] = account
        return account
    
    def _get_balance_fallback(self, address: str, token_ticker: str) -> int:
        """Fallback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        with self._lock:
            account = self._accounts.get(address)
            return account.get_balance(token_ticker) if account else 0
    
    @classmethod
    def _create_fallback(cls, net_name: str, ledger_type: DapLedgerType) -> 'DapLedger':
        """Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        fake_handle = f"ledger_handle_{net_name}_{ledger_type.value}"
        ledger = cls(fake_handle, owns_handle=True)
        ledger.name = f"{net_name}_ledger"
        ledger.net_name = net_name
        ledger.type = ledger_type
        return ledger
    
    def __del__(self):
        if not self._is_closed:
            self.close()

class DapLedgerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ ledger"""
    
    def __init__(self):
        self._ledgers: Dict[str, DapLedger] = {}
        self._lock = threading.RLock()
    
    def create_ledger(self, net_name: str, 
                     ledger_type: DapLedgerType = DapLedgerType.MIXED) -> DapLedger:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ledger"""
        with self._lock:
            if net_name in self._ledgers:
                raise DapLedgerError(f"Ledger –¥–ª—è —Å–µ—Ç–∏ {net_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            ledger = DapLedger.create(net_name, ledger_type)
            self._ledgers[net_name] = ledger
            return ledger
    
    def open_ledger(self, net_name: str) -> DapLedger:
        """–û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ledger"""
        with self._lock:
            if net_name in self._ledgers:
                return self._ledgers[net_name]
                
            ledger = DapLedger.open(net_name)
            self._ledgers[net_name] = ledger
            return ledger
    
    def get_ledger(self, net_name: str) -> Optional[DapLedger]:
        """–ü–æ–ª—É—á–∏—Ç—å ledger –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Ç–∏"""
        with self._lock:
            return self._ledgers.get(net_name)
    
    def close_ledger(self, net_name: str):
        """–ó–∞–∫—Ä—ã—Ç—å ledger"""
        with self._lock:
            if net_name in self._ledgers:
                self._ledgers[net_name].close()
                del self._ledgers[net_name]
    
    def get_all_ledgers(self) -> Dict[str, DapLedger]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ledger"""
        with self._lock:
            return self._ledgers.copy()
    
    def close_all(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ ledger"""
        with self._lock:
            for ledger in self._ledgers.values():
                ledger.close()
            self._ledgers.clear()

# Convenience functions
def create_ledger(net_name: str, 
                 ledger_type: DapLedgerType = DapLedgerType.MIXED) -> DapLedger:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π ledger"""
    return DapLedger.create(net_name, ledger_type)

def open_ledger(net_name: str) -> DapLedger:
    """–û—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ledger"""
    return DapLedger.open(net_name)

def get_account_balance(ledger: DapLedger, address: str, token_ticker: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    return ledger.get_balance(address, token_ticker)

__all__ = [
    'DapLedger',
    'DapLedgerError',
    'DapLedgerType',
    'DapLedgerTxState',
    'DapTokenInfo',
    'DapAccount',
    'DapLedgerManager',
    'create_ledger',
    'open_ledger',
    'get_account_balance'
] 