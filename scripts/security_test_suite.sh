#!/bin/bash

# CellFrame Security Test Suite
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

set -e

echo "üõ°Ô∏è === CellFrame Security Test Suite ==="
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
echo

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "üß™ Testing: $test_name... "
    
    if eval "$test_command" >/dev/null 2>&1; then
        if [ "$expected_result" = "pass" ]; then
            echo -e "${GREEN}‚úÖ PASSED${NC}"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            echo -e "${RED}‚ùå FAILED (expected to fail but passed)${NC}"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    else
        if [ "$expected_result" = "fail" ]; then
            echo -e "${GREEN}‚úÖ PASSED (correctly failed)${NC}"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            echo -e "${RED}‚ùå FAILED${NC}"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    fi
}

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Å security —Ñ–ª–∞–≥–∞–º–∏
echo "üì¶ Testing compilation with security flags..."
run_test "Security compilation flags" \
    "cd build && cmake -DCMAKE_C_FLAGS='-fstack-protector-strong -D_FORTIFY_SOURCE=2' .. && make -j2 >/dev/null" \
    "pass"

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ª–æ–º–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
echo "üîß Testing core functionality after security fixes..."
run_test "Core functionality" \
    "cd build && make cellframe-node >/dev/null" \
    "pass"

# –¢–µ—Å—Ç 3: –¢–µ—Å—Ç memory safety —Å AddressSanitizer (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
if command -v gcc >/dev/null && gcc --help=warnings 2>&1 | grep -q fsanitize; then
    echo "üß† Testing memory safety with AddressSanitizer..."
    run_test "AddressSanitizer compilation" \
        "cd build && cmake -DCMAKE_C_FLAGS='-fsanitize=address -g' .. && make -j2 >/dev/null" \
        "pass"
fi

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤—ã–µ header —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
echo "üìÅ Testing new security headers..."
run_test "Security monitor header" \
    "gcc -I dap-sdk/core/include -c dap-sdk/core/include/dap_security_monitor.h -o /tmp/test_header.o" \
    "pass"

run_test "Node access control header" \
    "gcc -I cellframe-sdk/modules/net/include -I dap-sdk/core/include -c cellframe-sdk/modules/net/include/dap_chain_node_access_control.h -o /tmp/test_header2.o" \
    "pass"

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Python –±–∏–Ω–¥–∏–Ω–≥–∏ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è
if [ -d "python-cellframe" ]; then
    echo "üêç Testing Python bindings compilation..."
    run_test "Python bindings" \
        "cd python-cellframe && python3 setup.py build >/dev/null 2>&1" \
        "pass"
fi

# –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω cppcheck)
if command -v cppcheck >/dev/null; then
    echo "üîç Running static analysis with cppcheck..."
    run_test "Static analysis - no critical errors" \
        "cppcheck --enable=warning --error-exitcode=1 dap-sdk/core/src/dap_security_monitor.c" \
        "pass"
fi

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —è–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
echo "üîé Testing fixed vulnerabilities..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ eval —É–±—Ä–∞–Ω –∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
run_test "Command injection fix" \
    "! grep -r 'eval.*cmd' scripts/" \
    "pass"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ memset –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ explicit_bzero –¥–ª—è –ø–∞—Ä–æ–ª–µ–π
run_test "Password clearing fix" \
    "grep -q 'explicit_bzero.*pass' cellframe-sdk/modules/wallet/dap_chain_wallet.c" \
    "pass"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã overflow –ø—Ä–æ–≤–µ—Ä–∫–∏
run_test "Integer overflow protection" \
    "grep -q 'SIZE_MAX.*overflow' dap-sdk/core/src/dap_strfuncs.c" \
    "pass"

echo
echo "üìä === Test Results ==="
echo "Total tests: $TESTS_TOTAL"
echo -e "Passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\nüéâ ${GREEN}ALL SECURITY TESTS PASSED!${NC}"
    echo "‚úÖ Security fixes are working correctly"
    echo "‚úÖ No regressions detected"
    echo "‚úÖ Project is ready for production"
    exit 0
else
    echo -e "\n‚ö†Ô∏è ${YELLOW}SOME TESTS FAILED${NC}"
    echo "‚ùå Please review failed tests before deployment"
    exit 1
fi
