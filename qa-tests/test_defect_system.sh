#!/bin/bash

# Test script for defect management system
# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤

set -euo pipefail

echo "üî¨ Testing Defect Management System"
echo "==================================="

# Load configuration
if [[ -f "redmine_config.env" ]]; then
    source redmine_config.env
    echo "‚úÖ Redmine configuration loaded"
else
    echo "‚ö†Ô∏è Redmine configuration file not found - using defaults"
fi

# Check dependencies
echo ""
echo "üîç Checking dependencies..."

if [[ ! -f "./allurectl" ]]; then
    echo "‚ùå allurectl not found"
    exit 1
else
    echo "‚úÖ allurectl found"
fi

if [[ ! -f "./defect_manager.sh" ]]; then
    echo "‚ùå defect_manager.sh not found"
    exit 1
else
    echo "‚úÖ defect_manager.sh found"
fi

if [[ ! -f "./launch_manager.sh" ]]; then
    echo "‚ùå launch_manager.sh not found"
    exit 1
else
    echo "‚úÖ launch_manager.sh found"
fi

# Test Redmine connection (if configured)
echo ""
echo "üîó Testing Redmine connection..."
if [[ -n "${REDMINE_API_KEY:-}" && -n "${REDMINE_URL:-}" ]]; then
    ./defect_manager.sh test-redmine
else
    echo "‚ö†Ô∏è Redmine not configured - skipping connection test"
    echo "   Set REDMINE_URL and REDMINE_API_KEY in redmine_config.env"
fi

# Test TestOps connection
echo ""
echo "üîó Testing TestOps connection..."
if ./allurectl launch list -e "${ALLURE_ENDPOINT}" -t "${ALLURE_TOKEN}" --project-id "${ALLURE_PROJECT_ID}" --output json > /dev/null 2>&1; then
    echo "‚úÖ TestOps connection OK"
else
    echo "‚ùå TestOps connection failed"
    exit 1
fi

# Test defect analysis
echo ""
echo "üß† Testing defect analysis..."
echo "Analyzing sample test failure..."

echo "Running defect analysis..."
SAMPLE_ANALYSIS=$(./defect_manager.sh analyze \
    "test_cellframe_node_connection" \
    "Connection timeout after 30 seconds" \
    "ConnectionError: Failed to connect to cellframe-node at localhost:8080" 2>/dev/null | tail -n +2)

echo "Sample analysis result:"
if [[ -n "${SAMPLE_ANALYSIS}" ]]; then
    echo "${SAMPLE_ANALYSIS}" | jq '.'
else
    echo "Failed to get analysis result"
fi

# List recent launches with failed tests
echo ""
echo "üìä Recent TestOps launches with failures:"
./allurectl launch list \
    -e "${ALLURE_ENDPOINT}" \
    -t "${ALLURE_TOKEN}" \
    --project-id "${ALLURE_PROJECT_ID}" \
    --format "ID,Name,Failed,Broken" \
    | head -5 | awk 'NR==1 || $3>0 || $4>0'

# List recent defects (if Redmine configured)
echo ""
echo "üêõ Recent defects from Redmine:"
if [[ -n "${REDMINE_API_KEY:-}" && -n "${REDMINE_URL:-}" ]]; then
    ./defect_manager.sh list 5 || echo "No defects found or Redmine not accessible"
else
    echo "‚ö†Ô∏è Redmine not configured - cannot list defects"
fi

# Get defect statistics (if Redmine configured)
echo ""
echo "üìà Defect statistics:"
if [[ -n "${REDMINE_API_KEY:-}" && -n "${REDMINE_URL:-}" ]]; then
    ./defect_manager.sh stats 7 || echo "Cannot get statistics - Redmine not accessible"
else
    echo "‚ö†Ô∏è Redmine not configured - cannot get statistics"
fi

# Demo: Simulate defect creation workflow
echo ""
echo "üé≠ Demo: Simulating defect creation workflow..."

# Find a launch with failed tests
FAILED_LAUNCH_ID=$(./allurectl launch list \
    -e "${ALLURE_ENDPOINT}" \
    -t "${ALLURE_TOKEN}" \
    --project-id "${ALLURE_PROJECT_ID}" \
    --output json | jq -r '.[] | select(.statistic[]?.status=="failed" and .statistic[]?.count > 0) | .id' | head -1)

if [[ -n "${FAILED_LAUNCH_ID}" && "${FAILED_LAUNCH_ID}" != "null" ]]; then
    echo "Found launch with failed tests: ${FAILED_LAUNCH_ID}"
    
    # Simulate defect processing
    echo ""
    echo "üîÑ Simulating defect processing..."
    echo "Would process defects for:"
    echo "  Launch ID: ${FAILED_LAUNCH_ID}"
    echo "  Launch Name: Demo Defect Processing"
    echo "  Node Version: demo-v1.0"
    echo "  Commit: abc123"
    echo "  Pipeline URL: https://gitlab.demlabs.net/cellframe/cellframe-node/-/pipelines/demo"
    
    if [[ -n "${REDMINE_API_KEY:-}" ]]; then
        echo ""
        echo "‚ö†Ô∏è Note: Actual defect creation is disabled in demo mode"
        echo "   To enable, run: ./defect_manager.sh process ${FAILED_LAUNCH_ID} ..."
    else
        echo ""
        echo "‚ö†Ô∏è Redmine not configured - defect creation would be skipped"
    fi
else
    echo "No launches with failed tests found for demo"
fi

echo ""
echo "üéâ Defect Management System Test Complete!"
echo ""
echo "üìã System capabilities:"
echo "‚úÖ Automatic defect analysis and categorization"
echo "‚úÖ Redmine integration for defect creation"
echo "‚úÖ TestOps integration for test result analysis"
echo "‚úÖ Configurable defect priorities and categories"
echo "‚úÖ Statistics and reporting"
echo ""
echo "üîß Configuration needed for full functionality:"
echo "1. Set REDMINE_URL in redmine_config.env"
echo "2. Set REDMINE_API_KEY in redmine_config.env"
echo "3. Set REDMINE_PROJECT_ID in redmine_config.env"
echo "4. Configure Redmine project with TestOps plugin (optional)"
echo ""
echo "üîó Useful links:"
echo "  TestOps: ${ALLURE_ENDPOINT}"
echo "  Redmine: ${REDMINE_URL:-'Not configured'}"
echo "  Documentation: https://docs.qatools.ru/integrations/issue-trackers/redmine"
