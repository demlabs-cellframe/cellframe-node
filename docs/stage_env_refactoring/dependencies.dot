// Stage Environment Dependencies Graph
// Generated: 2025-10-19
// Purpose: Visualize current bash scripts and file dependencies

digraph stage_env_dependencies {
    rankdir=LR;
    node [shape=box, style=filled];
    
    // Color legend
    subgraph cluster_legend {
        label="Legend";
        style=filled;
        color=lightgrey;
        
        bash [fillcolor=lightblue, label="Bash Script"];
        python [fillcolor=lightgreen, label="Python Script"];
        docker [fillcolor=lightyellow, label="Docker File"];
        config [fillcolor=lightpink, label="Configuration"];
        data [fillcolor=lightgray, label="Data/Artifacts"];
    }
    
    // Main Entry Point
    e2e_ctl [fillcolor=orange, label="e2e_ctl.sh\n(Main Entry)\n~350 lines", penwidth=3];
    
    // Bash Scripts
    network_manager [fillcolor=lightblue, label="network-manager.sh\n~500 lines\n(Most Complex)"];
    build_manager [fillcolor=lightblue, label="build-manager.sh\n~300 lines"];
    init_node [fillcolor=lightblue, label="init-node.sh\n~200 lines"];
    node_supervisor [fillcolor=lightblue, label="node-supervisor.sh\n~200 lines"];
    crash_handler [fillcolor=lightblue, label="crash-handler.sh\n~150 lines"];
    health_check [fillcolor=lightblue, label="health-check.sh\n~100 lines"];
    docker_entrypoint [fillcolor=lightblue, label="docker-entrypoint.sh\n~100 lines"];
    update_validator [fillcolor=lightblue, label="update-validator-addrs.sh\n~80 lines"];
    generate_all_certs [fillcolor=lightblue, label="generate-all-certs.sh\n~150 lines"];
    generate_validator_certs [fillcolor=lightblue, label="generate-validator-certs.sh\n~100 lines"];
    build_sh [fillcolor=lightblue, label="build.sh\n~250 lines"];
    build_package [fillcolor=lightblue, label="build-and-package.sh\n~100 lines"];
    check_network [fillcolor=lightblue, label="check-network.sh\n~80 lines"];
    
    // Python Tests
    run_tests [fillcolor=lightgreen, label="tests/run-tests.sh\nTest Runner"];
    basic_connectivity [fillcolor=lightgreen, label="basic-connectivity.py"];
    consensus_test [fillcolor=lightgreen, label="consensus-test.py"];
    load_test [fillcolor=lightgreen, label="load-test.py"];
    
    // Docker Files
    docker_compose [fillcolor=lightyellow, label="docker-compose.yml\nðŸ”´ QEVM refs"];
    dockerfile_builder [fillcolor=lightyellow, label="Dockerfile.builder\nðŸ”´ QEVM refs"];
    dockerfile_cellframe [fillcolor=lightyellow, label="Dockerfile.cellframe\nðŸ”´ QEVM refs"];
    dockerfile_tests [fillcolor=lightyellow, label="Dockerfile.tests"];
    
    // Configuration Files
    network_topology [fillcolor=lightpink, label="network-topology.json\nðŸ”´ qevm-stagenet"];
    qevm_plugin_cfg [fillcolor=lightpink, label="qevm-plugin.cfg\nðŸ”´ QEVM-specific"];
    qevm_stagenet_cfg [fillcolor=lightpink, label="qevm-stagenet.cfg\nðŸ”´ QEVM-specific"];
    enable_qevm [fillcolor=lightpink, label="enable-qevm-stagenet.cfg\nðŸ”´ QEVM-specific"];
    
    // Tools
    cert_generator_c [fillcolor=lightcyan, label="tools/cert-generator.c\n(C binary)"];
    
    // Data/Artifacts
    certs [fillcolor=lightgray, label="cache/certs/\n(Generated)"];
    data [fillcolor=lightgray, label="data/\n(Node data)"];
    logs [fillcolor=lightgray, label="logs/\n(Log files)"];
    monitoring [fillcolor=lightgray, label="monitoring/\n(Metrics)"];
    results [fillcolor=lightgray, label="results/\n(Test results)"];
    
    // Main Entry Point Dependencies
    e2e_ctl -> network_manager [label="start/stop"];
    e2e_ctl -> build_manager [label="build"];
    e2e_ctl -> generate_all_certs [label="certs"];
    e2e_ctl -> run_tests [label="run-tests"];
    e2e_ctl -> check_network [label="status"];
    
    // Network Manager Dependencies
    network_manager -> docker_compose [label="orchestrate"];
    network_manager -> init_node [label="initialize"];
    network_manager -> health_check [label="monitor"];
    network_manager -> network_topology [label="read config"];
    
    // Build Manager Dependencies
    build_manager -> dockerfile_builder [label="build image"];
    build_manager -> docker_compose [label="docker build"];
    
    // Certificate Generation
    generate_all_certs -> cert_generator_c [label="compile & run"];
    generate_all_certs -> generate_validator_certs [label="call"];
    generate_all_certs -> certs [label="generate"];
    
    // Node Initialization
    init_node -> docker_entrypoint [label="startup"];
    init_node -> qevm_plugin_cfg [label="read"];
    init_node -> qevm_stagenet_cfg [label="read"];
    init_node -> enable_qevm [label="read"];
    
    // Node Supervision
    node_supervisor -> crash_handler [label="on crash"];
    node_supervisor -> logs [label="write"];
    node_supervisor -> monitoring [label="write"];
    
    // Docker Compose Dependencies
    docker_compose -> dockerfile_cellframe [label="build"];
    docker_compose -> dockerfile_builder [label="build from"];
    docker_compose -> dockerfile_tests [label="build"];
    docker_compose -> docker_entrypoint [label="entrypoint"];
    docker_compose -> node_supervisor [label="start"];
    
    // Dockerfile Dependencies
    dockerfile_cellframe -> dockerfile_builder [label="FROM"];
    dockerfile_cellframe -> qevm_plugin_cfg [label="copy"];
    
    // Test Runner Dependencies
    run_tests -> basic_connectivity [label="run"];
    run_tests -> consensus_test [label="run"];
    run_tests -> load_test [label="run"];
    run_tests -> results [label="save"];
    
    // Build Alternative Entry
    build_sh -> build_manager [label="call"];
    build_sh -> build_package [label="package"];
    
    // Data Flow
    docker_entrypoint -> data [label="create"];
    health_check -> monitoring [label="write"];
    crash_handler -> monitoring [label="dump"];
    update_validator -> certs [label="update"];
    
    // QEVM Problem Indicators
    subgraph cluster_qevm_problems {
        label="ðŸ”´ QEVM-Specific Files (278 refs)";
        style=filled;
        color=red;
        fontcolor=red;
        
        qevm_plugin_cfg;
        qevm_stagenet_cfg;
        enable_qevm;
        network_topology;
        docker_compose;
        dockerfile_builder;
        dockerfile_cellframe;
    }
    
    // Migration Targets
    subgraph cluster_migration {
        label="ðŸ”„ Migration to Python";
        style=filled;
        color=blue;
        fontcolor=blue;
        
        e2e_ctl [label="â†’ stage_env.py"];
        network_manager [label="â†’ src/network/manager.py"];
        build_manager [label="â†’ src/build/builder.py"];
        generate_all_certs [label="â†’ src/certs/generator.py"];
        node_supervisor [label="â†’ src/monitoring/supervisor.py"];
        health_check [label="â†’ src/monitoring/health.py"];
        crash_handler [label="â†’ src/monitoring/crash_handler.py"];
        init_node [label="â†’ src/docker/init_node.py"];
        docker_entrypoint [label="â†’ src/docker/entrypoint.py"];
    }
}

