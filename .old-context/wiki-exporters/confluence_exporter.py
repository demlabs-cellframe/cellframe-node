#!/usr/bin/env python3
"""
Confluence Exporter
–≠–∫—Å–ø–æ—Ä—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç Confluence
"""

import json
from pathlib import Path

class ConfluenceExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è Confluence"""
    
    def export_function(self, function_data: dict) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç Confluence"""
        name = function_data['name']
        category = function_data.get('category', 'utilities')
        
        confluence_content = f"""h1. {name}

*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}
*–ú–æ–¥—É–ª—å:* {function_data.get('module', 'unknown')}

h2. –û–ø–∏—Å–∞–Ω–∏–µ
{function_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ')}

h2. –°–∏–≥–Ω–∞—Ç—É—Ä–∞
{{code:language=c}}
{function_data.get('signature', '–°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
{{code}}

h2. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

h3. C/C++
{{code:language=c}}
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {name}
int result = {name}(/* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */);
{{code}}

h3. Python
{{code:language=python}}
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {name}
result = libCellFrame.{name.replace('dap_', '').replace('_', '.')}()
{{code}}

----
_–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_
"""
        return confluence_content
    
    def export_batch(self, functions: list, output_file: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π"""
        content = []
        for func in functions:
            content.append(self.export_function(func))
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n\n'.join(content))
        
        print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Confluence: {output_file}")

if __name__ == '__main__':
    exporter = ConfluenceExporter()
    print("üìù Confluence Exporter –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
