{
  "template_name": "cellframe_plugin",
  "version": "1.0.0",
  "category": "projects",
  "description": "Шаблон для разработки плагинов Cellframe с CLI интеграцией",
  "tags": ["cellframe", "plugin", "cli", "blockchain", "python"],
  
  "structure": {
    "project_root": {
      "cellframe_plugin/": {
        "plugin/": {
          "__init__.py": "Инициализация плагина",
          "main.py": "Основная логика плагина",
          "commands.py": "CLI команды",
          "handlers.py": "Обработчики событий"
        },
        "tests/": {
          "test_plugin.py": "Тесты плагина",
          "test_commands.py": "Тесты CLI команд"
        },
        "docs/": {
          "plugin_guide.md": "Руководство по разработке плагина",
          "api_docs.md": "Документация API плагина"
        },
        "config/": {
          "plugin_config.json": "Конфигурация плагина"
        },
        "examples/": {
          "simple_plugin.py": "Простой пример плагина",
          "advanced_plugin.py": "Сложный пример с CLI"
        },
        "setup.py": "Установка плагина",
        "README.md": "Документация плагина"
      }
    }
  },

  "files": {
    "__init__.py": {
      "content": "\"\"\"\nCellframe Plugin\n\"\"\"\n\n__version__ = \"1.0.0\"\n__author__ = \"Your Name\"\n__description__ = \"Описание плагина\"\n\ndef init():\n    \"\"\"Инициализация плагина\"\"\"\n    from .main import PluginMain\n    \n    # Создание экземпляра плагина\n    plugin = PluginMain()\n    \n    # Регистрация CLI команд\n    plugin.register_commands()\n    \n    # Логирование успешной инициализации\n    from CellFrame.Common import logIt\n    logIt.notice(f\"Плагин {__description__} успешно инициализирован\")\n    \n    return 0\n\ndef deinit():\n    \"\"\"Деинициализация плагина\"\"\"\n    from CellFrame.Common import logIt\n    logIt.notice(f\"Плагин {__description__} деинициализирован\")\n    return 0",
      "description": "Инициализация плагина Cellframe"
    },
    
    "main.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\nОсновная логика плагина Cellframe\n\"\"\"\n\nimport json\nimport logging\nfrom typing import Dict, Any, Optional\nfrom .commands import PluginCommands\nfrom .handlers import EventHandlers\n\nclass PluginMain:\n    \"\"\"Основной класс плагина\"\"\"\n    \n    def __init__(self):\n        self.logger = logging.getLogger(__name__)\n        self.commands = PluginCommands()\n        self.handlers = EventHandlers()\n        self.config = self.load_config()\n    \n    def load_config(self) -> Dict[str, Any]:\n        \"\"\"Загрузка конфигурации плагина\"\"\"\n        try:\n            with open('config/plugin_config.json', 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            self.logger.warning(\"Конфигурационный файл не найден, используются значения по умолчанию\")\n            return self.get_default_config()\n    \n    def get_default_config(self) -> Dict[str, Any]:\n        \"\"\"Конфигурация по умолчанию\"\"\"\n        return {\n            \"plugin_name\": \"MyCellframePlugin\",\n            \"version\": \"1.0.0\",\n            \"enabled\": True,\n            \"log_level\": \"INFO\"\n        }\n    \n    def register_commands(self):\n        \"\"\"Регистрация CLI команд\"\"\"\n        try:\n            from CellFrame.Common import AppCliServer\n            \n            # Регистрация команд\n            self.commands.register_all(AppCliServer)\n            \n            self.logger.info(\"CLI команды успешно зарегистрированы\")\n            \n        except Exception as e:\n            self.logger.error(f\"Ошибка регистрации команд: {e}\")\n    \n    def register_handlers(self):\n        \"\"\"Регистрация обработчиков событий\"\"\"\n        try:\n            # Регистрация обработчиков событий Cellframe\n            self.handlers.register_all()\n            \n            self.logger.info(\"Обработчики событий успешно зарегистрированы\")\n            \n        except Exception as e:\n            self.logger.error(f\"Ошибка регистрации обработчиков: {e}\")\n    \n    def start(self):\n        \"\"\"Запуск плагина\"\"\"\n        if not self.config.get(\"enabled\", True):\n            self.logger.info(\"Плагин отключен в конфигурации\")\n            return\n        \n        try:\n            # Регистрация обработчиков\n            self.register_handlers()\n            \n            self.logger.info(f\"Плагин {self.config['plugin_name']} успешно запущен\")\n            \n        except Exception as e:\n            self.logger.error(f\"Ошибка запуска плагина: {e}\")\n    \n    def stop(self):\n        \"\"\"Остановка плагина\"\"\"\n        try:\n            # Очистка ресурсов\n            self.handlers.cleanup()\n            \n            self.logger.info(f\"Плагин {self.config['plugin_name']} остановлен\")\n            \n        except Exception as e:\n            self.logger.error(f\"Ошибка остановки плагина: {e}\")",
      "description": "Основная логика плагина"
    },
    
    "commands.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\nCLI команды плагина Cellframe\n\"\"\"\n\nimport json\nfrom typing import List, Any\n\nclass PluginCommands:\n    \"\"\"Класс для управления CLI командами плагина\"\"\"\n    \n    def __init__(self):\n        self.commands = {}\n    \n    def register_all(self, cli_server):\n        \"\"\"Регистрация всех команд\"\"\"\n        # Регистрация базовых команд\n        self.register_command(cli_server, \"plugin_info\", self.cmd_plugin_info, \n                             \"Информация о плагине\", \"Показывает информацию о плагине\")\n        \n        self.register_command(cli_server, \"plugin_config\", self.cmd_plugin_config, \n                             \"Конфигурация плагина\", \"Показывает конфигурацию плагина\")\n        \n        self.register_command(cli_server, \"plugin_test\", self.cmd_plugin_test, \n                             \"Тест плагина\", \"Выполняет тестовую операцию плагина\")\n    \n    def register_command(self, cli_server, name: str, func, title: str, description: str):\n        \"\"\"Регистрация отдельной команды\"\"\"\n        try:\n            cli_server.cmdItemCreate(name, func, title, description)\n            self.commands[name] = {\n                \"function\": func,\n                \"title\": title,\n                \"description\": description\n            }\n        except Exception as e:\n            print(f\"Ошибка регистрации команды {name}: {e}\")\n    \n    def cmd_plugin_info(self, argv: List[str], index_str_reply: int) -> None:\n        \"\"\"Команда: информация о плагине\"\"\"\n        try:\n            from CellFrame.Common import AppCliServer\n            \n            info = {\n                \"plugin_name\": \"MyCellframePlugin\",\n                \"version\": \"1.0.0\",\n                \"description\": \"Пример плагина для Cellframe\",\n                \"author\": \"Your Name\",\n                \"status\": \"active\"\n            }\n            \n            reply = \"Информация о плагине:\\n\"\n            for key, value in info.items():\n                reply += f\"  {key}: {value}\\n\"\n            \n            AppCliServer.setReplyText(reply, index_str_reply)\n            \n        except Exception as e:\n            AppCliServer.setReplyText(f\"Ошибка: {e}\", index_str_reply)\n    \n    def cmd_plugin_config(self, argv: List[str], index_str_reply: int) -> None:\n        \"\"\"Команда: конфигурация плагина\"\"\"\n        try:\n            from CellFrame.Common import AppCliServer\n            \n            # Загрузка конфигурации\n            with open('config/plugin_config.json', 'r') as f:\n                config = json.load(f)\n            \n            reply = \"Конфигурация плагина:\\n\"\n            reply += json.dumps(config, indent=2, ensure_ascii=False)\n            \n            AppCliServer.setReplyText(reply, index_str_reply)\n            \n        except Exception as e:\n            AppCliServer.setReplyText(f\"Ошибка загрузки конфигурации: {e}\", index_str_reply)\n    \n    def cmd_plugin_test(self, argv: List[str], index_str_reply: int) -> None:\n        \"\"\"Команда: тест плагина\"\"\"\n        try:\n            from CellFrame.Common import AppCliServer\n            \n            # Выполнение тестовой операции\n            test_result = self.perform_test_operation(argv)\n            \n            reply = f\"Тест плагина выполнен успешно:\\n{test_result}\"\n            \n            AppCliServer.setReplyText(reply, index_str_reply)\n            \n        except Exception as e:\n            AppCliServer.setReplyText(f\"Ошибка выполнения теста: {e}\", index_str_reply)\n    \n    def perform_test_operation(self, argv: List[str]) -> str:\n        \"\"\"Выполнение тестовой операции\"\"\"\n        # Здесь можно добавить любую тестовую логику\n        return f\"Тестовая операция выполнена с параметрами: {argv}\"",
      "description": "CLI команды плагина"
    },
    
    "setup.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\nУстановка плагина Cellframe\n\"\"\"\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"cellframe-plugin-example\",\n    version=\"1.0.0\",\n    description=\"Пример плагина для Cellframe\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"cellframe-sdk>=1.0.0\",\n    ],\n    python_requires=\">=3.8\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n)",
      "description": "Установка плагина"
    }
  },

  "plugin_patterns": {
    "initialization": "Функция init() для инициализации плагина",
    "deinitialization": "Функция deinit() для очистки ресурсов",
    "cli_integration": "Регистрация команд через AppCliServer",
    "event_handling": "Обработчики событий Cellframe",
    "configuration": "JSON-based конфигурация плагина"
  },

  "best_practices": [
    "Всегда возвращайте 0 при успешной инициализации",
    "Используйте логирование через logIt для отладки",
    "Обрабатывайте исключения в CLI командах",
    "Структурируйте код плагина по модулям",
    "Документируйте все публичные API",
    "Тестируйте плагин перед развертыванием"
  ],

  "cli_integration": {
    "command_registration": "Использование AppCliServer.cmdItemCreate",
    "reply_format": "Использование AppCliServer.setReplyText",
    "argument_handling": "Обработка argv в командах",
    "error_handling": "Возврат понятных сообщений об ошибках"
  },

  "event_handling": {
    "blockchain_events": "Обработка событий блокчейна",
    "network_events": "Обработка сетевых событий",
    "transaction_events": "Обработка событий транзакций",
    "custom_events": "Создание собственных событий"
  },

  "testing": {
    "unit_tests": "Тестирование отдельных компонентов",
    "integration_tests": "Тестирование с Cellframe SDK",
    "cli_tests": "Тестирование CLI команд",
    "mock_testing": "Использование mock объектов"
  },

  "deployment": {
    "installation": "Установка через pip или setup.py",
    "configuration": "Настройка через JSON файлы",
    "activation": "Автоматическая активация при запуске",
    "monitoring": "Мониторинг работы плагина"
  }
} 