{
  "template_name": "cellframe_integration",
  "version": "1.0.0",
  "category": "projects",
  "description": "–®–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å Cellframe blockchain –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
  "tags": ["blockchain", "cellframe", "post-quantum", "integration", "python", "c"],
  
  "structure": {
    "project_root": {
      "cellframe_integration/": {
        "src/": {
          "main.py": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
          "cellframe_client.py": "–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cellframe API",
          "config.py": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
          "utils.py": "–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cellframe"
        },
        "tests/": {
          "test_integration.py": "–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
          "test_api.py": "–¢–µ—Å—Ç—ã API",
          "test_config.py": "–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        },
        "docs/": {
          "integration_guide.md": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
          "api_reference.md": "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API",
          "examples.md": "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        },
        "config/": {
          "cellframe_config.json": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cellframe",
          "network_config.json": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏"
        },
        "examples/": {
          "basic_integration.py": "–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
          "advanced_features.py": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        },
        "requirements.txt": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python",
        "README.md": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
      }
    }
  },

  "files": {
    "main.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\n–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe\n\"\"\"\n\nimport sys\nimport json\nfrom cellframe_client import CellframeClient\nfrom config import CellframeConfig\nfrom utils import setup_logging\n\ndef main():\n    \"\"\"–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\"\"\"\n    try:\n        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n        config = CellframeConfig()\n        \n        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n        client = CellframeClient(config)\n        \n        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏\n        client.connect()\n        \n        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n        print(\"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cellframe —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\")\n        \n    except Exception as e:\n        print(f\"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
      "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe"
    },
    
    "cellframe_client.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\n–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cellframe API\n\"\"\"\n\nimport json\nimport logging\nfrom typing import Dict, Any, Optional\n\nclass CellframeClient:\n    \"\"\"–ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe\"\"\"\n    \n    def __init__(self, config):\n        self.config = config\n        self.logger = logging.getLogger(__name__)\n        self.connected = False\n    \n    def connect(self) -> bool:\n        \"\"\"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Cellframe —Å–µ—Ç–∏\"\"\"\n        try:\n            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cellframe SDK\n            init_json = {\n                \"modules\": [\"Core\", \"Crypto\", \"Chain\"],\n                \"Core\": {\n                    \"config_dir\": self.config.config_dir,\n                    \"log_level\": self.config.log_level,\n                    \"application_name\": self.config.app_name\n                }\n            }\n            \n            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Cellframe API\n            # init(init_json)\n            \n            self.connected = True\n            self.logger.info(\"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Cellframe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\")\n            return True\n            \n        except Exception as e:\n            self.logger.error(f\"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}\")\n            return False\n    \n    def disconnect(self):\n        \"\"\"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ç–∏\"\"\"\n        if self.connected:\n            # deinit()\n            self.connected = False\n            self.logger.info(\"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Cellframe\")\n    \n    def get_network_info(self) -> Dict[str, Any]:\n        \"\"\"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏\"\"\"\n        if not self.connected:\n            raise ConnectionError(\"–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏\")\n        \n        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Cellframe API\n        return {\n            \"network\": \"Cellframe\",\n            \"version\": \"latest\",\n            \"status\": \"connected\"\n        }\n    \n    def __enter__(self):\n        self.connect()\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.disconnect()",
      "description": "–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cellframe API"
    },
    
    "config.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe\n\"\"\"\n\nimport os\nimport json\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass CellframeConfig:\n    \"\"\"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cellframe\"\"\"\n    \n    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n    app_name: str = \"CellframeIntegration\"\n    config_dir: str = \"/tmp/cellframe\"\n    log_level: str = \"L_INFO\"\n    \n    # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n    network_type: str = \"mainnet\"  # mainnet, testnet, devnet\n    node_address: Optional[str] = None\n    \n    # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n    crypto_algorithm: str = \"dilithium\"  # dilithium, falcon, sphincs+\n    \n    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n    max_connections: int = 10\n    timeout: int = 30\n    \n    def __post_init__(self):\n        \"\"\"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞\"\"\"\n        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n        os.makedirs(self.config_dir, exist_ok=True)\n        \n    def save_to_file(self, filename: str):\n        \"\"\"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª\"\"\"\n        config_data = {\n            \"app_name\": self.app_name,\n            \"config_dir\": self.config_dir,\n            \"log_level\": self.log_level,\n            \"network_type\": self.network_type,\n            \"node_address\": self.node_address,\n            \"crypto_algorithm\": self.crypto_algorithm,\n            \"max_connections\": self.max_connections,\n            \"timeout\": self.timeout\n        }\n        \n        with open(filename, 'w') as f:\n            json.dump(config_data, f, indent=2)\n    \n    @classmethod\n    def load_from_file(cls, filename: str) -> 'CellframeConfig':\n        \"\"\"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞\"\"\"\n        with open(filename, 'r') as f:\n            config_data = json.load(f)\n        \n        return cls(**config_data)",
      "description": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe"
    },
    
    "requirements.txt": {
      "content": "# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cellframe\n\n# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\nrequests>=2.28.0\npyyaml>=6.0\n\n# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\nloguru>=0.6.0\n\n# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\npytest>=7.0.0\npytest-asyncio>=0.21.0\n\n# –¢–∏–ø–∏–∑–∞—Ü–∏—è\nmypy>=1.0.0\ntyping-extensions>=4.0.0\n\n# –£—Ç–∏–ª–∏—Ç—ã\nclick>=8.0.0\nrich>=12.0.0\n\n# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\ncryptography>=3.4.0\n\n# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Cellframe (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)\n# cellframe-sdk>=1.0.0",
      "description": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    },
    
    "README.md": {
      "content": "# Cellframe Integration\n\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cellframe blockchain –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.\n\n## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n- Post-quantum –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è\n- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–ª–≥–æ—Ä–∏—Ç–º—ã\n- –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n- Python API\n\n## –£—Å—Ç–∞–Ω–æ–≤–∫–∞\n\n```bash\npip install -r requirements.txt\n```\n\n## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\n\n```python\nfrom cellframe_client import CellframeClient\nfrom config import CellframeConfig\n\n# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\nconfig = CellframeConfig()\n\n# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏\nwith CellframeClient(config) as client:\n    info = client.get_network_info()\n    print(f\"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏: {info}\")\n```\n\n## –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n\n- [–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏](docs/integration_guide.md)\n- [–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API](docs/api_reference.md)\n- [–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è](docs/examples.md)\n\n## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n- Python 3.8+\n- Cellframe SDK\n- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n\n## –õ–∏—Ü–µ–Ω–∑–∏—è\n\nMIT",
      "description": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
    }
  },

  "best_practices": [
    "–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (with) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
    "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Ç—å—é",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    "–õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞ testnet –ø–µ—Ä–µ–¥ mainnet",
    "–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
  ],

  "api_patterns": {
    "initialization": "JSON-based –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π",
    "connection": "Context manager pattern",
    "error_handling": "Exception-based —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
    "configuration": "Dataclass-based —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"
  },

  "security_considerations": [
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ post-quantum –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
    "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —É–∑–ª–æ–≤ —Å–µ—Ç–∏",
    "–ó–∞—â–∏—â–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏"
  ],

  "testing_strategy": [
    "Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
    "Integration —Ç–µ—Å—Ç—ã —Å mock API",
    "End-to-end —Ç–µ—Å—Ç—ã –Ω–∞ testnet",
    "Performance —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
  ],

  "deployment": {
    "docker": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏",
    "kubernetes": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏",
    "monitoring": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    "logging": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
  }
} 