#!/usr/bin/env python3
"""
Top 20 Functions Documentation Generator
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è 20 —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Cellframe
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Tuple
import re

class Top20FunctionsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-20 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self, api_inventory_file: str):
        self.api_inventory_file = api_inventory_file
        self.api_data = None
        self.top_functions = []
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        self.priority_patterns = {
            'critical': {
                'patterns': [
                    r'^dap_chain_ledger_.*',
                    r'^dap_chain_create.*',
                    r'^dap_chain_delete.*',
                    r'^dap_enc_key_.*',
                    r'^dap_sign_.*',
                    r'^PyInit_.*',
                    r'^dap_chain_datum_tx_.*'
                ],
                'weight': 100
            },
            'high': {
                'patterns': [
                    r'^dap_chain_.*',
                    r'^dap_crypto_.*',
                    r'^dap_hash_.*',
                    r'^DapGlobalDB.*'
                ],
                'weight': 80
            },
            'medium': {
                'patterns': [
                    r'^dap_.*',
                    r'^Py.*'
                ],
                'weight': 60
            }
        }
        
        # –®–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        self.doc_template = """# {function_name}

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

## –°–∏–≥–Ω–∞—Ç—É—Ä–∞
```c
{signature}
```

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
{parameters_table}

## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- **–¢–∏–ø:** `{return_type}`
- **–û–ø–∏—Å–∞–Ω–∏–µ:** {return_description}
{return_values}

## –ö–æ–¥—ã –æ—à–∏–±–æ–∫
{error_codes}

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### C/C++
```c
{c_example}
```

### Python
```python
{python_example}
```

## –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
{related_functions}

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
{notes}

## –°–º. —Ç–∞–∫–∂–µ
{see_also}
"""

    def load_api_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ API –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.api_inventory_file, 'r', encoding='utf-8') as f:
                self.api_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –¥–∞–Ω–Ω—ã—Ö: {self.api_data['metadata']['total_functions']} —Ñ—É–Ω–∫—Ü–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        return True

    def calculate_function_priority(self, function_name: str, module_name: str) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        priority_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for priority_level, config in self.priority_patterns.items():
            for pattern in config['patterns']:
                if re.match(pattern, function_name):
                    priority_score = max(priority_score, config['weight'])
                    break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        if 'include' in module_name:
            priority_score += 20  # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–∞–∂–Ω–µ–µ
        
        if function_name.startswith('dap_chain_ledger'):
            priority_score += 30  # Ledger —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã
            
        if 'python' in module_name.lower():
            priority_score += 15  # Python API –≤–∞–∂–µ–Ω
            
        return priority_score

    def select_top_functions(self) -> List[Dict]:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        all_functions = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        for module_name, module_data in self.api_data['modules'].items():
            for function in module_data['functions']:
                priority = self.calculate_function_priority(function['name'], module_name)
                
                function_info = {
                    'name': function['name'],
                    'signature': function['signature'],
                    'return_type': function['return_type'],
                    'parameters': function['parameters'],
                    'module': module_name,
                    'file_path': function['file_path'],
                    'comments': function['comments'],
                    'priority': priority
                }
                all_functions.append(function_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-20
        all_functions.sort(key=lambda x: x['priority'], reverse=True)
        self.top_functions = all_functions[:20]
        
        print("üéØ –¢–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:")
        for i, func in enumerate(self.top_functions, 1):
            print(f"  {i:2d}. {func['name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {func['priority']})")
        
        return self.top_functions

    def generate_function_description(self, function_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        name = function_info['name']
        comments = function_info.get('comments', [])
        
        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        descriptions = {
            r'.*_create.*': '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö',
            r'.*_delete.*': '–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã',
            r'.*_init.*': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º—É',
            r'.*_add.*': '–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
            r'.*_remove.*': '–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
            r'.*_get.*': '–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É',
            r'.*_set.*': '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
            r'.*_find.*': '–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é',
            r'.*_save.*': '–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
            r'.*_load.*': '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
            r'.*_sign.*': '–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ',
            r'.*_verify.*': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –ø–æ–¥–ø–∏—Å—å',
            r'.*_hash.*': '–í—ã—á–∏—Å–ª—è–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ö–µ—à',
            r'.*_balance.*': '–†–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞',
            r'.*ledger.*': '–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º',
            r'PyInit.*': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python –º–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
        }
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        description = f"–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö Cellframe API"
        for pattern, desc in descriptions.items():
            if re.match(pattern, name, re.IGNORECASE):
                description = desc
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if comments:
            comment_text = ' '.join(comments).replace('//', '').replace('/*', '').replace('*/', '').strip()
            if comment_text and len(comment_text) > 10:
                description += f". {comment_text}"
        
        return description

    def generate_parameters_table(self, parameters: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not parameters:
            return "–§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        
        table = "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ | –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π |\n"
        table += "|----------|-----|----------|--------------|\\n"
        
        for param in parameters:
            name = param.get('name', 'unknown')
            param_type = param.get('type', 'unknown')
            description = param.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞')
            required = "–î–∞" if not param_type.endswith('*') else "–î–∞"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            if not description or description == '':
                if 'ledger' in name.lower():
                    description = '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç ledger'
                elif 'tx' in name.lower():
                    description = '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'
                elif 'hash' in name.lower():
                    description = '–•–µ—à –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                elif 'addr' in name.lower():
                    description = '–ê–¥—Ä–µ—Å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ'
                elif 'key' in name.lower():
                    description = '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á'
                elif 'size' in name.lower():
                    description = '–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö'
                else:
                    description = f'–ü–∞—Ä–∞–º–µ—Ç—Ä {name}'
            
            table += f"| {name} | `{param_type}` | {description} | {required} |\\n"
        
        return table

    def generate_c_example(self, function_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ C"""
        name = function_info['name']
        return_type = function_info['return_type']
        parameters = function_info['parameters']
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        example = f"""#include "cellframe_api.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    {return_type} result = {name}("""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        param_examples = []
        for param in parameters:
            param_name = param.get('name', 'param')
            if 'ledger' in param_name.lower():
                param_examples.append('ledger')
            elif 'tx' in param_name.lower():
                param_examples.append('transaction')
            elif 'hash' in param_name.lower():
                param_examples.append('&hash')
            else:
                param_examples.append('NULL')
        
        example += ', '.join(param_examples)
        example += """);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result != 0) {
        printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: %d\\n", result);
        return -1;
    }
    
    printf("–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\n");
    return 0;
}"""
        
        return example

    def generate_python_example(self, function_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ Python"""
        name = function_info['name']
        
        if name.startswith('PyInit'):
            return f"""import libCellFrame

# –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
# {name} –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ

try:
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥—É–ª—è
    result = libCellFrame.some_function()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞: {{e}}")"""
        
        return f"""import libCellFrame

def example_{name.lower()}():
    \"\"\"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {name}\"\"\"
    try:
        # TODO: –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = libCellFrame.{name.replace('dap_', '').replace('_', '.')}()
        
        if result:
            print("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return result
        else:
            print("–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            return None
            
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    example_{name.lower()}()"""

    def generate_documentation_file(self, function_info: Dict, output_dir: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        name = function_info['name']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        description = self.generate_function_description(function_info)
        parameters_table = self.generate_parameters_table(function_info['parameters'])
        c_example = self.generate_c_example(function_info)
        python_example = self.generate_python_example(function_info)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        doc_content = self.doc_template.format(
            function_name=name,
            description=description,
            signature=function_info['signature'],
            parameters_table=parameters_table,
            return_type=function_info['return_type'],
            return_description="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
            return_values="- `0` - –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\\n- `!0` - –ö–æ–¥ –æ—à–∏–±–∫–∏",
            error_codes="| –ö–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ |\\n|-----|----------|\\n| 0 | –£—Å–ø–µ—Ö |\\n| -1 | –û–±—â–∞—è –æ—à–∏–±–∫–∞ |",
            c_example=c_example,
            python_example=python_example,
            related_functions="- TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            notes="- TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è\\n- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            see_also="- [Cellframe API Reference](../api-reference.md)\\n- [Getting Started Guide](../getting-started.md)"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_file = Path(output_dir) / f"{name}.md"
        output_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(doc_content)
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {output_file}")

    def generate_index_file(self, output_dir: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        index_content = """# Cellframe API - –¢–æ–ø-20 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è 20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Cellframe API, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

## –§—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

### Ledger API
"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            'Ledger API': [],
            'Chain API': [],
            'Crypto API': [],
            'Python API': [],
            'Other API': []
        }
        
        for func in self.top_functions:
            name = func['name']
            if 'ledger' in name.lower():
                categories['Ledger API'].append(func)
            elif 'chain' in name.lower() and 'ledger' not in name.lower():
                categories['Chain API'].append(func)
            elif any(x in name.lower() for x in ['crypt', 'sign', 'hash', 'key']):
                categories['Crypto API'].append(func)
            elif name.startswith('Py') or 'python' in func['module'].lower():
                categories['Python API'].append(func)
            else:
                categories['Other API'].append(func)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, functions in categories.items():
            if functions:
                index_content += f"\\n### {category}\\n\\n"
                for func in functions:
                    index_content += f"- [{func['name']}]({func['name']}.md) - {self.generate_function_description(func)[:100]}...\\n"
        
        index_content += """

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:** 20
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –º–æ–¥—É–ª–µ–π:** –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
- **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞:** C/C++ –∏ Python –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
- **–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:** –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ò–∑—É—á–∏—Ç–µ [Getting Started Guide](../getting-started.md)
2. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [Architecture Overview](../architecture/overview.md)  
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ [Tutorial Examples](../tutorials/)

## –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
        index_file = Path(output_dir) / "README.md"
        with open(index_file, 'w', encoding='utf-8') as f:
            f.write(index_content)
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª: {index_file}")

    def generate_all_documentation(self, output_dir: str = ".context/docs/api-reference/top20"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏–π"""
        if not self.load_api_data():
            return False
        
        print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏
        self.select_top_functions()
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        for i, function_info in enumerate(self.top_functions, 1):
            print(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/20: {function_info['name']}")
            self.generate_documentation_file(function_info, output_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
        self.generate_index_file(output_dir)
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ {output_dir}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.top_functions) + 1}")
        
        return True

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Top 20 Functions Documentation Generator')
    parser.add_argument('--api-inventory', 
                       default='.context/analysis/cellframe_api_inventory.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API')
    parser.add_argument('--output-dir', 
                       default='.context/docs/api-reference/top20',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.api_inventory):
        print(f"‚ùå –§–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.api_inventory}")
        return 1
    
    generator = Top20FunctionsGenerator(args.api_inventory)
    success = generator.generate_all_documentation(args.output_dir)
    
    return 0 if success else 1

if __name__ == '__main__':
    exit(main()) 