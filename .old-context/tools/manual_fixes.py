#!/usr/bin/env python3
"""
Manual Fixes for Python Cellframe
–†—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º –≤ Python Cellframe
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def backup_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_dir = Path(".context/backups")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"{file_path.name}_manual_{timestamp}.backup"
    backup_path = backup_dir / backup_name
    
    shutil.copy2(file_path, backup_path)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def fix_memory_allocation_checks():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    # –§–∞–π–ª wrapping_dap_mempool.c - —Å—Ç—Ä–æ–∫–∞ 296
    file_path = Path("python-cellframe/modules/cellframe-sdk/mempool/src/wrapping_dap_mempool.c")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file(file_path)
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É 296 - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ DAP_NEW_Z_COUNT
    target_line = 295  # 0-based index –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 296
    if target_line < len(lines):
        line = lines[target_line]
        if "DAP_NEW_Z_COUNT" in line and "res =" in line:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É NULL –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            indent = len(line) - len(line.lstrip())
            indent_str = ' ' * indent
            
            null_check = f"{indent_str}if (!res) {{\n"
            null_check += f"{indent_str}    PyErr_SetString(PyExc_MemoryError, \"Memory allocation error\");\n"
            null_check += f"{indent_str}    return NULL;\n"
            null_check += f"{indent_str}}}\n"
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            lines.insert(target_line + 1, null_check)
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ NULL –¥–ª—è res –≤ —Å—Ç—Ä–æ–∫–µ {target_line + 1}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É 360 - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    target_line_2 = 359 + 4  # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ + 0-based index
    if target_line_2 < len(lines):
        line = lines[target_line_2]
        if "DAP_NEW_Z_COUNT" in line and "res =" in line:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É NULL
            indent = len(line) - len(line.lstrip())
            indent_str = ' ' * indent
            
            null_check = f"{indent_str}if (!res) {{\n"
            null_check += f"{indent_str}    PyErr_SetString(PyExc_MemoryError, \"Memory allocation error\");\n"
            null_check += f"{indent_str}    return NULL;\n"
            null_check += f"{indent_str}}}\n"
            
            lines.insert(target_line_2 + 1, null_check)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ NULL –¥–ª—è res –≤ —Å—Ç—Ä–æ–∫–µ {target_line_2 + 1}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def fix_thread_safety_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã thread safety - –∑–∞–º–µ–Ω—è–µ—Ç static –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º thread safety...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ static –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    main_file = Path("python-cellframe/CellFrame/python-cellframe.c")
    
    if not main_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_file}")
        return False
    
    backup_file(main_file)
    
    try:
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ó–∞–º–µ–Ω—è–µ–º static bool –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ thread-local
    static_vars = [
        "s_init_crypto", "s_init_chain", "s_init_app_cli", "s_init_stream",
        "s_init_stream_ctl", "s_init_http_folder", "s_init_http", "s_init_http_enc",
        "s_io_core", "s_init_mempool", "s_init_wallet", "s_init_cs_dag",
        "s_init_cs_dag_poa", "s_init_cs_dag_pos", "s_init_chain_net_srv", "s_init_ks"
    ]
    
    # –ó–∞–º–µ–Ω—è–µ–º static –Ω–∞ __thread –¥–ª—è thread-local storage
    for var in static_vars:
        old_pattern = f"static bool {var} = false;"
        new_pattern = f"__thread bool {var} = false;"
        
        if old_pattern in content:
            content = content.replace(old_pattern, new_pattern)
            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ static –Ω–∞ __thread –¥–ª—è {var}")
    
    # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º static bool submodules_deint
    old_pattern = "static bool submodules_deint;"
    new_pattern = "__thread bool submodules_deint;"
    if old_pattern in content:
        content = content.replace(old_pattern, new_pattern)
        print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ static –Ω–∞ __thread –¥–ª—è submodules_deint")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –§–∞–π–ª {main_file} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def create_simple_test():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    test_content = '''#!/usr/bin/env python3
"""
Simple test for Python Cellframe fixes
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Python Cellframe
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Python Cellframe
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'python-cellframe'))

def test_basic_import():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
        
        # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å —Å–æ–±—Ä–∞–Ω
        # import CellFrame
        # print("‚úÖ CellFrame –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")
        print("‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏: cd python-cellframe && python3 setup.py build")
        
        return True
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å –Ω–µ —Å–æ–±—Ä–∞–Ω: {e}")
        return True  # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ —Å–æ–±—Ä–∞–Ω
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_memory_safety():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_check = [
        "python-cellframe/modules/dap-sdk/net/server/http/src/wrapping_dap_http_header.c",
        "python-cellframe/modules/cellframe-sdk/mempool/src/wrapping_dap_mempool.c", 
        "python-cellframe/modules/cellframe-sdk/chain/src/wrapping_dap_chain_ledger.c"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ return NULL –ø–æ—Å–ª–µ PyErr_SetString
                pyerr_count = content.count('PyErr_SetString')
                return_null_count = content.count('return NULL')
                
                print(f"üìÅ {os.path.basename(file_path)}:")
                print(f"   PyErr_SetString: {pyerr_count}")
                print(f"   return NULL: {return_null_count}")
                
                if pyerr_count <= return_null_count:
                    print(f"   ‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                else:
                    print(f"   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Python Cellframe –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç", test_basic_import),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏", test_memory_safety),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\\nüî¨ –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == '__main__':
    exit(main())
'''
    
    test_file = Path(".context/tools/test_fixes.py")
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç: {test_file}")
    return test_file

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("üîß –†—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Python Cellframe")
    print("=" * 40)
    
    fixes_applied = 0
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
    print("\\n1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    if fix_memory_allocation_checks():
        fixes_applied += 1
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã thread safety
    print("\\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º thread safety...")
    if fix_thread_safety_issues():
        fixes_applied += 1
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
    print("\\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
    test_file = create_simple_test()
    if test_file:
        fixes_applied += 1
    
    print(f"\\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print(f"   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {fixes_applied}")
    print(f"   üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤: .context/backups/")
    
    if fixes_applied > 0:
        print("\\n‚úÖ –†—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: python3 .context/tools/test_fixes.py")
        print("   2. –°–æ–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å: cd python-cellframe && python3 setup.py build")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    return 0

if __name__ == '__main__':
    exit(main()) 