#!/usr/bin/env python3
"""
Simple Python Cellframe Analyzer
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ Python Cellframe
"""

import os
import re
import json
from pathlib import Path
from datetime import datetime

def analyze_file(file_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            lines = content.split('\n')
    except Exception as e:
        return {"error": str(e), "issues": []}
    
    # –ê–Ω–∞–ª–∏–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    malloc_count = len(re.findall(r'malloc\s*\(|calloc\s*\(|realloc\s*\(', content))
    free_count = len(re.findall(r'free\s*\(', content))
    
    if malloc_count > free_count:
        issues.append({
            "type": "memory_leak",
            "severity": "HIGH",
            "description": f"Potential memory leak: {malloc_count} malloc vs {free_count} free",
            "suggestion": "Add corresponding free() calls"
        })
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    pyerr_count = len(re.findall(r'PyErr_SetString', content))
    return_null_count = len(re.findall(r'return\s+NULL', content))
    
    if pyerr_count > return_null_count:
        issues.append({
            "type": "error_handling",
            "severity": "HIGH", 
            "description": f"Missing return NULL after PyErr_SetString: {pyerr_count} vs {return_null_count}",
            "suggestion": "Add 'return NULL;' after setting Python errors"
        })
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (thread safety)
    static_vars = len(re.findall(r'static\s+(?!const)\w+.*=', content))
    if static_vars > 0:
        issues.append({
            "type": "thread_safety",
            "severity": "MEDIUM",
            "description": f"Found {static_vars} non-const static variables",
            "suggestion": "Consider thread-local storage or synchronization"
        })
    
    # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
    functions = re.findall(r'^\w+.*\(.*\)\s*{', content, re.MULTILINE)
    if len(functions) > 20:
        issues.append({
            "type": "complexity",
            "severity": "MEDIUM",
            "description": f"High function count: {len(functions)} functions in one file",
            "suggestion": "Consider splitting into multiple files"
        })
    
    return {
        "file": str(file_path),
        "lines": len(lines),
        "functions": len(functions),
        "issues": issues,
        "malloc_calls": malloc_count,
        "free_calls": free_count,
        "static_vars": static_vars
    }

def analyze_project():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç Python Cellframe"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ Python Cellframe...")
    
    base_path = Path("python-cellframe")
    if not base_path.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    results = {
        "timestamp": datetime.now().isoformat(),
        "project_stats": {
            "total_files": 0,
            "total_lines": 0,
            "c_files": 0,
            "python_files": 0,
            "total_issues": 0
        },
        "files": [],
        "summary": {
            "critical_issues": 0,
            "high_issues": 0,
            "medium_issues": 0,
            "recommendations": []
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk(base_path):
        for file in files:
            file_path = Path(root) / file
            results["project_stats"]["total_files"] += 1
            
            if file.endswith('.c') or file.endswith('.h'):
                results["project_stats"]["c_files"] += 1
                analysis = analyze_file(file_path)
                results["files"].append(analysis)
                results["project_stats"]["total_lines"] += analysis.get("lines", 0)
                results["project_stats"]["total_issues"] += len(analysis.get("issues", []))
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
                for issue in analysis.get("issues", []):
                    severity = issue.get("severity", "LOW").lower()
                    if severity == "critical":
                        results["summary"]["critical_issues"] += 1
                    elif severity == "high":
                        results["summary"]["high_issues"] += 1
                    elif severity == "medium":
                        results["summary"]["medium_issues"] += 1
            
            elif file.endswith('.py'):
                results["project_stats"]["python_files"] += 1
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if results["summary"]["critical_issues"] > 0:
        results["summary"]["recommendations"].append(
            f"–ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–∏—Ç—å {results['summary']['critical_issues']} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"
        )
    
    if results["summary"]["high_issues"] > 0:
        results["summary"]["recommendations"].append(
            f"–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø—Ä–∞–≤–∏—Ç—å {results['summary']['high_issues']} –ø—Ä–æ–±–ª–µ–º –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏"
        )
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    memory_issues = sum(1 for f in results["files"] for i in f.get("issues", []) if i.get("type") == "memory_leak")
    if memory_issues > 0:
        results["summary"]["recommendations"].append(
            f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {memory_issues} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏"
        )
    
    error_handling_issues = sum(1 for f in results["files"] for i in f.get("issues", []) if i.get("type") == "error_handling")
    if error_handling_issues > 0:
        results["summary"]["recommendations"].append(
            f"–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ {error_handling_issues} –º–µ—Å—Ç–∞—Ö"
        )
    
    thread_safety_issues = sum(1 for f in results["files"] for i in f.get("issues", []) if i.get("type") == "thread_safety")
    if thread_safety_issues > 0:
        results["summary"]["recommendations"].append(
            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å thread safety –≤ {thread_safety_issues} –º–µ—Å—Ç–∞—Ö"
        )
    
    return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    results = analyze_project()
    
    if not results:
        return 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ Python Cellframe:")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['project_stats']['total_files']}")
    print(f"   üìù C/C++ —Ñ–∞–π–ª–æ–≤: {results['project_stats']['c_files']}")
    print(f"   üêç Python —Ñ–∞–π–ª–æ–≤: {results['project_stats']['python_files']}")
    print(f"   üìÑ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {results['project_stats']['total_lines']:,}")
    print(f"   ‚ö†Ô∏è  –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {results['project_stats']['total_issues']}")
    print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {results['summary']['critical_issues']}")
    print(f"   üü° –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö: {results['summary']['high_issues']}")
    print(f"   üü† –°—Ä–µ–¥–Ω–∏—Ö: {results['summary']['medium_issues']}")
    
    # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    problematic_files = sorted(
        [f for f in results["files"] if f.get("issues")],
        key=lambda x: len(x.get("issues", [])),
        reverse=True
    )[:5]
    
    if problematic_files:
        print("\nüî• –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for i, file_info in enumerate(problematic_files, 1):
            print(f"   {i}. {Path(file_info['file']).name} - {len(file_info['issues'])} –ø—Ä–æ–±–ª–µ–º")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if results["summary"]["recommendations"]:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(results["summary"]["recommendations"], 1):
            print(f"   {i}. {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    output_dir = Path(".context/analysis")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = output_dir / "python_cellframe_analysis.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    refactoring_plan = {
        "phase_1_critical": {
            "title": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "duration": "1-2 –Ω–µ–¥–µ–ª–∏",
            "tasks": [
                "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏",
                "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ return NULL –ø–æ—Å–ª–µ PyErr_SetString",
                "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            ]
        },
        "phase_2_architecture": {
            "title": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è", 
            "duration": "2-3 –Ω–µ–¥–µ–ª–∏",
            "tasks": [
                "–£–ª—É—á—à–∏—Ç—å thread safety",
                "–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–£–ª—É—á—à–µ–Ω–∏–µ API –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"
            ]
        },
        "phase_3_quality": {
            "title": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
            "duration": "1-2 –Ω–µ–¥–µ–ª–∏",
            "tasks": [
                "–î–æ–±–∞–≤–∏—Ç—å unit —Ç–µ—Å—Ç—ã",
                "–£–ª—É—á—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
                "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "Code review –ø—Ä–æ—Ü–µ—Å—Å"
            ]
        }
    }
    
    plan_file = output_dir / "refactoring_plan.json"
    with open(plan_file, 'w', encoding='utf-8') as f:
        json.dump(refactoring_plan, f, ensure_ascii=False, indent=2)
    
    print(f"üìã –ü–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plan_file}")
    
    return 0

if __name__ == '__main__':
    exit(main()) 