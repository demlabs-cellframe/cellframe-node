#!/usr/bin/env python3
"""
Simple test for Python Cellframe fixes
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Python Cellframe
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Python Cellframe
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'python-cellframe'))

def test_basic_import():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
        
        # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥—É–ª—å —Å–æ–±—Ä–∞–Ω
        # import CellFrame
        # print("‚úÖ CellFrame –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –º–æ–¥—É–ª—å")
        print("‚ÑπÔ∏è  –ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∫–∏: cd python-cellframe && python3 setup.py build")
        
        return True
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å –Ω–µ —Å–æ–±—Ä–∞–Ω: {e}")
        return True  # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ —Å–æ–±—Ä–∞–Ω
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_memory_safety():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_check = [
        "python-cellframe/modules/dap-sdk/net/server/http/src/wrapping_dap_http_header.c",
        "python-cellframe/modules/cellframe-sdk/mempool/src/wrapping_dap_mempool.c", 
        "python-cellframe/modules/cellframe-sdk/chain/src/wrapping_dap_chain_ledger.c"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ return NULL –ø–æ—Å–ª–µ PyErr_SetString
                pyerr_count = content.count('PyErr_SetString')
                return_null_count = content.count('return NULL')
                
                print(f"üìÅ {os.path.basename(file_path)}:")
                print(f"   PyErr_SetString: {pyerr_count}")
                print(f"   return NULL: {return_null_count}")
                
                if pyerr_count <= return_null_count:
                    print(f"   ‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                else:
                    print(f"   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Python Cellframe –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç", test_basic_import),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏", test_memory_safety),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüî¨ –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == '__main__':
    exit(main())
