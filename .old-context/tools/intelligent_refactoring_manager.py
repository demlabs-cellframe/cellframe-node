#!/usr/bin/env python3
"""
Intelligent Refactoring Manager for Python Cellframe
–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ Python Cellframe

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —ç—Ç–∞–ø–∞–º–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:
- –§–∞–∑–∞ 1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –§–∞–∑–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤
- –§–∞–∑–∞ 3: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π
- –§–∞–∑–∞ 4: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
- –§–∞–∑–∞ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional

class IntelligentRefactoringManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.base_path = Path(".")
        self.analysis_dir = Path(".context/analysis")
        self.tools_dir = Path(".context/tools")
        self.tasks_file = Path(".context/tasks/active.json")
        
        self.phases = {
            "phase_1": {
                "name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "tools": ["intelligent_module_analyzer.py"],
                "status": "pending",
                "completion": 0
            },
            "phase_2": {
                "name": "–°–æ–∑–¥–∞–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤",
                "tools": ["unit_test_generator.py"],
                "status": "pending", 
                "completion": 0
            },
            "phase_3": {
                "name": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π",
                "tools": ["improvement_analyzer.py"],
                "status": "pending",
                "completion": 0
            },
            "phase_4": {
                "name": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π",
                "tools": ["enhancement_implementer.py"],
                "status": "pending",
                "completion": 0
            },
            "phase_5": {
                "name": "–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "tools": ["validation_tester.py"],
                "status": "pending",
                "completion": 0
            }
        }
        
        self.current_phase = "phase_1"
        self.overall_progress = 0
        
    def run_intelligent_refactoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üß† INTELLIGENT REFACTORING MANAGER")
        print("=" * 50)
        print("üéØ –¶–µ–ª—å: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ Python Cellframe")
        print("üìã –≠—Ç–∞–ø—ã: 5 —Ñ–∞–∑ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
        print("üîí –ü—Ä–∏–Ω—Ü–∏–ø: 100% –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É
        if not self.check_prerequisites():
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–∑—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for phase_id in self.phases.keys():
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ {phase_id.upper()}: {self.phases[phase_id]['name']}")
            print("-" * 60)
            
            success = self.run_phase(phase_id)
            
            if success:
                self.phases[phase_id]["status"] = "completed"
                self.phases[phase_id]["completion"] = 100
                print(f"‚úÖ {phase_id.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º checkpoint
                self.run_checkpoint(phase_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.update_overall_progress()
                
                # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–≤—å—é —Ñ–∞–∑—ã
                self.phase_review(phase_id)
                
            else:
                print(f"‚ùå {phase_id.upper()} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                self.handle_phase_failure(phase_id)
                return False
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        print("\nüéâ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 55)
        
        return True
    
    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ python-cellframe
        if not Path("python-cellframe").exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.analysis_dir.mkdir(parents=True, exist_ok=True)
        self.tools_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        if sys.version_info < (3, 8):
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            return False
        
        print("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return True
    
    def run_phase(self, phase_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–∞–∑—É"""
        phase = self.phases[phase_id]
        self.current_phase = phase_id
        
        print(f"üìä –§–∞–∑–∞: {phase['name']}")
        print(f"üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(phase['tools'])}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–¥–∞—á–∞—Ö
        self.update_task_status(phase_id, "active")
        
        success = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ–∞–∑—ã
        for tool in phase['tools']:
            tool_path = self.tools_dir / tool
            
            if tool_path.exists():
                print(f"\nüîß –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool}")
                result = self.run_tool(tool_path)
                
                if not result:
                    print(f"‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                    success = False
                    break
                else:
                    print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É...")
                self.create_tool_stub(tool)
        
        return success
    
    def run_tool(self, tool_path: Path) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            result = subprocess.run(
                [sys.executable, str(tool_path)],
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                print(f"   üìã –í—ã–≤–æ–¥: {result.stdout[:200]}..." if len(result.stdout) > 200 else f"   üìã –í—ã–≤–æ–¥: {result.stdout}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("   ‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
            return False
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def create_tool_stub(self, tool_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_path = self.tools_dir / tool_name
        
        stub_content = f'''#!/usr/bin/env python3
"""
Stub for {tool_name}
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name}
"""

import json
from pathlib import Path
from datetime import datetime

def main():
    print("üîß {tool_name} - –ó–∞–≥–ª—É—à–∫–∞")
    print("=" * 40)
    print("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = {{
        "timestamp": datetime.now().isoformat(),
        "tool": "{tool_name}",
        "status": "stub_executed",
        "message": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞"
    }}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    reports_dir = Path(".context/analysis")
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    report_file = reports_dir / f"{tool_name.replace('.py', '')}_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {{report_file}}")
    print("‚úÖ –ó–∞–≥–ª—É—à–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    return 0

if __name__ == '__main__':
    exit(main())
'''
        
        with open(tool_path, 'w', encoding='utf-8') as f:
            f.write(stub_content)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        tool_path.chmod(0o755)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {tool_path}")
    
    def run_checkpoint(self, phase_id: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç checkpoint –ø–æ—Å–ª–µ —Ñ–∞–∑—ã"""
        print(f"\nüîç CHECKPOINT –¥–ª—è {phase_id.upper()}")
        print("-" * 30)
        
        phase = self.phases[phase_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–∑—ã
        if phase_id == "phase_1":
            self.checkpoint_phase_1()
        elif phase_id == "phase_2":
            self.checkpoint_phase_2()
        elif phase_id == "phase_3":
            self.checkpoint_phase_3()
        elif phase_id == "phase_4":
            self.checkpoint_phase_4()
        elif phase_id == "phase_5":
            self.checkpoint_phase_5()
        
        print("‚úÖ Checkpoint –ø—Ä–æ–π–¥–µ–Ω")
    
    def checkpoint_phase_1(self):
        """Checkpoint –¥–ª—è —Ñ–∞–∑—ã 1: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        required_files = [
            "module_architecture_analysis.json",
            "dependency_graph.json", 
            "module_complexity_report.json"
        ]
        
        for file_name in required_files:
            file_path = self.analysis_dir / file_name
            if file_path.exists():
                print(f"   ‚úÖ {file_name} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ö†Ô∏è {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    def checkpoint_phase_2(self):
        """Checkpoint –¥–ª—è —Ñ–∞–∑—ã 2: Unit —Ç–µ—Å—Ç—ã"""
        test_dir = Path("python-cellframe/tests")
        
        if test_dir.exists():
            test_files = list(test_dir.rglob("test_*.py"))
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(test_files)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            required_dirs = ["core", "services", "integration", "fixtures", "utils"]
            for dir_name in required_dirs:
                if (test_dir / dir_name).exists():
                    print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    def checkpoint_phase_3(self):
        """Checkpoint –¥–ª—è —Ñ–∞–∑—ã 3: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        required_files = [
            "improvement_analysis.json",
            "missing_functions_detailed.json",
            "api_enhancement_plan.json"
        ]
        
        for file_name in required_files:
            file_path = self.analysis_dir / file_name
            if file_path.exists():
                print(f"   ‚úÖ {file_name} —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"   ‚ö†Ô∏è {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–∑–∞–≥–ª—É—à–∫–∞)")
    
    def checkpoint_phase_4(self):
        """Checkpoint –¥–ª—è —Ñ–∞–∑—ã 4: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π"""
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π...")
        print("   ‚ö†Ô∏è Checkpoint —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)")
    
    def checkpoint_phase_5(self):
        """Checkpoint –¥–ª—è —Ñ–∞–∑—ã 5: –í–∞–ª–∏–¥–∞—Ü–∏—è"""
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        print("   ‚ö†Ô∏è Checkpoint –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)")
    
    def phase_review(self, phase_id: str):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–≤—å—é —Ñ–∞–∑—ã"""
        print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–í–¨–Æ {phase_id.upper()}")
        print("-" * 35)
        
        phase = self.phases[phase_id]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∞–∑—ã
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {phase['status']}")
        print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {phase['completion']}%")
        print(f"   üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(phase['tools'])} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        quality_score = self.assess_phase_quality(phase_id)
        print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score}/10")
        
        if quality_score >= 7:
            print("   ‚úÖ –§–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ")
        else:
            print("   ‚ö†Ô∏è –§–∞–∑–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        readiness = self.assess_next_phase_readiness(phase_id)
        print(f"   üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ: {'–î–∞' if readiness else '–ù–µ—Ç'}")
    
    def assess_phase_quality(self, phase_id: str) -> int:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–∑—ã (1-10)"""
        score = 5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        reports = list(self.analysis_dir.glob("*.json"))
        if len(reports) > 0:
            score += 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ markdown –æ—Ç—á–µ—Ç–æ–≤
        md_reports = list(self.analysis_dir.glob("*.md"))
        if len(md_reports) > 0:
            score += 1
        
        # –§–∞–∑–æ—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if phase_id == "phase_2":
            test_dir = Path("python-cellframe/tests")
            if test_dir.exists():
                test_files = list(test_dir.rglob("test_*.py"))
                if len(test_files) > 5:
                    score += 2
        
        return min(score, 10)
    
    def assess_next_phase_readiness(self, phase_id: str) -> bool:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ"""
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ñ–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if self.phases[phase_id]["status"] != "completed":
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        quality = self.assess_phase_quality(phase_id)
        if quality < 6:
            return False
        
        return True
    
    def update_task_status(self, phase_id: str, status: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
        if not self.tasks_file.exists():
            return
        
        try:
            with open(self.tasks_file, 'r', encoding='utf-8') as f:
                tasks = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
            if "phase_breakdown" in tasks:
                if phase_id in tasks["phase_breakdown"]:
                    tasks["phase_breakdown"][phase_id]["status"] = status.upper()
                    tasks["phase_breakdown"][phase_id]["completion"] = 100 if status == "completed" else 50
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            tasks["completion"] = f"{self.overall_progress}%"
            tasks["last_updated"] = datetime.now().isoformat()
            
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(tasks, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {e}")
    
    def update_overall_progress(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        completed_phases = sum(1 for phase in self.phases.values() if phase["status"] == "completed")
        self.overall_progress = int((completed_phases / len(self.phases)) * 100)
        
        print(f"üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {self.overall_progress}%")
    
    def handle_phase_failure(self, phase_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á—É —Ñ–∞–∑—ã"""
        print(f"\nüö® –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–£–î–ê–ß–ò {phase_id.upper()}")
        print("-" * 40)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_log = {
            "timestamp": datetime.now().isoformat(),
            "phase": phase_id,
            "phase_name": self.phases[phase_id]["name"],
            "status": "failed",
            "tools": self.phases[phase_id]["tools"]
        }
        
        error_file = self.analysis_dir / f"error_log_{phase_id}.json"
        with open(error_file, 'w', encoding='utf-8') as f:
            json.dump(error_log, f, ensure_ascii=False, indent=2)
        
        print(f"üìù –õ–æ–≥ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {error_file}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        print("\nüîß –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print("1. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ–∞–∑—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        print("2. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("3. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
        
        self.phases[phase_id]["status"] = "failed"
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            "refactoring_info": {
                "timestamp": datetime.now().isoformat(),
                "manager_version": "1.0.0",
                "overall_progress": self.overall_progress,
                "status": "completed" if self.overall_progress == 100 else "partial"
            },
            "phases_summary": {},
            "achievements": [],
            "metrics": {
                "total_phases": len(self.phases),
                "completed_phases": sum(1 for p in self.phases.values() if p["status"] == "completed"),
                "failed_phases": sum(1 for p in self.phases.values() if p["status"] == "failed")
            }
        }
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Ñ–∞–∑–∞–º
        for phase_id, phase in self.phases.items():
            report["phases_summary"][phase_id] = {
                "name": phase["name"],
                "status": phase["status"],
                "completion": phase["completion"],
                "tools_used": phase["tools"]
            }
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if report["metrics"]["completed_phases"] >= 3:
            report["achievements"].append("–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∑—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
        if Path("python-cellframe/tests").exists():
            test_files = list(Path("python-cellframe/tests").rglob("test_*.py"))
            if len(test_files) > 0:
                report["achievements"].append(f"–°–æ–∑–¥–∞–Ω–æ {len(test_files)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        
        analysis_files = list(self.analysis_dir.glob("*.json"))
        if len(analysis_files) > 0:
            report["achievements"].append(f"–°–æ–∑–¥–∞–Ω–æ {len(analysis_files)} –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        final_report_file = self.analysis_dir / "intelligent_refactoring_final_report.json"
        with open(final_report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º markdown –æ—Ç—á–µ—Ç
        md_report = f"""# üß† –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

**–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
**–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** {self.overall_progress}%
**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' if self.overall_progress == 100 else 'üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}

## üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ñ–∞–∑–∞–º

"""
        
        for phase_id, phase in self.phases.items():
            status_emoji = "‚úÖ" if phase["status"] == "completed" else "‚ùå" if phase["status"] == "failed" else "üîÑ"
            md_report += f"### {phase_id.upper()}: {phase['name']}\n"
            md_report += f"- **–°—Ç–∞—Ç—É—Å:** {status_emoji} {phase['status']}\n"
            md_report += f"- **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {phase['completion']}%\n"
            md_report += f"- **–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:** {', '.join(phase['tools'])}\n\n"
        
        md_report += f"""## üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è

"""
        for achievement in report["achievements"]:
            md_report += f"- ‚úÖ {achievement}\n"
        
        md_report += f"""

## üìà –ú–µ—Ç—Ä–∏–∫–∏

- **–í—Å–µ–≥–æ —Ñ–∞–∑:** {report['metrics']['total_phases']}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ñ–∞–∑:** {report['metrics']['completed_phases']}
- **–ù–µ—É–¥–∞—á–Ω—ã—Ö —Ñ–∞–∑:** {report['metrics']['failed_phases']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** {(report['metrics']['completed_phases'] / report['metrics']['total_phases'] * 100):.1f}%

## üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã: {len(list(self.analysis_dir.glob('*.json')))}
- Markdown –æ—Ç—á–µ—Ç—ã: {len(list(self.analysis_dir.glob('*.md')))}
- –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {len(list(Path('python-cellframe/tests').rglob('test_*.py'))) if Path('python-cellframe/tests').exists() else 0}

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Intelligent Refactoring Manager*
"""
        
        md_report_file = self.analysis_dir / "intelligent_refactoring_final_report.md"
        with open(md_report_file, 'w', encoding='utf-8') as f:
            f.write(md_report)
        
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:")
        print(f"   üìÑ JSON: {final_report_file}")
        print(f"   üìù Markdown: {md_report_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† Intelligent Refactoring Manager for Python Cellframe")
    print("=" * 60)
    
    manager = IntelligentRefactoringManager()
    success = manager.run_intelligent_refactoring()
    
    if success:
        print("\nüéâ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == '__main__':
    exit(main()) 