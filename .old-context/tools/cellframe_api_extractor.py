#!/usr/bin/env python3
"""
Cellframe API Extractor
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ API —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ Cellframe –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import os
import re
import json
import sys
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
import argparse

@dataclass
class APIFunction:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API —Ñ—É–Ω–∫—Ü–∏–∏"""
    name: str
    signature: str
    return_type: str
    parameters: List[Dict[str, str]]
    file_path: str
    line_number: int
    comments: List[str]
    is_public: bool
    module: str

@dataclass
class APIModule:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ API"""
    name: str
    path: str
    functions: List[APIFunction]
    headers: List[str]
    description: str

class CellframeAPIExtractor:
    """–≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä API —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ Cellframe"""
    
    def __init__(self, cellframe_root: str):
        self.cellframe_root = Path(cellframe_root)
        self.api_functions = []
        self.modules = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        self.function_patterns = [
            # C —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º dap_
            r'^\s*([a-zA-Z_][a-zA-Z0-9_*\s]*)\s+(dap_[a-zA-Z0-9_]+)\s*\(',
            # –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            r'^\s*([a-zA-Z_][a-zA-Z0-9_*\s]*)\s+([a-zA-Z0-9_]+)\s*\(',
        ]
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.search_dirs = [
            'cellframe-sdk/modules',
            'cellframe-sdk/dap-sdk/core/include',
            'cellframe-sdk/dap-sdk/crypto/include',
            'cellframe-sdk/dap-sdk/io/include',
            'python-cellframe/modules',
            'python-cellframe/include'
        ]
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.file_extensions = ['.h', '.c', '.py']
        
    def extract_apis(self) -> Dict[str, APIModule]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ API —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ Cellframe...")
        
        for search_dir in self.search_dirs:
            dir_path = self.cellframe_root / search_dir
            if dir_path.exists():
                print(f"üìÅ –ê–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {search_dir}")
                self._scan_directory(dir_path, search_dir)
            else:
                print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {search_dir}")
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.api_functions)} API —Ñ—É–Ω–∫—Ü–∏–π –≤ {len(self.modules)} –º–æ–¥—É–ª—è—Ö")
        return self.modules
    
    def _scan_directory(self, directory: Path, module_name: str):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API —Ñ—É–Ω–∫—Ü–∏–π"""
        for file_path in directory.rglob('*'):
            if file_path.is_file() and file_path.suffix in self.file_extensions:
                self._analyze_file(file_path, module_name)
    
    def _analyze_file(self, file_path: Path, module_name: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
                
            functions = self._extract_functions_from_content(content, lines, file_path, module_name)
            
            if functions:
                if module_name not in self.modules:
                    self.modules[module_name] = APIModule(
                        name=module_name,
                        path=str(file_path.parent),
                        functions=[],
                        headers=[],
                        description=f"API –º–æ–¥—É–ª—å {module_name}"
                    )
                
                self.modules[module_name].functions.extend(functions)
                self.api_functions.extend(functions)
                
                if file_path.suffix == '.h':
                    self.modules[module_name].headers.append(str(file_path))
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def _extract_functions_from_content(self, content: str, lines: List[str], 
                                      file_path: Path, module_name: str) -> List[APIFunction]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        functions = []
        
        for i, line in enumerate(lines):
            for pattern in self.function_patterns:
                match = re.match(pattern, line)
                if match:
                    func_info = self._parse_function(lines, i, file_path, module_name)
                    if func_info and self._is_public_api(func_info):
                        functions.append(func_info)
                        
        return functions
    
    def _parse_function(self, lines: List[str], line_num: int, 
                       file_path: Path, module_name: str) -> Optional[APIFunction]:
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
            signature_lines = []
            current_line = line_num
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
            while current_line < len(lines):
                line = lines[current_line].strip()
                signature_lines.append(line)
                if '{' in line or ';' in line:
                    break
                current_line += 1
            
            full_signature = ' '.join(signature_lines)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
            func_match = re.search(r'([a-zA-Z_][a-zA-Z0-9_]*)\s*\(', full_signature)
            if not func_match:
                return None
                
            func_name = func_match.group(1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            return_type = self._extract_return_type(full_signature, func_name)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            parameters = self._extract_parameters(full_signature)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments = self._extract_comments(lines, line_num)
            
            return APIFunction(
                name=func_name,
                signature=full_signature.replace('\n', ' ').strip(),
                return_type=return_type,
                parameters=parameters,
                file_path=str(file_path),
                line_number=line_num + 1,
                comments=comments,
                is_public=True,
                module=module_name
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
            return None
    
    def _extract_return_type(self, signature: str, func_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        before_func = signature.split(func_name)[0].strip()
        return_type = before_func.split()[-1] if before_func.split() else 'void'
        return return_type
    
    def _extract_parameters(self, signature: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏"""
        parameters = []
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–±–æ–∫
        paren_match = re.search(r'\((.*?)\)', signature)
        if not paren_match:
            return parameters
            
        params_str = paren_match.group(1).strip()
        if not params_str or params_str == 'void':
            return parameters
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        param_parts = params_str.split(',')
        
        for param in param_parts:
            param = param.strip()
            if param:
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ - –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ç–∏–ø
                parts = param.split()
                if len(parts) >= 2:
                    param_name = parts[-1].replace('*', '').replace('&', '')
                    param_type = ' '.join(parts[:-1])
                else:
                    param_name = param
                    param_type = 'unknown'
                
                parameters.append({
                    'name': param_name,
                    'type': param_type,
                    'description': ''
                })
        
        return parameters
    
    def _extract_comments(self, lines: List[str], line_num: int) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π"""
        comments = []
        
        # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—ã—à–µ —Ñ—É–Ω–∫—Ü–∏–∏
        i = line_num - 1
        while i >= 0 and i >= line_num - 10:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫ –≤—ã—à–µ
            line = lines[i].strip()
            if line.startswith('//') or line.startswith('/*') or line.startswith('*'):
                comments.insert(0, line)
            elif line and not line.startswith('#'):
                break
            i -= 1
        
        return comments
    
    def _is_public_api(self, func_info: APIFunction) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏—á–Ω—ã–º API"""
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
        public_criteria = [
            func_info.name.startswith('dap_'),
            func_info.name.startswith('cellframe_'),
            func_info.file_path.endswith('.h'),  # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
            'include' in func_info.file_path,
            not func_info.name.startswith('_'),  # –ù–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        ]
        
        return any(public_criteria)
    
    def generate_documentation_json(self, output_file: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π API"""
        doc_data = {
            'metadata': {
                'generator': 'Cellframe API Extractor',
                'version': '1.0.0',
                'timestamp': '2025-01-16T18:30:00Z',
                'total_functions': len(self.api_functions),
                'total_modules': len(self.modules)
            },
            'modules': {}
        }
        
        for module_name, module in self.modules.items():
            doc_data['modules'][module_name] = {
                'name': module.name,
                'path': module.path,
                'description': module.description,
                'headers': module.headers,
                'functions': [asdict(func) for func in module.functions]
            }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(doc_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
    
    def generate_markdown_summary(self, output_file: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("# Cellframe API Analysis Report\n\n")
            f.write(f"**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** 2025-01-16\n")
            f.write(f"**–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:** {len(self.api_functions)}\n")
            f.write(f"**–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π:** {len(self.modules)}\n\n")
            
            f.write("## –ú–æ–¥—É–ª–∏\n\n")
            for module_name, module in self.modules.items():
                f.write(f"### {module_name}\n")
                f.write(f"- **–ü—É—Ç—å:** `{module.path}`\n")
                f.write(f"- **–§—É–Ω–∫—Ü–∏–π:** {len(module.functions)}\n")
                f.write(f"- **–ó–∞–≥–æ–ª–æ–≤–∫–∏:** {len(module.headers)}\n\n")
                
                if module.functions:
                    f.write("#### –§—É–Ω–∫—Ü–∏–∏:\n")
                    for func in module.functions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        f.write(f"- `{func.name}()` - {func.return_type}\n")
                    if len(module.functions) > 5:
                        f.write(f"- ... –∏ –µ—â–µ {len(module.functions) - 5} —Ñ—É–Ω–∫—Ü–∏–π\n")
                    f.write("\n")
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")

def main():
    parser = argparse.ArgumentParser(description='Cellframe API Extractor')
    parser.add_argument('--cellframe-root', default='.', 
                       help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Cellframe –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--output-json', default='cellframe_api_analysis.json',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª')
    parser.add_argument('--output-md', default='cellframe_api_report.md',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π Markdown —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.cellframe_root):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.cellframe_root}")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Cellframe API Extractor...")
    
    extractor = CellframeAPIExtractor(args.cellframe_root)
    modules = extractor.extract_apis()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    extractor.generate_documentation_json(args.output_json)
    extractor.generate_markdown_summary(args.output_md)
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(extractor.api_functions)} —Ñ—É–Ω–∫—Ü–∏–π –≤ {len(modules)} –º–æ–¥—É–ª—è—Ö")

if __name__ == '__main__':
    main() 