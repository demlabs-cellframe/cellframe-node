#!/usr/bin/env python3
"""
–°–õ–ö –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –°–õ–ö.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import os
import shutil
import json
from pathlib import Path
from typing import Dict, List, Tuple


class SLCFileOrganizer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –°–õ–ö"""
    
    def __init__(self, base_path: str = "."):
        self.base_path = Path(base_path)
        self.rules = self._define_organization_rules()
        self.moved_files = []
        self.deleted_files = []
        
    def _define_organization_rules(self) -> Dict[str, Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        return {
            "system_files": {
                "target_dir": ".slc",
                "patterns": [
                    "*.slc_usage_stats.json",
                    "changes.json",
                    "*.cache",
                    "*.tmp",
                    "evolution_state.json"
                ],
                "description": "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –°–õ–ö"
            },
            
            "documentation": {
                "target_dir": "docs", 
                "patterns": [
                    "MIGRATION_*.md",
                    "REFACTORING_*.md", 
                    "RELEASE_NOTES_*.md",
                    "README_*.md",
                    "*WIKI*.md",
                    "NAVIGATION_*.md",
                    "DEPLOYMENT.md",
                    "*_guide.md",
                    "*_examples.md",
                    "*_methodology_*.md",
                    "profiling_*.md"
                ],
                "description": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"
            },
            
            "scripts": {
                "target_dir": "tools/scripts",
                "patterns": [
                    "deploy_*.sh",
                    "backup_*.sh", 
                    "test_*.sh",
                    "setup_*.sh",
                    "install_*.sh"
                ],
                "description": "–°–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
            },
            
            "archives": {
                "target_dir": "archives",
                "patterns": [
                    "backup_*.tar.gz",
                    "*.backup",
                    "*.archive",
                    "archive_*.json"
                ],
                "description": "–ê—Ä—Ö–∏–≤—ã –∏ backup —Ñ–∞–π–ª—ã"
            },
            
            "temp_files_to_delete": {
                "target_dir": None,  # –£–¥–∞–ª—è—Ç—å, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
                "patterns": [
                    "test_*.md",
                    "test_*.json",
                    "test_*.slc-update",
                    "temp_*.json",
                    "*.temp",
                    ".DS_Store",
                    "Thumbs.db"
                ],
                "description": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            }
        }
    
    def ensure_directories_exist(self):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        required_dirs = [
            ".slc", "docs", "archives", 
            "tools/scripts", "tasks/archives"
        ]
        
        for dir_path in required_dirs:
            full_path = self.base_path / dir_path
            if not full_path.exists():
                full_path.mkdir(parents=True, exist_ok=True)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    def scan_and_organize(self, dry_run: bool = False) -> Tuple[int, int]:
        """
        –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã
        
        Args:
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ
            
        Returns:
            Tuple of (moved_files_count, deleted_files_count)
        """
        moved_count = 0
        deleted_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
        root_files = [f for f in self.base_path.iterdir() 
                     if f.is_file() and not f.name.startswith('.git')]
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(root_files)} —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        for file_path in root_files:
            target_action = self._determine_action(file_path)
            
            if target_action["action"] == "move":
                if dry_run:
                    print(f"üì¶ [DRY RUN] –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –±—ã: {file_path.name} ‚Üí {target_action['target']}")
                else:
                    self._move_file(file_path, target_action["target"])
                    moved_count += 1
                    
            elif target_action["action"] == "delete":
                if dry_run:
                    print(f"üóëÔ∏è  [DRY RUN] –£–¥–∞–ª–∏–ª –±—ã: {file_path.name}")
                else:
                    self._delete_file(file_path)
                    deleted_count += 1
                    
            elif target_action["action"] == "keep":
                print(f"‚úÖ –û—Å—Ç–∞–≤–ª—è—é –≤ –∫–æ—Ä–Ω–µ: {file_path.name}")
        
        return moved_count, deleted_count
    
    def _determine_action(self, file_path: Path) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞"""
        file_name = file_path.name
        
        # –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ
        keep_in_root = {
            "README.md", "VERSION", ".gitignore", 
            "LICENSE", "CHANGELOG.md"
        }
        
        if file_name in keep_in_root:
            return {"action": "keep", "reason": "Should stay in root"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        for rule_name, rule_config in self.rules.items():
            if self._matches_patterns(file_name, rule_config["patterns"]):
                if rule_config["target_dir"] is None:
                    return {"action": "delete", "reason": f"Temp file: {rule_name}"}
                else:
                    return {
                        "action": "move",
                        "target": rule_config["target_dir"],
                        "reason": rule_config["description"]
                    }
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ: {file_name}")
        return {"action": "keep", "reason": "Unknown file type"}
    
    def _matches_patterns(self, filename: str, patterns: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        import fnmatch
        return any(fnmatch.fnmatch(filename, pattern) for pattern in patterns)
    
    def _move_file(self, source: Path, target_dir: str):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        target_path = self.base_path / target_dir / source.name
        
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            target_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(source), str(target_path))
            self.moved_files.append((str(source), str(target_path)))
            print(f"üì¶ –ü–µ—Ä–µ–º–µ—â—ë–Ω: {source.name} ‚Üí {target_dir}/")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {source.name}: {e}")
    
    def _delete_file(self, file_path: Path):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
        try:
            file_path.unlink()
            self.deleted_files.append(str(file_path))
            print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω: {file_path.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path.name}: {e}")
    
    def generate_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ"""
        return {
            "timestamp": "2025-01-15T21:20:00Z",
            "moved_files": len(self.moved_files),
            "deleted_files": len(self.deleted_files), 
            "moved_details": self.moved_files,
            "deleted_details": self.deleted_files,
            "status": "completed"
        }
    
    def save_report(self, report: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–∞–±–æ—Ç–µ"""
        report_path = self.base_path / ".slc" / "last_cleanup_report.json"
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"üìä –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–°–õ–ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--dry-run", action="store_true", 
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--path", default=".", 
                       help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –°–õ–ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)")
    
    args = parser.parse_args()
    
    print("üßπ –°–õ–ö –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    organizer = SLCFileOrganizer(args.path)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    organizer.ensure_directories_exist()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    moved_count, deleted_count = organizer.scan_and_organize(dry_run=args.dry_run)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    if not args.dry_run:
        report = organizer.generate_report()
        organizer.save_report(report)
        
        print("\n" + "=" * 50)
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved_count}")
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    else:
        print("\n" + "=" * 50)
        print("üîç DRY RUN - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")


if __name__ == "__main__":
    main() 