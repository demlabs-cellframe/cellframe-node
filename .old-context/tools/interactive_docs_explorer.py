#!/usr/bin/env python3
"""
Interactive Documentation Explorer
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Cellframe API
"""

import json
import os
import re
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Set
import datetime
import webbrowser
import subprocess
import sys

class InteractiveDocsExplorer:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def __init__(self, docs_root: str = ".context/docs"):
        self.docs_root = Path(docs_root)
        self.api_reference = self.docs_root / "api-reference"
        self.search_index = {}
        self.function_categories = {}
        self.build_search_index()
    
    def build_search_index(self):
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        print("üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
        for md_file in self.api_reference.rglob("*.md"):
            if md_file.name == "README.md":
                continue
                
            try:
                with open(md_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                function_name = md_file.stem
                category = self.extract_category(content)
                description = self.extract_description(content)
                parameters = self.extract_parameters(content)
                
                self.search_index[function_name] = {
                    'file_path': str(md_file),
                    'category': category,
                    'description': description,
                    'parameters': parameters,
                    'content': content,
                    'keywords': self.extract_keywords(content)
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if category not in self.function_categories:
                    self.function_categories[category] = []
                self.function_categories[category].append(function_name)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {md_file}: {e}")
        
        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(self.search_index)} —Ñ—É–Ω–∫—Ü–∏–π –≤ {len(self.function_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")

    def extract_category(self, content: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        category_match = re.search(r'\*\*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:\*\*\s*(.+)', content)
        return category_match.group(1).strip() if category_match else "Uncategorized"

    def extract_description(self, content: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        desc_match = re.search(r'## –û–ø–∏—Å–∞–Ω–∏–µ\s*\n(.*?)(?=\n##|\n#|$)', content, re.DOTALL)
        if desc_match:
            return desc_match.group(1).strip()[:200] + "..."
        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    def extract_parameters(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        table_match = re.search(r'\| –ü–∞—Ä–∞–º–µ—Ç—Ä.*?\n(.*?)(?=\n\n|\n#)', content, re.DOTALL)
        if table_match:
            table_content = table_match.group(1)
            params = []
            for line in table_content.split('\n'):
                if '|' in line and not line.strip().startswith('|---'):
                    cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                    if len(cells) >= 2:
                        params.append(cells[0])
            return params
        return []

    def extract_keywords(self, content: str) -> Set[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        keywords = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for match in re.finditer(r'#+\s*(.+)', content):
            keywords.update(match.group(1).lower().split())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–¥–∞
        for match in re.finditer(r'`([^`]+)`', content):
            keywords.add(match.group(1).lower())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        tech_terms = re.findall(r'\b(ledger|chain|crypto|hash|sign|verify|block|tx|addr|key)\b', content.lower())
        keywords.update(tech_terms)
        
        return keywords

    def search_functions(self, query: str) -> List[Tuple[str, float]]:
        """–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        query_lower = query.lower()
        results = []
        
        for func_name, func_data in self.search_index.items():
            score = 0
            
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            if query_lower in func_name.lower():
                score += 100
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if query_lower in func_data['category'].lower():
                score += 50
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            if query_lower in func_data['description'].lower():
                score += 30
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            for param in func_data['parameters']:
                if query_lower in param.lower():
                    score += 20
            
            # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
            for keyword in func_data['keywords']:
                if query_lower in keyword:
                    score += 10
            
            if score > 0:
                results.append((func_name, score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x[1], reverse=True)
        return results[:10]  # –¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    def display_search_results(self, results: List[Tuple[str, float]]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        if not results:
            print("‚ùå –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ—É–Ω–∫—Ü–∏–π:")
        print("=" * 60)
        
        for i, (func_name, score) in enumerate(results, 1):
            func_data = self.search_index[func_name]
            print(f"{i:2d}. {func_name}")
            print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {func_data['category']}")
            print(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {func_data['description'][:80]}...")
            print(f"    –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.0f}")
            print()

    def show_function_details(self, function_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if function_name not in self.search_index:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        func_data = self.search_index[function_name]
        
        print(f"\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {function_name}")
        print("=" * 60)
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {func_data['category']}")
        print(f"–§–∞–π–ª: {func_data['file_path']}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(func_data['file_path'], 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            sections = content.split('\n## ')
            for i, section in enumerate(sections[:4]):  # –ü–µ—Ä–≤—ã–µ 4 —Ä–∞–∑–¥–µ–ª–∞
                if i == 0:
                    print(section)
                else:
                    print(f"## {section}")
                print()
                
            if len(sections) > 4:
                print("... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã)")
                print(f"\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –æ—Ç–∫—Ä—ã—Ç—å {function_name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def open_function_docs(self, function_name: str):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ/–±—Ä–∞—É–∑–µ—Ä–µ"""
        if function_name not in self.search_index:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏—è '{function_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        file_path = self.search_index[function_name]['file_path']
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤ VS Code
            result = subprocess.run(['code', file_path], capture_output=True)
            if result.returncode == 0:
                print(f"üìù –û—Ç–∫—Ä—ã—Ç–æ –≤ VS Code: {function_name}")
                return
        except:
            pass
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            if sys.platform == "darwin":  # macOS
                subprocess.run(['open', file_path])
            elif sys.platform == "linux":
                subprocess.run(['xdg-open', file_path])
            elif sys.platform == "win32":
                subprocess.run(['start', file_path], shell=True)
            
            print(f"üìñ –û—Ç–∫—Ä—ã—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ: {function_name}")
            
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
            print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {file_path}")

    def list_categories(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π:")
        print("=" * 40)
        
        for category, functions in sorted(self.function_categories.items()):
            print(f"{category} ({len(functions)} —Ñ—É–Ω–∫—Ü–∏–π)")
        
        print(f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫–∞—Ç–µ–≥–æ—Ä–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ>' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def show_category_functions(self, category: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        found_category = None
        for cat in self.function_categories:
            if category.lower() in cat.lower():
                found_category = cat
                break
        
        if not found_category:
            print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for cat in sorted(self.function_categories.keys()):
                print(f"  - {cat}")
            return
        
        functions = self.function_categories[found_category]
        
        print(f"\nüìÇ –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{found_category}':")
        print("=" * 60)
        
        for i, func_name in enumerate(sorted(functions), 1):
            func_data = self.search_index[func_name]
            print(f"{i:2d}. {func_name}")
            print(f"    {func_data['description'][:60]}...")
            print()

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        print("=" * 40)
        
        total_functions = len(self.search_index)
        print(f"–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {total_functions}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.function_categories)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, functions in sorted(self.function_categories.items(), 
                                        key=lambda x: len(x[1]), reverse=True):
            percentage = len(functions) / total_functions * 100
            print(f"  {category}: {len(functions)} ({percentage:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        param_counts = [len(func_data['parameters']) for func_data in self.search_index.values()]
        if param_counts:
            avg_params = sum(param_counts) / len(param_counts)
            max_params = max(param_counts)
            print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {avg_params:.1f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {max_params}")

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Cellframe API

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  –ø–æ–∏—Å–∫ <–∑–∞–ø—Ä–æ—Å>          - –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  —Ñ—É–Ω–∫—Ü–∏—è <–∏–º—è>           - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  –æ—Ç–∫—Ä—ã—Ç—å <–∏–º—è>           - –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
  –∫–∞—Ç–µ–≥–æ—Ä–∏–∏               - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  –∫–∞—Ç–µ–≥–æ—Ä–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ>    - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞              - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  –ø–æ–º–æ—â—å                  - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  –≤—ã—Ö–æ–¥                   - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–ü—Ä–∏–º–µ—Ä—ã:
  –ø–æ–∏—Å–∫ ledger           - –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ledger
  —Ñ—É–Ω–∫—Ü–∏—è dap_chain_ledger_tx_add - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
  –∫–∞—Ç–µ–≥–æ—Ä–∏—è crypto       - –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  –æ—Ç–∫—Ä—ã—Ç—å PyInit_libDAP  - –û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ

–°–æ–≤–µ—Ç—ã:
  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
  - –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –∏–º–µ–Ω–∞–º, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º
  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
"""
        print(help_text)

    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Cellframe API")
        print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        while True:
            try:
                command = input("\nüìö docs> ").strip()
                
                if not command:
                    continue
                
                parts = command.split(maxsplit=1)
                cmd = parts[0].lower()
                arg = parts[1] if len(parts) > 1 else ""
                
                if cmd in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                    
                elif cmd in ['–ø–æ–º–æ—â—å', 'help', 'h']:
                    self.show_help()
                    
                elif cmd in ['–ø–æ–∏—Å–∫', 'search', 's']:
                    if arg:
                        results = self.search_functions(arg)
                        self.display_search_results(results)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
                        
                elif cmd in ['—Ñ—É–Ω–∫—Ü–∏—è', 'function', 'f']:
                    if arg:
                        self.show_function_details(arg)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏")
                        
                elif cmd in ['–æ—Ç–∫—Ä—ã—Ç—å', 'open', 'o']:
                    if arg:
                        self.open_function_docs(arg)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏")
                        
                elif cmd in ['–∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'categories', 'cats']:
                    self.list_categories()
                    
                elif cmd in ['–∫–∞—Ç–µ–≥–æ—Ä–∏—è', 'category', 'cat']:
                    if arg:
                        self.show_category_functions(arg)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                        
                elif cmd in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats']:
                    self.show_statistics()
                    
                else:
                    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
                    print("–í–≤–µ–¥–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def generate_quick_reference(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"""
        print("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        
        reference_content = f"""# Cellframe API - –ö—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫

–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:** {len(self.search_index)}
- **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(self.function_categories)}

## –§—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

"""
        
        for category, functions in sorted(self.function_categories.items()):
            reference_content += f"### {category} ({len(functions)} —Ñ—É–Ω–∫—Ü–∏–π)\n\n"
            
            for func_name in sorted(functions):
                func_data = self.search_index[func_name]
                params_info = f" ({len(func_data['parameters'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)" if func_data['parameters'] else ""
                reference_content += f"- **{func_name}**{params_info} - {func_data['description'][:60]}...\n"
            
            reference_content += "\n"
        
        reference_content += """
## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è

```bash
python .context/tools/interactive_docs_explorer.py
```

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- `–ø–æ–∏—Å–∫ <–∑–∞–ø—Ä–æ—Å>` - –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
- `—Ñ—É–Ω–∫—Ü–∏—è <–∏–º—è>` - –î–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏  
- `–∫–∞—Ç–µ–≥–æ—Ä–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ>` - –§—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
- `–æ—Ç–∫—Ä—ã—Ç—å <–∏–º—è>` - –û—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ

### –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:
- `–ø–æ–∏—Å–∫ ledger` - –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ ledger
- `–ø–æ–∏—Å–∫ crypto sign` - –§—É–Ω–∫—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
- `–ø–æ–∏—Å–∫ python` - Python –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        reference_file = self.docs_root / "quick_reference.md"
        with open(reference_file, 'w', encoding='utf-8') as f:
            f.write(reference_content)
        
        print(f"‚úÖ –ö—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: {reference_file}")
        return str(reference_file)

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Interactive Documentation Explorer')
    parser.add_argument('--docs-root', default='.context/docs',
                       help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')
    parser.add_argument('--generate-reference', action='store_true',
                       help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')
    parser.add_argument('--search', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –≤—ã–π—Ç–∏')
    parser.add_argument('--function', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—ã–π—Ç–∏')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.docs_root):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.docs_root}")
        return 1
    
    explorer = InteractiveDocsExplorer(args.docs_root)
    
    if args.generate_reference:
        explorer.generate_quick_reference()
        return 0
    
    if args.search:
        results = explorer.search_functions(args.search)
        explorer.display_search_results(results)
        return 0
    
    if args.function:
        explorer.show_function_details(args.function)
        return 0
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    explorer.run_interactive()
    return 0

if __name__ == '__main__':
    exit(main()) 