#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ skipped —Ç–µ—Å—Ç–æ–≤ Python Cellframe
–¶–µ–ª—å: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –ø—É—Ç–∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import re
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple

class TestDiagnostics:
    def __init__(self, tests_dir: str = "python-cellframe/tests"):
        self.tests_dir = Path(tests_dir)
        self.results = {
            "total_test_files": 0,
            "total_test_functions": 0,
            "skipped_tests": 0,
            "skip_reasons": {},
            "cellframe_imports": [],
            "missing_dependencies": [],
            "test_categories": {},
            "recommendations": []
        }
    
    def analyze_test_files(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        for test_file in self.tests_dir.rglob("test_*.py"):
            self._analyze_single_file(test_file)
            
        self._generate_recommendations()
        return self.results
    
    def _analyze_single_file(self, file_path: Path):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        self.results["total_test_files"] += 1
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            test_functions = re.findall(r'def (test_\w+)', content)
            self.results["total_test_functions"] += len(test_functions)
            
            # –ü–æ–∏—Å–∫ skip —É—Å–ª–æ–≤–∏–π
            skip_patterns = [
                r'@pytest\.mark\.skipif\(([^)]+)\)',
                r'pytest\.skip\(([^)]+)\)',
                r'if.*cellframe_available.*skip'
            ]
            
            for pattern in skip_patterns:
                matches = re.findall(pattern, content, re.MULTILINE)
                for match in matches:
                    self.results["skipped_tests"] += len(test_functions)
                    reason = match.strip()
                    if reason not in self.results["skip_reasons"]:
                        self.results["skip_reasons"][reason] = 0
                    self.results["skip_reasons"][reason] += 1
            
            # –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ CellFrame
            cellframe_imports = re.findall(r'(import.*CellFrame.*|from.*CellFrame.*)', content)
            if cellframe_imports:
                self.results["cellframe_imports"].extend([
                    {"file": str(file_path), "imports": cellframe_imports}
                ])
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
            category = self._categorize_test(file_path)
            if category not in self.results["test_categories"]:
                self.results["test_categories"][category] = 0
            self.results["test_categories"][category] += len(test_functions)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
    
    def _categorize_test(self, file_path: Path) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º"""
        path_str = str(file_path).lower()
        
        if "core" in path_str:
            return "core"
        elif "service" in path_str:
            return "services"
        elif "integration" in path_str:
            return "integration"
        elif "util" in path_str:
            return "utils"
        else:
            return "other"
    
    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ skip reasons
        if "not cellframe_available" in str(self.results["skip_reasons"]):
            recommendations.append({
                "priority": "HIGH",
                "action": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å cellframe_available –ø—Ä–æ–≤–µ—Ä–∫—É",
                "description": "–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CellFrame –º–æ–¥—É–ª—è",
                "solution": "–°–æ–∑–¥–∞—Ç—å standalone CellFrame.so extension –∏–ª–∏ mock –æ–±—ä–µ–∫—Ç"
            })
        
        # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
        if self.results["cellframe_imports"]:
            recommendations.append({
                "priority": "MEDIUM", 
                "action": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ CellFrame –∏–º–ø–æ—Ä—Ç—ã",
                "description": f"–ù–∞–π–¥–µ–Ω–æ {len(self.results['cellframe_imports'])} —Ñ–∞–π–ª–æ–≤ —Å CellFrame –∏–º–ø–æ—Ä—Ç–∞–º–∏",
                "solution": "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è"
            })
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        core_tests = self.results["test_categories"].get("core", 0)
        if core_tests > 50:
            recommendations.append({
                "priority": "HIGH",
                "action": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ core —Ç–µ—Å—Ç—ã",
                "description": f"–ù–∞–π–¥–µ–Ω–æ {core_tests} core —Ç–µ—Å—Ç–æ–≤ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞",
                "solution": "–ù–∞—á–∞—Ç—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è core —Ç–µ—Å—Ç–æ–≤, –∑–∞—Ç–µ–º services –∏ integration"
            })
        
        self.results["recommendations"] = recommendations
    
    def check_cellframe_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CellFrame –º–æ–¥—É–ª—è"""
        print("\nüî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CellFrame –º–æ–¥—É–ª—è...")
        
        availability_check = {
            "direct_import": False,
            "with_build_path": False,
            "error_messages": [],
            "python_paths": sys.path[:5]
        }
        
        # –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
        try:
            import CellFrame
            availability_check["direct_import"] = True
            print("‚úÖ CellFrame –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç")
        except Exception as e:
            availability_check["error_messages"].append(f"Direct import: {e}")
            print(f"‚ùå –ü—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        # –ò–º–ø–æ—Ä—Ç —Å build path
        build_path = Path("build_with_python/python-cellframe")
        if build_path.exists():
            sys.path.insert(0, str(build_path))
            try:
                import CellFrame
                availability_check["with_build_path"] = True
                print("‚úÖ CellFrame –¥–æ—Å—Ç—É–ø–µ–Ω —Å build path")
            except Exception as e:
                availability_check["error_messages"].append(f"With build path: {e}")
                print(f"‚ùå –ò–º–ø–æ—Ä—Ç —Å build path –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        return availability_check
    
    def generate_action_plan(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π...")
        
        plan = {
            "immediate_actions": [
                {
                    "step": 1,
                    "action": "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π build –ø—Ä–æ—Ü–µ—Å—Å",
                    "command": "cd python-cellframe && python3 setup.py build_ext --inplace",
                    "expected": "–°–æ–∑–¥–∞–Ω–∏–µ CellFrame.so extension –º–æ–¥—É–ª—è"
                },
                {
                    "step": 2, 
                    "action": "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å CMakeLists.txt",
                    "target": "python-cellframe/CMakeLists.txt",
                    "change": "SHARED_LIBRARY –≤–º–µ—Å—Ç–æ MODULE –¥–ª—è CellFrame target"
                },
                {
                    "step": 3,
                    "action": "–°–æ–∑–¥–∞—Ç—å test runner —Å–∫—Ä–∏–ø—Ç",
                    "file": "run_tests.py",
                    "purpose": "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º PYTHONPATH"
                }
            ],
            "validation_steps": [
                "python3 -c 'import CellFrame; print(\"Success!\")'",
                "python3 -m pytest tests/core/test_libdap_client_python.py::TestLibdapClientPython::test_dao_client_set_uplink_py_exists -v",
                "python3 -m pytest tests/ --tb=short | grep -E '(PASSED|FAILED|SKIPPED)' | wc -l"
            ]
        }
        
        return plan
    
    def save_results(self, output_file: str = ".context/analysis/test_diagnostics_report.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        
        full_report = {
            "analysis_date": "2025-06-18T19:50:00Z",
            "diagnostics": self.results,
            "cellframe_availability": self.check_cellframe_availability(),
            "action_plan": self.generate_action_plan()
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(full_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        return full_report

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤ Python Cellframe")
    print("=" * 50)
    
    diagnostics = TestDiagnostics()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    results = diagnostics.analyze_test_files()
    
    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print(f"\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {results['total_test_files']}")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {results['total_test_functions']}")
    print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {results['skipped_tests']}")
    print(f"   –ü—Ä–∏—á–∏–Ω –ø—Ä–æ–ø—É—Å–∫–∞: {len(results['skip_reasons'])}")
    
    print(f"\nüè∑Ô∏è  –ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–°–¢–û–í:")
    for category, count in results['test_categories'].items():
        print(f"   {category}: {count} —Ç–µ—Å—Ç–æ–≤")
    
    print(f"\n‚ö° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for i, rec in enumerate(results['recommendations'], 1):
        print(f"   {i}. [{rec['priority']}] {rec['action']}")
        print(f"      {rec['description']}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    full_report = diagnostics.save_results()
    
    print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ç—á–µ—Ç–∞")
    
    return full_report

if __name__ == "__main__":
    main() 