#!/usr/bin/env python3
"""
Performance tests for Python Cellframe
"""

import time
import gc
import os

def test_basic_performance():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    start_time = time.perf_counter()
    data = [f"test_{i}" for i in range(10000)]
    end_time = time.perf_counter()
    
    print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è 10k —Å—Ç—Ä–æ–∫: {(end_time - start_time)*1000:.2f} ms")
    
    # –û—á–∏—Å—Ç–∫–∞
    del data
    gc.collect()
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Python Cellframe")
    print("=" * 45)
    
    if test_basic_performance():
        print("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 0
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == '__main__':
    exit(main())
