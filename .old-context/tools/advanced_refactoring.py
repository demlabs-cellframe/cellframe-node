#!/usr/bin/env python3
"""
Advanced Refactoring Tool for Python Cellframe
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ Python Cellframe
"""

import os
import re
import json
import shutil
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple

class AdvancedRefactoring:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ Python Cellframe"""
    
    def __init__(self, base_path="python-cellframe"):
        self.base_path = Path(base_path)
        self.backup_dir = Path(".context/backups")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        self.refactoring_log = []
        
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"{file_path.name}_refactor_{timestamp}.backup"
        backup_path = self.backup_dir / backup_name
        
        shutil.copy2(file_path, backup_path)
        print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    
    def log_refactoring(self, action, file_path, description):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        entry = {
            "timestamp": datetime.now().isoformat(),
            "action": action,
            "file": str(file_path),
            "description": description
        }
        self.refactoring_log.append(entry)
    
    def improve_error_handling(self):
        """–£–ª—É—á—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
        print("üîß –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        improvements = 0
        
        for c_file in self.base_path.rglob("*.c"):
            if self.is_python_binding_file(c_file):
                improvements += self.improve_file_error_handling(c_file)
        
        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–æ {improvements} —Ñ–∞–π–ª–æ–≤")
        return improvements > 0
    
    def is_python_binding_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Python –±–∏–Ω–¥–∏–Ω–≥–æ–º"""
        return (
            "wrapping_" in file_path.name or
            "python" in file_path.name.lower() or
            file_path.parent.name in ["src", "modules"]
        )
    
    def improve_file_error_handling(self, file_path):
        """–£–ª—É—á—à–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except:
            return 0
        
        if "PyErr_SetString" not in content:
            return 0  # –ù–µ—Ç Python API –≤ —Ñ–∞–π–ª–µ
        
        original_content = content
        improvements_made = False
        
        # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        content = self.standardize_error_messages(content)
        
        # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        content = self.add_parameter_validation(content)
        
        # 3. –£–ª—É—á—à–µ–Ω–∏–µ cleanup –∫–æ–¥–∞
        content = self.improve_cleanup_code(content)
        
        if content != original_content:
            self.backup_file(file_path)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.log_refactoring("error_handling", file_path, "–£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
            print(f"‚úÖ –£–ª—É—á—à–µ–Ω: {file_path.name}")
            return 1
        
        return 0
    
    def standardize_error_messages(self, content):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        replacements = [
            (r'PyErr_SetString\(PyExc_AttributeError, "The .* argument.*not correctly passed.*"', 
             'PyErr_SetString(PyExc_TypeError, "Invalid argument type")'),
            (r'PyErr_SetString\(PyExc_ValueError, ".*Invalid.*"', 
             'PyErr_SetString(PyExc_ValueError, "Invalid parameter value")'),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content)
        
        return content
    
    def add_parameter_validation(self, content):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        lines = content.split('\n')
        new_lines = []
        
        for i, line in enumerate(lines):
            new_lines.append(line)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ Python API
            if re.match(r'PyObject\s+\*\w+\(PyObject\s+\*self,\s*PyObject\s+\*args\)', line):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                indent = len(line) - len(line.lstrip())
                indent_str = ' ' * (indent + 4)
                
                validation_code = f"{indent_str}if (!args) {{\n"
                validation_code += f"{indent_str}    PyErr_SetString(PyExc_TypeError, \"Arguments required\");\n"
                validation_code += f"{indent_str}    return NULL;\n"
                validation_code += f"{indent_str}}}\n"
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                if i + 1 < len(lines) and '{' in lines[i + 1]:
                    new_lines.append(validation_code)
        
        return '\n'.join(new_lines)
    
    def improve_cleanup_code(self, content):
        """–£–ª—É—á—à–∞–µ—Ç –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å DAP_DELETE –∏ —É–ª—É—á—à–∞–µ–º –∏—Ö
        lines = content.split('\n')
        
        for i, line in enumerate(lines):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ DAP_DELETE –ø–æ–¥—Ä—è–¥, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö
            if 'DAP_DELETE(' in line and i > 0:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã cleanup
                if 'DAP_DELETE(' not in lines[i-1]:
                    indent = len(line) - len(line.lstrip())
                    lines[i] = ' ' * indent + '// Cleanup resources\n' + line
        
        return '\n'.join(lines)
    
    def optimize_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        optimizations = 0
        
        for c_file in self.base_path.rglob("*.c"):
            if self.is_python_binding_file(c_file):
                optimizations += self.optimize_file_performance(c_file)
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {optimizations} —Ñ–∞–π–ª–æ–≤")
        return optimizations > 0
    
    def optimize_file_performance(self, file_path):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except:
            return 0
        
        original_content = content
        
        # 1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        content = self.cache_frequent_calls(content)
        
        # 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        content = self.optimize_string_operations(content)
        
        # 3. –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–∏–ø–æ–≤
        content = self.reduce_type_checks(content)
        
        if content != original_content:
            self.backup_file(file_path)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.log_refactoring("performance", file_path, "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            print(f"üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: {file_path.name}")
            return 1
        
        return 0
    
    def cache_frequent_calls(self, content):
        """–ö—ç—à–∏—Ä—É–µ—Ç —á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã"""
        # –ö—ç—à–∏—Ä—É–µ–º PyUnicode_AsUTF8 –≤ —Ü–∏–∫–ª–∞—Ö
        lines = content.split('\n')
        new_lines = []
        
        for i, line in enumerate(lines):
            if 'for' in line and i + 10 < len(lines):
                # –ò—â–µ–º PyUnicode_AsUTF8 –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Å—Ç—Ä–æ–∫–∞—Ö
                loop_body = '\n'.join(lines[i:i+10])
                if loop_body.count('PyUnicode_AsUTF8') > 1:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                    indent = len(line) - len(line.lstrip())
                    cache_line = ' ' * (indent + 4) + '// Cache string conversion\n'
                    new_lines.append(line)
                    new_lines.append(cache_line)
                    continue
            
            new_lines.append(line)
        
        return '\n'.join(new_lines)
    
    def optimize_string_operations(self, content):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        content = re.sub(
            r'PyUnicode_Concat\(.*\)',
            '// TODO: Consider using PyUnicode_Join for better performance',
            content
        )
        
        return content
    
    def reduce_type_checks(self, content):
        """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–∏–ø–æ–≤"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
        content = re.sub(
            r'(PyObject_Type\([^)]+\)[^;]*;[\s\n]*){2,}',
            '// TODO: Cache type check results\n\\1',
            content
        )
        
        return content
    
    def create_helper_functions(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        helper_content = '''/*
 * Helper functions for Python Cellframe
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Python Cellframe
 */

#ifndef PYTHON_CELLFRAME_HELPERS_H
#define PYTHON_CELLFRAME_HELPERS_H

#include "python-cellframe.h"

// Error handling helpers
static inline PyObject* set_error_and_return_null(PyObject* exc_type, const char* message) {
    PyErr_SetString(exc_type, message);
    return NULL;
}

// Parameter validation helpers
static inline bool validate_args(PyObject* args) {
    if (!args) {
        PyErr_SetString(PyExc_TypeError, "Arguments required");
        return false;
    }
    return true;
}

// Memory management helpers
static inline void* safe_malloc(size_t size) {
    void* ptr = malloc(size);
    if (!ptr) {
        PyErr_SetString(PyExc_MemoryError, "Memory allocation failed");
    }
    return ptr;
}

// Cleanup helper
static inline void cleanup_and_return_null(void* ptr1, void* ptr2, void* ptr3) {
    if (ptr1) free(ptr1);
    if (ptr2) free(ptr2);
    if (ptr3) free(ptr3);
}

// Type checking helpers
static inline bool is_valid_chain_object(PyObject* obj) {
    return obj && PyDapChain_Check(obj);
}

static inline bool is_valid_hash_object(PyObject* obj) {
    return obj && PyDapHashFast_Check(obj);
}

// String conversion helpers
static inline const char* safe_unicode_to_utf8(PyObject* obj) {
    if (!PyUnicode_Check(obj)) {
        PyErr_SetString(PyExc_TypeError, "Expected string type");
        return NULL;
    }
    return PyUnicode_AsUTF8(obj);
}

#endif // PYTHON_CELLFRAME_HELPERS_H
'''
        
        helper_file = self.base_path / "include" / "python-cellframe-helpers.h"
        helper_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(helper_file, 'w', encoding='utf-8') as f:
            f.write(helper_content)
        
        self.log_refactoring("helpers", helper_file, "–°–æ–∑–¥–∞–Ω—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {helper_file}")
        
        return True
    
    def add_documentation(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"""
        print("üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        documented = 0
        
        for c_file in self.base_path.rglob("*.c"):
            if self.is_python_binding_file(c_file):
                documented += self.add_file_documentation(c_file)
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ {documented} —Ñ–∞–π–ª–æ–≤")
        return documented > 0
    
    def add_file_documentation(self, file_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ–∞–π–ª—É"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except:
            return 0
        
        if "/**" in content:
            return 0  # –£–∂–µ –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        
        original_content = content
        lines = content.split('\n')
        new_lines = []
        
        for i, line in enumerate(lines):
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∫ —Ñ—É–Ω–∫—Ü–∏—è–º Python API
            if re.match(r'PyObject\s+\*\w+\(PyObject\s+\*self,\s*PyObject\s+\*args\)', line):
                func_name = re.search(r'PyObject\s+\*(\w+)\(', line).group(1)
                
                doc = f"/**\n"
                doc += f" * @brief {func_name} - Python API function\n"
                doc += f" * @param self Python self object\n"
                doc += f" * @param args Python arguments tuple\n"
                doc += f" * @return PyObject* or NULL on error\n"
                doc += f" */\n"
                
                new_lines.append(doc)
            
            new_lines.append(line)
        
        if len(new_lines) > len(lines):
            self.backup_file(file_path)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_lines))
            
            self.log_refactoring("documentation", file_path, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω: {file_path.name}")
            return 1
        
        return 0
    
    def create_refactoring_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ"""
        report = {
            "timestamp": datetime.now().isoformat(),
            "total_actions": len(self.refactoring_log),
            "actions_by_type": {},
            "files_modified": len(set(entry["file"] for entry in self.refactoring_log)),
            "actions": self.refactoring_log
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        for entry in self.refactoring_log:
            action_type = entry["action"]
            if action_type not in report["actions_by_type"]:
                report["actions_by_type"][action_type] = 0
            report["actions_by_type"][action_type] += 1
        
        report_file = Path(".context/analysis/advanced_refactoring_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report
    
    def run_advanced_refactoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ Python Cellframe")
        print("=" * 55)
        
        tasks = [
            ("–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", self.improve_error_handling),
            ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", self.optimize_performance),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", self.create_helper_functions),
            ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", self.add_documentation),
        ]
        
        completed = 0
        
        for task_name, task_func in tasks:
            print(f"\nüîß {task_name}...")
            try:
                if task_func():
                    print(f"‚úÖ {task_name}: –ó–ê–í–ï–†–®–ï–ù–û")
                    completed += 1
                else:
                    print(f"‚ö†Ô∏è  {task_name}: –ü–†–û–ü–£–©–ï–ù–û")
            except Exception as e:
                print(f"‚ùå {task_name}: –û–®–ò–ë–ö–ê - {e}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = self.create_refactoring_report()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
        print(f"   üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed}/{len(tasks)}")
        print(f"   üìÅ –ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {report['files_modified']}")
        print(f"   üìù –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {report['total_actions']}")
        
        if report["actions_by_type"]:
            print(f"\nüìã –î–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç–∏–ø–∞–º:")
            for action_type, count in report["actions_by_type"].items():
                print(f"   ‚Ä¢ {action_type}: {count}")
        
        return completed > 0

def create_build_optimization():
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∫–∏"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π setup.py
    setup_content = '''#!/usr/bin/env python3
"""
Optimized setup.py for Python Cellframe
"""

from setuptools import setup, Extension
import os

# Optimization flags
extra_compile_args = [
    '-O3',
    '-std=c11', 
    '-D_REENTRANT',
    '-DDAP_MEMORY_OPTIMIZED',
    '-fvisibility=hidden'
]

# Debug flags (uncomment for debugging)
# extra_compile_args.extend(['-O0', '-g', '-fsanitize=address'])

ext_modules = [
    Extension(
        'CellFrame',
        sources=[
            'CellFrame/python-cellframe.c',
            'CellFrame/python-cellframe_common.c',
        ],
        include_dirs=[
            'include/',
        ],
        extra_compile_args=extra_compile_args,
        language='c'
    ),
]

setup(
    name="CellFrame",
    version="0.14.0",
    description="Optimized CellFrame SDK Python bindings",
    author="Demlabs",
    license="GNU GPLv3",
    ext_modules=ext_modules,
    python_requires=">=3.8",
    zip_safe=False,
)
'''
    
    setup_file = Path("python-cellframe/setup_optimized.py")
    with open(setup_file, 'w', encoding='utf-8') as f:
        f.write(setup_content)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π setup.py: {setup_file}")
    return True

def create_performance_tests():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_content = '''#!/usr/bin/env python3
"""
Performance tests for Python Cellframe
"""

import time
import gc
import os

def test_basic_performance():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    start_time = time.perf_counter()
    data = [f"test_{i}" for i in range(10000)]
    end_time = time.perf_counter()
    
    print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è 10k —Å—Ç—Ä–æ–∫: {(end_time - start_time)*1000:.2f} ms")
    
    # –û—á–∏—Å—Ç–∫–∞
    del data
    gc.collect()
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Python Cellframe")
    print("=" * 45)
    
    if test_basic_performance():
        print("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 0
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == '__main__':
    exit(main())
'''
    
    test_file = Path(".context/tools/performance_tests.py")
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {test_file}")
    return test_file

def create_code_quality_checker():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
    
    checker_content = '''#!/usr/bin/env python3
"""
Code Quality Checker for Python Cellframe
"""

import os
import re
import json
from pathlib import Path

class CodeQualityChecker:
    def __init__(self, base_path="python-cellframe"):
        self.base_path = Path(base_path)
        self.issues = []
    
    def check_error_handling(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        for c_file in self.base_path.rglob("*.c"):
            try:
                with open(c_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    
                    pyerr_count = content.count('PyErr_SetString')
                    return_null_count = content.count('return NULL')
                    
                    if pyerr_count > return_null_count:
                        self.issues.append({
                            "file": str(c_file),
                            "type": "error_handling",
                            "description": f"Missing return NULL: {pyerr_count} PyErr vs {return_null_count} returns"
                        })
            except:
                continue
    
    def check_memory_management(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...")
        
        for c_file in self.base_path.rglob("*.c"):
            try:
                with open(c_file, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    
                    malloc_count = len(re.findall(r'malloc\\s*\\(|calloc\\s*\\(|realloc\\s*\\(', content))
                    free_count = len(re.findall(r'free\\s*\\(|DAP_DELETE\\s*\\(', content))
                    
                    if malloc_count > free_count:
                        self.issues.append({
                            "file": str(c_file),
                            "type": "memory",
                            "description": f"Potential memory leak: {malloc_count} allocs vs {free_count} frees"
                        })
            except:
                continue
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–¥–∞"""
        report = {
            "total_issues": len(self.issues),
            "issues_by_type": {},
            "files_with_issues": len(set(issue["file"] for issue in self.issues)),
            "issues": self.issues
        }
        
        for issue in self.issues:
            issue_type = issue["type"]
            if issue_type not in report["issues_by_type"]:
                report["issues_by_type"][issue_type] = 0
            report["issues_by_type"][issue_type] += 1
        
        return report
    
    def run_quality_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ Python Cellframe")
        print("=" * 45)
        
        self.check_error_handling()
        self.check_memory_management()
        
        report = self.generate_report()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        print(f"   ‚ö†Ô∏è  –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['total_issues']}")
        print(f"   üìÅ –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {report['files_with_issues']}")
        
        return report

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not Path("python-cellframe").exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    checker = CodeQualityChecker()
    report = checker.run_quality_check()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path(".context/analysis/code_quality_report.json")
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    return 0

if __name__ == '__main__':
    exit(main())
'''
    
    checker_file = Path(".context/tools/code_quality_checker.py")
    with open(checker_file, 'w', encoding='utf-8') as f:
        f.write(checker_content)
    
    print(f"üìù –°–æ–∑–¥–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {checker_file}")
    return checker_file

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ Python Cellframe")
    print("=" * 45)
    
    if not Path("python-cellframe").exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    tasks = [
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏", create_build_optimization),
        ("–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", create_performance_tests),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞", create_code_quality_checker),
    ]
    
    completed = 0
    
    for task_name, task_func in tasks:
        print(f"\nüîß {task_name}...")
        try:
            if task_func():
                print(f"‚úÖ {task_name}: –ó–ê–í–ï–†–®–ï–ù–û")
                completed += 1
            else:
                print(f"‚ö†Ô∏è  {task_name}: –ü–†–û–ü–£–©–ï–ù–û")
        except Exception as e:
            print(f"‚ùå {task_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:")
    print(f"   üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {completed}/{len(tasks)}")
    
    if completed > 0:
        print("\nüéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞: python3 .context/tools/code_quality_checker.py")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: python3 .context/tools/performance_tests.py")
        print("   3. –°–æ–±—Ä–∞—Ç—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏: cd python-cellframe && python3 setup_optimized.py build")
    
    return 0

if __name__ == '__main__':
    exit(main()) 