#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ CLI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–í–µ—Ä—Å–∏—è: 2.0.0 (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-20
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional
import argparse


class BaseCommand(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ CLI"""
    
    def __init__(self):
        self.supports_json_context = False  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
    @property
    @abstractmethod
    def name(self) -> str:
        """–ò–º—è –∫–æ–º–∞–Ω–¥—ã"""
        pass
    
    @property
    @abstractmethod
    def description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        pass
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –≤ –ø–∞—Ä—Å–µ—Ä
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        if self.supports_json_context:
            parser.add_argument(
                "--json-context",
                action="store_true",
                help="–í—ã–≤–µ—Å—Ç–∏ JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞"
            )
            parser.add_argument(
                "--load-content",
                action="store_true",
                help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ JSON –≤—ã–≤–æ–¥"
            )
    
    @abstractmethod
    def execute(self, args: argparse.Namespace) -> int:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
        
        Args:
            args: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, –Ω–µ 0 - –æ—à–∏–±–∫–∞)
        """
        pass
    
    def validate_args(self, args: argparse.Namespace) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã, False –∏–Ω–∞—á–µ
        """
        return True
    
    def print_error(self, message: str):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        print(f"‚ùå {message}")
    
    def print_warning(self, message: str):
        """–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        print(f"‚ö†Ô∏è  {message}")
    
    def print_success(self, message: str):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        print(f"‚úÖ {message}")
    
    def print_info(self, message: str):
        """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def handle_json_context_output(
        self, 
        args: argparse.Namespace, 
        execution_result: Dict[str, Any],
        context_files: List[str] = None,
        context_summary: str = None,
        recommended_actions: List[str] = None,
        next_commands: List[str] = None
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            execution_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            context_files: –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            context_summary: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            recommended_actions: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            next_commands: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        """
        if not self.supports_json_context:
            return
            
        if hasattr(args, 'json_context') and args.json_context:
            try:
                from tools.cli_modules.common.context_output import ContextOutputManager
                
                if hasattr(self, 'base_path'):
                    manager = ContextOutputManager(str(self.base_path))
                    
                    context_output = manager.create_context_output(
                        command_name=self.name,
                        execution_result=execution_result,
                        context_files=context_files or [],
                        context_summary=context_summary,
                        recommended_actions=recommended_actions or [],
                        next_commands=next_commands or [],
                        load_content=getattr(args, 'load_content', False)
                    )
                    
                    manager.print_context_output(context_output)
                    
            except ImportError as e:
                self.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            except Exception as e:
                self.print_error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")


class ContextAwareCommand(BaseCommand):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É JSON –≤—ã–≤–æ–¥–∞
    """
    
    def __init__(self, base_path: str = None):
        super().__init__()
        self.base_path = base_path
        self.supports_json_context = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
    
    def output_json_context(self, context_data: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Args:
            context_data: –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        """
        import json
        print("\n" + "="*60)
        print("ü§ñ JSON –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø AI:")
        print("="*60)
        print(json.dumps(context_data, indent=2, ensure_ascii=False))
        print("="*60)
        
    def get_default_context_files(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        """
        return []
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        """
        return f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {self.name}"
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        """
        return []
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
        """
        return []
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –≤–º–µ—Å—Ç–æ execute()
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        return {"status": "success", "message": "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
    
    def execute(self, args: argparse.Namespace) -> int:
        """
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è execute —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–≤–æ–¥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            execution_result = self.execute_with_context(args)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
            self.handle_json_context_output(
                args=args,
                execution_result=execution_result,
                context_files=self.get_default_context_files(),
                context_summary=self.get_context_summary(execution_result),
                recommended_actions=self.get_recommended_actions(execution_result),
                next_commands=self.get_next_commands(execution_result)
            )
            
            return 0
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {self.name}: {e}")
            return 1


class CommandRegistry:
    """–†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥ CLI"""
    
    def __init__(self):
        self._commands: Dict[str, BaseCommand] = {}
    
    def register(self, command: BaseCommand):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        self._commands[command.name] = command
    
    def get_command(self, name: str) -> BaseCommand:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            name: –ò–º—è –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self._commands.get(name)
    
    def get_all_commands(self) -> Dict[str, BaseCommand]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return self._commands.copy()
    
    def list_commands(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –∫–æ–º–∞–Ω–¥"""
        return list(self._commands.keys()) 