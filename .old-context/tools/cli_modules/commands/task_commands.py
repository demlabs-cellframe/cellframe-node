"""
–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã: list

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import json
import argparse
from typing import Dict, List, Any
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from common.base_command import BaseCommand, ContextAwareCommand


class ListCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
        self.tasks_path = Path(base_path) / "tasks"
    
    @property
    def name(self) -> str:
        return "list"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--status", "-s",
            choices=["active", "completed", "all"],
            default="active",
            help="–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∫–∞–∑–∞"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json", "summary"],
            default="summary",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
        parser.add_argument(
            "--detailed", "-d",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã list"""
        print("üìã –ó–∞–¥–∞—á–∏ Smart Layered Context")
        print("=" * 50)
        
        if not self.tasks_path.exists():
            self.print_warning("–ü–∞–ø–∫–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 1
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        status = getattr(args, 'status', 'active')
        detailed = getattr(args, 'detailed', False)
        format_type = getattr(args, 'format', 'summary')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç args —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        fixed_args = argparse.Namespace()
        fixed_args.status = status
        fixed_args.detailed = detailed
        fixed_args.format = format_type
        
        if fixed_args.status in ["active", "all"]:
            self._show_active_tasks(fixed_args)
        
        if fixed_args.status in ["completed", "all"]:
            self._show_completed_tasks(fixed_args)
        
        if fixed_args.status == "all":
            self._show_summary()
        
        # JSON –≤—ã–≤–æ–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        list_result = self._prepare_json_context(fixed_args)
        self.output_json_context(list_result)
        
        return 0
    
    def _prepare_json_context(self, args: argparse.Namespace) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI"""
        active_tasks = self._get_active_tasks_data()
        completed_tasks = self._get_completed_tasks_data()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
        recommendations = []
        if active_tasks:
            completion = active_tasks.get('completion', '0%')
            if completion == '0%':
                recommendations.append("–ï—Å—Ç—å –Ω–µ–Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ - —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
            elif '100%' in completion:
                recommendations.append("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
            else:
                recommendations.append("–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É")
                
            current_focus = active_tasks.get('current_focus', {})
            if current_focus:
                title = current_focus.get('title', '')
                if title:
                    recommendations.append(f"–¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å: {title}")
        else:
            recommendations.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —à–∞–±–ª–æ–Ω—ã' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        
        next_commands = []
        if active_tasks:
            if active_tasks.get('completion', '0%') == '0%':
                next_commands = ["templates", "intelligent-recommend", "load-context"]
            else:
                next_commands = ["status", "templates", "help"]
        else:
            next_commands = ["templates", "create", "intelligent-recommend"]
        
        # –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç
        suggested_files = []
        if active_tasks:
            suggested_files.append("tasks/active.json")
        if completed_tasks:
            suggested_files.append("tasks/completed/")
        suggested_files.extend(["manifest.json", "modules/core/project.json"])
        
        return {
            "command": "list",
            "status": "completed",
            "tasks_summary": {
                "active_count": 1 if active_tasks else 0,
                "completed_count": len(completed_tasks),
                "total_count": (1 if active_tasks else 0) + len(completed_tasks)
            },
            "active_project": active_tasks.get('project', None) if active_tasks else None,
            "current_focus": active_tasks.get('current_focus', {}).get('title', None) if active_tasks else None,
            "project_phase": active_tasks.get('phase', None) if active_tasks else None,
            "completion": active_tasks.get('completion', None) if active_tasks else None,
            "ai_recommendations": recommendations,
            "next_commands": next_commands,
            "suggested_files_to_load": suggested_files
        }
    
    def _get_active_tasks_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        active_file = self.tasks_path / "active.json"
        if not active_file.exists():
            return {}
        
        try:
            with open(active_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {}
    
    def _get_completed_tasks_data(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        completed_path = self.tasks_path / "completed"
        if not completed_path.exists():
            return []
        
        completed_files = list(completed_path.glob("*.json"))
        completed_data = []
        
        for task_file in completed_files:
            try:
                with open(task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    completed_data.append({
                        "file": task_file.name,
                        "title": data.get('task', {}).get('title', task_file.stem),
                        "status": data.get('task', {}).get('status', 'completed')
                    })
            except Exception:
                continue
        
        return completed_data
    
    def _show_active_tasks(self, args: argparse.Namespace):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        active_file = self.tasks_path / "active.json"
        
        if not active_file.exists():
            print("\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        try:
            with open(active_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if args.format == "json":
                print(json.dumps(data, indent=2, ensure_ascii=False))
                return
            
            print(f"\nüéØ –ê–ö–¢–ò–í–ù–´–ô –ü–†–û–ï–ö–¢: {data.get('project', 'Unknown')}")
            print(f"üìä –í–µ—Ä—Å–∏—è: {data.get('version', 'Unknown')}")
            print(f"üèóÔ∏è –§–∞–∑–∞: {data.get('phase', 'Unknown')}")
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {data.get('completion', '0%')}")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status', 'Unknown')}")
            
            # –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å
            current_focus = data.get('current_focus', {})
            if current_focus:
                print(f"\nüéØ –¢–ï–ö–£–©–ò–ô –§–û–ö–£–°:")
                print(f"   üìã {current_focus.get('title', 'Unknown')}")
                
                if args.detailed:
                    objectives = current_focus.get('completed_objectives', [])
                    if objectives:
                        print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:")
                        for obj in objectives:
                            print(f"   {obj}")
                    
                    new_tasks = current_focus.get('new_tasks_created', [])
                    if new_tasks:
                        print(f"\nüìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                        for task in new_tasks:
                            print(f"   {task}")
            
            # –§–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
            phases = data.get('phases_completed', [])
            if phases and (args.detailed or args.format == "table"):
                print(f"\nüìä –§–ê–ó–´ –ü–†–û–ï–ö–¢–ê:")
                for phase in phases:
                    print(f"   {phase}")
            
        except json.JSONDecodeError:
            self.print_error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞: {e}")
    
    def _show_completed_tasks(self, args: argparse.Namespace):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        completed_path = self.tasks_path / "completed"
        
        if not completed_path.exists():
            print("\nüìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        completed_files = list(completed_path.glob("*.json"))
        if not completed_files:
            print("\nüìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
            return
        
        print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò ({len(completed_files)}):")
        
        for task_file in sorted(completed_files):
            try:
                with open(task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                task_name = task_file.stem.replace('_completed', '').replace('_', ' ')
                task_title = data.get('task', {}).get('title', task_name)
                status = data.get('task', {}).get('status', 'Unknown')
                
                print(f"   üìÑ {task_title}")
                
                if args.detailed:
                    completion = data.get('task', {}).get('completion', 'Unknown')
                    print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"      ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {completion}")
                    
                    objectives = data.get('task', {}).get('objectives', [])
                    if objectives:
                        completed_count = sum(1 for obj in objectives if obj.startswith('‚úÖ'))
                        print(f"      üéØ –¶–µ–ª–∏: {completed_count}/{len(objectives)}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {task_file.name}: {e}")
    
    def _show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É"""
        active_count = 1 if (self.tasks_path / "active.json").exists() else 0
        
        completed_path = self.tasks_path / "completed"
        completed_count = len(list(completed_path.glob("*.json"))) if completed_path.exists() else 0
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê:")
        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_count}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {completed_count}")
        print(f"   üìÅ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {active_count + completed_count}")
        
        print(f"\nüí° –ö–æ–º–∞–Ω–¥—ã:")
        print(f"   ./slc list --detailed - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print(f"   ./slc list --status completed - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
        print(f"   ./slc list --status all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏") 