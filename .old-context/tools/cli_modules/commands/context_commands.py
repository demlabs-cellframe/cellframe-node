#!/usr/bin/env python3
"""
Context Commands - –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –°–õ–ö

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import json
import sys
from pathlib import Path
from typing import List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from tools.cli_modules.common.base_command import BaseCommand, ContextAwareCommand
from tools.cli_modules.core.unified_context_engine import (
    UnifiedContextEngine, ContextLoadRequest, ContextLoadingStrategy
)


class LoadContextCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    name = "load-context"
    description = "üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
        self.engine = UnifiedContextEngine(base_path) if UnifiedContextEngine else None
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "query",
            help="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        parser.add_argument(
            "--strategy", "-s",
            choices=["auto", "pattern", "manual", "full"],
            default="auto",
            help="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)"
        )
        
        parser.add_argument(
            "--max-modules", "-m",
            type=int,
            default=10,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)"
        )
        
        parser.add_argument(
            "--no-core",
            action="store_true",
            help="–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å core —Ñ–∞–π–ª—ã (manifest, standards, project)"
        )
        
        parser.add_argument(
            "--no-tasks",
            action="store_true", 
            help="–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        )
        
        parser.add_argument(
            "--format", "-f",
            choices=["content", "copy", "json", "list"],
            default="content",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ('content' - –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ò–ò, 'copy' - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)"
        )
        
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"
        )
        
        parser.add_argument(
            "--save-result",
            help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å)"
        )
    
    def validate_args(self, args) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        if not args.query.strip():
            print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        
        if not self.engine:
            print("‚ùå –û—à–∏–±–∫–∞: Unified Context Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        return True
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            print(f"üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è: '{args.query}'")
            print("=" * 60)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            strategy_mapping = {
                "auto": ContextLoadingStrategy.AUTO_INTELLIGENT,
                "pattern": ContextLoadingStrategy.PATTERN_BASED,
                "manual": ContextLoadingStrategy.MANUAL_SELECTION,
                "full": ContextLoadingStrategy.FULL_CONTEXT
            }
            
            request = ContextLoadRequest(
                user_query=args.query,
                strategy=strategy_mapping[args.strategy],
                include_core=not args.no_core,
                include_tasks=not args.no_tasks,
                max_modules=args.max_modules,
                verbose=args.verbose
            )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            result = self.engine.load_context(request)
            
            if not result.success:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result.error_message}")
                return 1
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if args.format == "content":
                self._output_content_format(result, args.verbose)
            elif args.format == "copy":
                self._output_copy_format(result, args.verbose)
            elif args.format == "json":
                self._output_json(result)
            elif args.format == "list":
                self._output_list(result)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if args.save_result:
                self._save_result(result, args.save_result)
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            if args.verbose:
                import traceback
                traceback.print_exc()
            return 1
    
    def _output_json(self, result):
        """–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        output = {
            "loaded_files": result.loaded_files,
            "confidence_score": result.confidence_score,
            "strategy_used": result.strategy_used.value,
            "ai_recommendations": result.ai_recommendations,
            "execution_time": result.execution_time,
            "success": result.success
        }
        print(json.dumps(output, indent=2, ensure_ascii=False))
    
    def _output_list(self, result):
        """–í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        for file_path in result.loaded_files:
            print(file_path)
    
    def _output_content_format(self, result, verbose: bool = False):
        """–í—ã–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ò–ò"""
        if verbose:
            print(f"üéØ Confidence Score: {result.confidence_score:.2f}")
            print(f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.execution_time:.3f}—Å") 
            print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used.value}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.loaded_files)}")
            print("\n" + "=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        formatted_context = self.engine.get_formatted_context(
            result.loaded_files, 
            format_type="full"
        )
        
        print(formatted_context)
        
        if verbose and result.ai_recommendations:
            print(f"\nü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(result.ai_recommendations)}):")
            for i, rec in enumerate(result.ai_recommendations[:3], 1):
                score = rec.get('final_score', 0)
                path = rec.get('template_path', 'unknown')
                print(f"   {i}. {path} (score: {score:.2f})")
        
        if verbose and result.fallback_suggestions:
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in result.fallback_suggestions:
                print(f"   ‚Ä¢ {suggestion}")
    
    def _output_copy_format(self, result, verbose: bool = False):
        """–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ—Ç–æ–≤–æ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç —Å –ò–ò"""
        print("üìã –ì–û–¢–û–í–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò:")
        print("-" * 40)
        
        if verbose:
            print(f"üéØ Confidence Score: {result.confidence_score:.2f}")
            print(f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.execution_time:.3f}—Å")
            print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used.value}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.loaded_files)}")
            print()
        
        print("üì• –°–ö–û–ü–ò–†–£–ô–¢–ï –ò –í–°–¢–ê–í–¨–¢–ï –í –ß–ê–¢ –° –ò–ò:")
        print("=" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        categories = {
            "üè† Core —Å–∏—Å—Ç–µ–º–∞": [],
            "üìö –ú–æ–¥—É–ª–∏": [],
            "üìã –ó–∞–¥–∞—á–∏": [],
            "üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": []
        }
        
        for file_path in result.loaded_files:
            if file_path.startswith("core/"):
                categories["üè† Core —Å–∏—Å—Ç–µ–º–∞"].append(file_path)
            elif file_path.startswith("modules/"):
                categories["üìö –ú–æ–¥—É–ª–∏"].append(file_path)
            elif file_path.startswith("tasks/"):
                categories["üìã –ó–∞–¥–∞—á–∏"].append(file_path)
            else:
                categories["üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"].append(file_path)
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, files in categories.items():
            if files:
                print(f"\n{category}:")
                for file_path in files:
                    print(f"cat {file_path}")
        
        print("\n" + "=" * 50)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(result.loaded_files)} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.ai_recommendations and verbose:
            print(f"\nü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(result.ai_recommendations)}):")
            for i, rec in enumerate(result.ai_recommendations[:3], 1):
                score = rec.get('final_score', 0)
                path = rec.get('template_path', 'unknown')
                print(f"   {i}. {path} (score: {score:.2f})")
        
        # Fallback –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.fallback_suggestions and verbose:
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in result.fallback_suggestions:
                print(f"   ‚Ä¢ {suggestion}")
    
    def _save_result(self, result, file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª"""
        try:
            output_data = {
                "timestamp": "2025-01-15T21:30:00Z",
                "loaded_files": result.loaded_files,
                "confidence_score": result.confidence_score,
                "strategy_used": result.strategy_used.value,
                "ai_recommendations": result.ai_recommendations,
                "fallback_suggestions": result.fallback_suggestions,
                "execution_time": result.execution_time,
                "success": result.success
            }
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


class AnalyzeContextCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    @property
    def name(self) -> str:
        return "analyze-context"
    
    @property
    def description(self) -> str:
        return "üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--current-files",
            nargs="+",
            help="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        parser.add_argument(
            "--suggest-improvements",
            action="store_true",
            help="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        parser.add_argument(
            "--depth",
            choices=["basic", "detailed", "comprehensive"],
            default="detailed",
            help="–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö")
        print("=" * 30)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        analysis_result = self._analyze_current_context(args)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(analysis_result['issues'])}")
        print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {len(analysis_result['improvements'])}")
        print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis_result['files_analyzed']}")
        
        if analysis_result['issues']:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in analysis_result['issues']:
                print(f"   ‚Ä¢ {issue}")
        
        if analysis_result['improvements']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            for improvement in analysis_result['improvements']:
                print(f"   ‚Ä¢ {improvement}")
        
        # JSON –≤—ã–≤–æ–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.output_json_context(analysis_result)
        
        return 0
    
    def _analyze_current_context(self, args) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        issues = []
        improvements = []
        files_analyzed = 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            core_files = ["manifest.json", "modules/core/project.json", "modules/core/standards.json"]
            missing_core = []
            
            for file_path in core_files:
                full_path = Path(self.base_path) / file_path
                if not full_path.exists():
                    missing_core.append(file_path)
                else:
                    files_analyzed += 1
            
            if missing_core:
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_core)}")
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            tasks_path = Path(self.base_path) / "tasks" / "active.json"
            if tasks_path.exists():
                files_analyzed += 1
                try:
                    with open(tasks_path, 'r', encoding='utf-8') as f:
                        tasks_data = json.load(f)
                    
                    if tasks_data.get('completion', '0%') == '0%':
                        improvements.append("–ï—Å—Ç—å –Ω–µ–Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                    
                    if 'current_focus' in tasks_data:
                        improvements.append("–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ: " + str(tasks_data['current_focus'].get('title', 'N/A')))
                        
                except json.JSONDecodeError:
                    issues.append("–§–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            
            # –ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
            modules_path = Path(self.base_path) / "modules"
            if modules_path.exists():
                template_count = len(list(modules_path.rglob("*.json")))
                files_analyzed += template_count
                
                if template_count < 20:
                    improvements.append("–ú–∞–ª–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π")
                elif template_count > 50:
                    improvements.append("–ú–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                else:
                    improvements.append("–•–æ—Ä–æ—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI
            cli_path = Path(self.base_path) / ".context" / "tools" / "scripts" / "slc_cli.py"
            if cli_path.exists():
                files_analyzed += 1
                improvements.append("CLI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ './slc help' –¥–ª—è –∫–æ–º–∞–Ω–¥")
            else:
                issues.append("CLI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        recommendations = []
        if not issues:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É")
            recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ '—Å–ª–∫ –ø–æ–¥—É–º–∞–π [–≤–∞—à–∞ –∑–∞–¥–∞—á–∞]' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é '—Å–ª–∫ validate --fix' –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            if len(issues) > 3:
                recommendations.append("–ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ '—Å–ª–∫ optimize' –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        next_commands = ["validate", "status", "help"]
        if not issues:
            next_commands = ["intelligent-recommend", "templates", "list"]
        
        return {
            "command": "analyze-context",
            "status": "completed",
            "issues": issues,
            "improvements": improvements,
            "files_analyzed": files_analyzed,
            "context_health": "healthy" if not issues else "needs_attention",
            "ai_recommendations": recommendations,
            "next_commands": next_commands,
            "suggested_files_to_load": [
                "manifest.json",
                "modules/core/project.json", 
                "tasks/active.json"
            ]
        }


class ClearContextCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    name = "clear-context"
    description = "üßπ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--confirm",
            action="store_true",
            help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        if not args.confirm:
            response = input("‚ö†Ô∏è  –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                return 0
        
        print("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
        return 0 