#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è Smart Layered Context CLI
–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-25
"""

import os
import json
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import argparse

from tools.cli_modules.common.base_command import BaseCommand
from tools.cli_modules.common.context_output import create_reflection_context, ContextOutputManager


class ReflectionCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = Path(base_path)
        self.tasks_dir = self.base_path / 'tasks'
        self.reflection_log = self.base_path / '.slc_reflection_log.json'
        
    @property
    def name(self) -> str:
        return "reflection"
    
    @property
    def description(self) -> str:
        return "üß† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –°–õ–ö"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--auto-start", 
            action="store_true",
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )
        parser.add_argument(
            "--days-back", 
            type=int, 
            default=7,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)"
        )
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"
        )
        parser.add_argument(
            "--deep",
            action="store_true", 
            help="–ì–ª—É–±–æ–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∏–π"
        )
        parser.add_argument(
            "--json-context",
            action="store_true",
            help="–í—ã–≤–µ—Å—Ç–∏ JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞"
        )
        parser.add_argument(
            "--load-content",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ JSON –≤—ã–≤–æ–¥"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        print("üß† –ó–ê–ü–£–°–ö –†–ï–ñ–ò–ú–ê –†–ï–§–õ–ï–ö–°–ò–ò –ò –°–ê–ú–û–†–ê–ó–í–ò–¢–ò–Ø –°–õ–ö")
        print("=" * 60)
        
        try:
            # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = self._analyze_current_state(args.verbose)
            
            # 2. –ü–æ–∏—Å–∫ –Ω–µ–æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            unreflected_tasks = self._find_unreflected_tasks(args.days_back, args.verbose)
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            reflection_plan = self._create_reflection_plan(unreflected_tasks, current_state, args.verbose)
            
            # 4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            if not args.auto_start:
                if not self._confirm_reflection_start(reflection_plan):
                    print("‚ùå –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return 1
            
            # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            reflection_results = self._execute_reflection(reflection_plan, args.deep, args.verbose)
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._save_reflection_results(reflection_results, args.verbose)
            
            # 7. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            self._switch_to_reflection_context(args.verbose)
            
            print("\nüéâ –†–ï–§–õ–ï–ö–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(unreflected_tasks)}")
            print(f"üß† –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Å–∞–π—Ç–æ–≤: {len(reflection_results.get('insights', []))}")
            print("üöÄ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ")
            
            # –í—ã–≤–æ–¥–∏–º JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
            if args.json_context:
                context_output = create_reflection_context(reflection_results, str(self.base_path))
                if args.load_content:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
                    manager = ContextOutputManager(str(self.base_path))
                    context_output["context_data"]["files_content"] = manager._load_files_content(
                        context_output["context_data"]["files_to_load"]
                    )
                
                manager = ContextOutputManager(str(self.base_path))
                manager.print_context_output(context_output)
            
            return 0
            
        except Exception as e:
            self.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return 1
    
    def _analyze_current_state(self, verbose: bool) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if verbose:
            print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        state = {
            'timestamp': time.time(),
            'active_tasks': self._get_active_tasks(),
            'completed_tasks': self._get_completed_tasks(),
            'system_metrics': self._get_system_metrics(),
            'last_reflection': self._get_last_reflection_date()
        }
        
        if verbose:
            print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(state['active_tasks'])}")
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(state['completed_tasks'])}")
            print(f"   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è: {state['last_reflection'] or '–Ω–∏–∫–æ–≥–¥–∞'}")
        
        return state
    
    def _find_unreflected_tasks(self, days_back: int, verbose: bool) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –Ω–µ–æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if verbose:
            print(f"üîé –ü–æ–∏—Å–∫ –Ω–µ–æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")
        
        unreflected = []
        cutoff_date = datetime.now() - timedelta(days=days_back)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        reflection_log = self._load_reflection_log()
        reflected_tasks = set(reflection_log.get('reflected_tasks', []))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á
        if self.tasks_dir.exists():
            for task_file in self.tasks_dir.rglob('*.json'):
                try:
                    with open(task_file, 'r', encoding='utf-8') as f:
                        task_data = json.load(f)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ
                    if self._is_task_recently_completed(task_data, cutoff_date):
                        task_id = str(task_file.relative_to(self.tasks_dir))
                        
                        if task_id not in reflected_tasks:
                            task_info = {
                                'id': task_id,
                                'file': str(task_file),
                                'data': task_data,
                                'completion_date': self._get_task_completion_date(task_data)
                            }
                            unreflected.append(task_info)
                            
                except (json.JSONDecodeError, IOError) as e:
                    if verbose:
                        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {task_file}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        unreflected.sort(key=lambda x: x.get('completion_date', ''), reverse=True)
        
        if verbose:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(unreflected)}")
            for task in unreflected[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                task_name = task['data'].get('project', task['id'])
                print(f"      ‚Ä¢ {task_name}")
            if len(unreflected) > 3:
                print(f"      ... –∏ –µ—â–µ {len(unreflected) - 3}")
        
        return unreflected
    
    def _create_reflection_plan(self, unreflected_tasks: List[Dict], current_state: Dict, verbose: bool) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        
        plan = {
            'timestamp': time.time(),
            'tasks_to_reflect': unreflected_tasks,
            'reflection_areas': [],
            'questions': [],
            'improvement_opportunities': []
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        if unreflected_tasks:
            plan['reflection_areas'].extend([
                '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á',
                '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –º–µ—Ç–æ–¥—ã',
                '–í–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è',
                '–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏'
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        plan['questions'].extend([
            '–ß—Ç–æ –ø—Ä–æ—à–ª–æ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—Ä–æ—à–æ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö?',
            '–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤–æ–∑–Ω–∏–∫–∞–ª–∏?',
            '–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã?',
            '–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á?',
            '–ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞ –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å?'
        ])
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        if len(unreflected_tasks) > 0:
            plan['improvement_opportunities'].extend([
                '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
                '–£–ª—É—á—à–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                '–†–∞–∑–≤–∏—Ç–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
                '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á'
            ])
        
        if verbose:
            print(f"   ‚úÖ –û–±–ª–∞—Å—Ç–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {len(plan['reflection_areas'])}")
            print(f"   ‚úÖ –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(plan['questions'])}")
            print(f"   ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è: {len(plan['improvement_opportunities'])}")
        
        return plan
    
    def _confirm_reflection_start(self, plan: Dict) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        print("\nüìã –ü–õ–ê–ù –†–ï–§–õ–ï–ö–°–ò–ò:")
        print(f"üéØ –ó–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(plan['tasks_to_reflect'])}")
        print(f"üîç –û–±–ª–∞—Å—Ç–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {len(plan['reflection_areas'])}")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(plan['questions'])}")
        
        if plan['tasks_to_reflect']:
            print("\nüìÇ –ó–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:")
            for i, task in enumerate(plan['tasks_to_reflect'][:5], 1):
                task_name = task['data'].get('project', task['id'])
                print(f"   {i}. {task_name}")
            if len(plan['tasks_to_reflect']) > 5:
                print(f"   ... –∏ –µ—â–µ {len(plan['tasks_to_reflect']) - 5}")
        
        try:
            response = input("\nü§î –ù–∞—á–∞—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é? (y/n): ").lower().strip()
            return response in ['y', 'yes', '–¥', '–¥–∞']
        except (EOFError, KeyboardInterrupt):
            return False
    
    def _execute_reflection(self, plan: Dict, deep: bool, verbose: bool) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        
        results = {
            'timestamp': time.time(),
            'insights': [],
            'lessons_learned': [],
            'improvement_actions': [],
            'patterns': [],
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
        for task in plan['tasks_to_reflect']:
            task_insights = self._reflect_on_task(task, deep, verbose)
            results['insights'].extend(task_insights)
        
        # –ò—â–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if deep:
            patterns = self._identify_patterns(plan['tasks_to_reflect'], verbose)
            results['patterns'].extend(patterns)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_recommendations(results, verbose)
        results['recommendations'].extend(recommendations)
        
        if verbose:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Å–∞–π—Ç–æ–≤: {len(results['insights'])}")
            print(f"   ‚úÖ –í—ã—è–≤–ª–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(results['patterns'])}")
            print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(results['recommendations'])}")
        
        return results
    
    def _reflect_on_task(self, task: Dict, deep: bool, verbose: bool) -> List[Dict[str, Any]]:
        """–†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        insights = []
        task_data = task['data']
        task_name = task_data.get('project', task['id'])
        
        if verbose:
            print(f"   üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏: {task_name}")
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        insight = {
            'task_id': task['id'],
            'task_name': task_name,
            'completion_date': task.get('completion_date', ''),
            'type': 'task_analysis',
            'observations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if 'status' in task_data:
            insight['observations'].append(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data['status']}")
        
        if 'progress' in task_data:
            insight['observations'].append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {task_data['progress']}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–∏
        if 'version' in task_data:
            insight['observations'].append(f"–í–µ—Ä—Å–∏—è: {task_data['version']}")
        
        insights.append(insight)
        return insights
    
    def _identify_patterns(self, tasks: List[Dict], verbose: bool) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
        if verbose:
            print("   üîç –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        patterns = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: —Ç–∏–ø—ã –∑–∞–¥–∞—á
        task_types = {}
        for task in tasks:
            task_type = task['data'].get('domain', 'unknown')
            task_types[task_type] = task_types.get(task_type, 0) + 1
        
        if task_types:
            patterns.append({
                'type': 'task_types',
                'description': '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á',
                'data': task_types
            })
        
        return patterns
    
    def _generate_recommendations(self, results: Dict, verbose: bool) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("   üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
        recommendations.append({
            'category': 'process_improvement',
            'title': '–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è',
            'description': '–ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∫–∞–∂–¥—ã–µ 3-7 –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏',
            'priority': 'high',
            'action': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏'
        })
        
        return recommendations
    
    def _save_reflection_results(self, results: Dict, verbose: bool):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        reflection_log = self._load_reflection_log()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if 'sessions' not in reflection_log:
            reflection_log['sessions'] = []
        
        session = {
            'timestamp': results['timestamp'],
            'insights_count': len(results['insights']),
            'patterns_count': len(results['patterns']),
            'recommendations_count': len(results['recommendations']),
            'results': results
        }
        
        reflection_log['sessions'].append(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if 'reflected_tasks' not in reflection_log:
            reflection_log['reflected_tasks'] = []
        
        for insight in results['insights']:
            if insight.get('task_id'):
                if insight['task_id'] not in reflection_log['reflected_tasks']:
                    reflection_log['reflected_tasks'].append(insight['task_id'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        try:
            with open(self.reflection_log, 'w', encoding='utf-8') as f:
                json.dump(reflection_log, f, ensure_ascii=False, indent=2, default=str)
            
            if verbose:
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.reflection_log}")
                
        except IOError as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def _switch_to_reflection_context(self, verbose: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
        if verbose:
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é...")
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª slc)
            root_path = self.base_path.parent  # .context -> smart_layered_context
            slc_path = root_path / 'slc'
            
            if slc_path.exists():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —á–µ—Ä–µ–∑ CLI
                import subprocess
                result = subprocess.run(
                    [str(slc_path), 'load-context', 'reflection_system'],
                    capture_output=True,
                    text=True,
                    cwd=str(root_path)
                )
                
                if result.returncode == 0:
                    if verbose:
                        print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
                else:
                    if verbose:
                        print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
            else:
                if verbose:
                    print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ñ–∞–π–ª slc –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    
        except Exception as e:
            if verbose:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                print("   ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _get_active_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        active_tasks = []
        active_file = self.tasks_dir / 'active.json'
        
        if active_file.exists():
            try:
                with open(active_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, dict) and 'tasks' in data:
                        active_tasks = data['tasks']
                    elif isinstance(data, list):
                        active_tasks = data
            except (json.JSONDecodeError, IOError):
                pass
        
        return active_tasks
    
    def _get_completed_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        completed = []
        
        if self.tasks_dir.exists():
            for task_file in self.tasks_dir.rglob('*.json'):
                if task_file.name == 'active.json':
                    continue
                    
                try:
                    with open(task_file, 'r', encoding='utf-8') as f:
                        task_data = json.load(f)
                        
                    if self._is_task_completed(task_data):
                        completed.append(task_data)
                        
                except (json.JSONDecodeError, IOError):
                    pass
        
        return completed
    
    def _get_system_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        modules_path = self.base_path / '.context' / 'modules'
        templates_count = 0
        
        if modules_path.exists():
            templates_count = len(list(modules_path.rglob('*.json')))
        
        return {
            'templates_count': templates_count,
            'cli_commands': 24,  # –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
            'disk_usage': self._get_directory_size(self.base_path)
        }
    
    def _get_last_reflection_date(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        reflection_log = self._load_reflection_log()
        sessions = reflection_log.get('sessions', [])
        
        if sessions:
            last_session = max(sessions, key=lambda x: x.get('timestamp', 0))
            timestamp = last_session.get('timestamp', 0)
            return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
        
        return None
    
    def _load_reflection_log(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if self.reflection_log.exists():
            try:
                with open(self.reflection_log, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, IOError):
                pass
        
        return {
            'version': '1.0',
            'created': time.time(),
            'reflected_tasks': [],
            'sessions': []
        }
    
    def _is_task_recently_completed(self, task_data: Dict, cutoff_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        completion_date = self._get_task_completion_date(task_data)
        if completion_date:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                formats = [
                    '%Y-%m-%d %H:%M:%S',
                    '%Y-%m-%d',
                    '%Y-%m-%dT%H:%M:%S',
                    '%Y-%m-%dT%H:%M:%SZ',
                    '%Y-%m-%dT%H:%M:%S.%f'
                ]
                
                for fmt in formats:
                    try:
                        task_datetime = datetime.strptime(completion_date, fmt)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ
                        is_recent = task_datetime >= cutoff_date
                        if is_recent:
                            return True
                    except ValueError:
                        continue
                        
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, —Å—á–∏—Ç–∞–µ–º –∑–∞–¥–∞—á—É –Ω–µ–¥–∞–≤–Ω–µ–π
                # –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                return self._is_task_completed(task_data)
                        
            except Exception:
                pass
        return False
    
    def _is_task_completed(self, task_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞"""
        status = task_data.get('status', '').lower()
        progress = task_data.get('progress', 0)
        completion = task_data.get('completion', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        status_completed = status in ['completed', 'done', 'finished']
        progress_completed = progress >= 100
        completion_completed = '100%' in str(completion)
        has_completion_date = self._get_task_completion_date(task_data) is not None
        
        return status_completed or progress_completed or completion_completed or has_completion_date
    
    def _get_task_completion_date(self, task_data: Dict) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è —Å –¥–∞—Ç–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for field in ['completed_date', 'finished_date', 'updated', 'last_modified']:
            if field in task_data:
                return str(task_data[field])
        
        return None
    
    def _get_directory_size(self, path: Path) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        total_size = 0
        try:
            for file_path in path.rglob('*'):
                if file_path.is_file():
                    total_size += file_path.stat().st_size
        except (OSError, PermissionError):
            pass
        return total_size 