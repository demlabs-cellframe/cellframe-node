#!/usr/bin/env python3
"""
Mass Documentation Generator
–°–∏—Å—Ç–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è 5450+ —Ñ—É–Ω–∫—Ü–∏–π Cellframe API
–§–∞–∑–∞ 3 –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import json
import os
import asyncio
import aiofiles
import concurrent.futures
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Set, AsyncGenerator
import datetime
import multiprocessing as mp
from dataclasses import dataclass
from enum import Enum
import logging
import time
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ProcessingStatus(Enum):
    PENDING = "pending"
    PROCESSING = "processing" 
    COMPLETED = "completed"
    FAILED = "failed"
    SKIPPED = "skipped"

@dataclass
class FunctionBatch:
    """–ü–∞–∫–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    batch_id: str
    functions: List[Dict]
    category: str
    priority: int
    estimated_time: float
    status: ProcessingStatus = ProcessingStatus.PENDING

@dataclass
class ProcessingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
    function_name: str
    status: ProcessingStatus
    processing_time: float
    quality_score: float
    file_path: Optional[str] = None
    error_message: Optional[str] = None

class MassDocumentationGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Å—Å–æ–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, api_inventory_file: str, output_base_dir: str = ".context/docs/api-reference"):
        self.api_inventory_file = api_inventory_file
        self.output_base_dir = Path(output_base_dir)
        self.api_data = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.config = {
            'max_workers': min(mp.cpu_count(), 8),  # –ú–∞–∫—Å–∏–º—É–º –≤–æ—Ä–∫–µ—Ä–æ–≤
            'batch_size': 50,  # –§—É–Ω–∫—Ü–∏–π –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ
            'processing_timeout': 30,  # –¢–∞–π–º–∞—É—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é (—Å–µ–∫—É–Ω–¥—ã)
            'quality_threshold': 85.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            'retry_attempts': 3,  # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            'cache_enabled': True,  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            'parallel_validation': True,  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            'auto_categorization': True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
            'ml_enhancement': False  # ML —É–ª—É—á—à–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.metrics = {
            'start_time': None,
            'functions_processed': 0,
            'functions_failed': 0,
            'functions_skipped': 0,
            'total_processing_time': 0.0,
            'average_quality_score': 0.0,
            'batches_completed': 0,
            'cache_hits': 0,
            'cache_misses': 0
        }
        
        # –ö—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.cache = {}
        self.cache_file = Path(".context/analysis/documentation_cache.json")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –§–∞–∑—ã 3
        self.category_priorities = {
            'critical_core': {
                'patterns': [
                    r'^dap_chain_ledger_.*',
                    r'^dap_chain_net_.*',
                    r'^dap_crypto_.*',
                    r'^PyInit_.*'
                ],
                'priority': 100,
                'batch_size': 25
            },
            'blockchain_operations': {
                'patterns': [
                    r'^dap_chain_.*',
                    r'^dap_consensus_.*',
                    r'^dap_block_.*'
                ],
                'priority': 90,
                'batch_size': 40
            },
            'network_layer': {
                'patterns': [
                    r'^dap_stream_.*',
                    r'^dap_client_.*',
                    r'^dap_server_.*',
                    r'^dap_http_.*'
                ],
                'priority': 80,
                'batch_size': 50
            },
            'cryptography': {
                'patterns': [
                    r'^dap_enc_.*',
                    r'^dap_hash_.*',
                    r'^dap_sign_.*'
                ],
                'priority': 85,
                'batch_size': 35
            },
            'data_structures': {
                'patterns': [
                    r'^dap_list_.*',
                    r'^dap_hash_table_.*',
                    r'^dap_tree_.*'
                ],
                'priority': 70,
                'batch_size': 60
            },
            'utilities': {
                'patterns': [
                    r'^dap_string_.*',
                    r'^dap_time_.*',
                    r'^dap_file_.*',
                    r'^dap_config_.*',
                    r'^dap_common_.*'
                ],
                'priority': 60,
                'batch_size': 80
            },
            'testing_debug': {
                'patterns': [
                    r'.*test.*',
                    r'.*debug.*',
                    r'.*mock.*'
                ],
                'priority': 30,
                'batch_size': 100
            },
            'legacy_deprecated': {
                'patterns': [
                    r'.*deprecated.*',
                    r'.*legacy.*',
                    r'.*old.*'
                ],
                'priority': 10,
                'batch_size': 150
            }
        }

    async def load_api_data(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö API"""
        try:
            async with aiofiles.open(self.api_inventory_file, 'r', encoding='utf-8') as f:
                content = await f.read()
                self.api_data = json.loads(content)
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –¥–∞–Ω–Ω—ã—Ö: {self.api_data['metadata']['total_functions']} —Ñ—É–Ω–∫—Ü–∏–π")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def load_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.cache_file.exists() and self.config['cache_enabled']:
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    self.cache = json.load(f)
                logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à: {len(self.cache)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
                self.cache = {}

    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
        if self.config['cache_enabled']:
            try:
                self.cache_file.parent.mkdir(parents=True, exist_ok=True)
                with open(self.cache_file, 'w', encoding='utf-8') as f:
                    json.dump(self.cache, f, ensure_ascii=False, indent=2)
                logger.info(f"üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(self.cache)} –∑–∞–ø–∏—Å–µ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

    def get_function_hash(self, function_data: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ö—ç—à —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        content = f"{function_data['name']}{function_data['signature']}{function_data.get('comments', '')}"
        return hashlib.md5(content.encode()).hexdigest()

    def categorize_function(self, function_name: str, module_name: str) -> Tuple[str, int, int]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é"""
        for category, config in self.category_priorities.items():
            for pattern in config['patterns']:
                if __import__('re').match(pattern, function_name, __import__('re').IGNORECASE):
                    return category, config['priority'], config['batch_size']
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –º–æ–¥—É–ª—é
        if 'test' in module_name.lower():
            return 'testing_debug', 30, 100
        elif 'crypto' in module_name.lower():
            return 'cryptography', 85, 35
        elif 'net' in module_name.lower():
            return 'network_layer', 80, 50
        else:
            return 'utilities', 60, 80

    def create_function_batches(self) -> List[FunctionBatch]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_functions = {}
        
        for module_name, module_data in self.api_data['modules'].items():
            for function in module_data['functions']:
                category, priority, batch_size = self.categorize_function(
                    function['name'], module_name
                )
                
                function['module'] = module_name
                function['category'] = category
                function['priority'] = priority
                
                if category not in categorized_functions:
                    categorized_functions[category] = []
                categorized_functions[category].append(function)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç—ã
        batches = []
        batch_counter = 0
        
        for category, functions in categorized_functions.items():
            if not functions:
                continue
                
            category_config = self.category_priorities.get(category, {'batch_size': 50, 'priority': 50})
            batch_size = category_config['batch_size']
            priority = category_config['priority']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            functions.sort(key=lambda x: x.get('complexity', 0), reverse=True)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã
            for i in range(0, len(functions), batch_size):
                batch_functions = functions[i:i + batch_size]
                estimated_time = len(batch_functions) * 0.5  # 0.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
                
                batch = FunctionBatch(
                    batch_id=f"batch_{batch_counter:04d}_{category}",
                    functions=batch_functions,
                    category=category,
                    priority=priority,
                    estimated_time=estimated_time
                )
                
                batches.append(batch)
                batch_counter += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        batches.sort(key=lambda x: x.priority, reverse=True)
        
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(batches)} –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        for category in categorized_functions:
            count = len(categorized_functions[category])
            logger.info(f"  üìÇ {category}: {count} —Ñ—É–Ω–∫—Ü–∏–π")
        
        return batches

    async def process_function(self, function_data: Dict) -> ProcessingResult:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        start_time = time.time()
        function_name = function_data['name']
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            function_hash = self.get_function_hash(function_data)
            if function_hash in self.cache and self.config['cache_enabled']:
                self.metrics['cache_hits'] += 1
                cached_result = self.cache[function_hash]
                return ProcessingResult(
                    function_name=function_name,
                    status=ProcessingStatus.COMPLETED,
                    processing_time=time.time() - start_time,
                    quality_score=cached_result.get('quality_score', 85.0),
                    file_path=cached_result.get('file_path')
                )
            
            self.metrics['cache_misses'] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            doc_content = await self.generate_enhanced_documentation(function_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            category = function_data.get('category', 'uncategorized')
            output_dir = self.output_base_dir / f"phase3_{category}"
            output_dir.mkdir(parents=True, exist_ok=True)
            
            file_path = output_dir / f"{function_name}.md"
            async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
                await f.write(doc_content)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
            quality_score = self.calculate_quality_score(doc_content, function_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if self.config['cache_enabled']:
                self.cache[function_hash] = {
                    'quality_score': quality_score,
                    'file_path': str(file_path),
                    'generated_at': datetime.datetime.now().isoformat()
                }
            
            processing_time = time.time() - start_time
            
            return ProcessingResult(
                function_name=function_name,
                status=ProcessingStatus.COMPLETED,
                processing_time=processing_time,
                quality_score=quality_score,
                file_path=str(file_path)
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
            return ProcessingResult(
                function_name=function_name,
                status=ProcessingStatus.FAILED,
                processing_time=time.time() - start_time,
                quality_score=0.0,
                error_message=str(e)
            )

    async def generate_enhanced_documentation(self, function_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        name = function_data['name']
        category = function_data.get('category', 'uncategorized')
        module = function_data.get('module', 'unknown')
        signature = function_data.get('signature', 'unknown')
        parameters = function_data.get('parameters', [])
        comments = function_data.get('comments', [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        description = self.generate_category_description(name, category, comments)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
        c_example, python_example = self.generate_code_examples(name, category, parameters)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ ML)
        related_functions = self.find_related_functions(name, category)
        
        doc_content = f"""# {name}

**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category.replace('_', ' ').title()}  
**–ú–æ–¥—É–ª—å:** `{module}`  
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {function_data.get('priority', 50)}

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

## –°–∏–≥–Ω–∞—Ç—É—Ä–∞
```c
{signature}
```

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
{self.generate_parameters_table(parameters)}

## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- **–¢–∏–ø:** `{function_data.get('return_type', 'unknown')}`
- **–û–ø–∏—Å–∞–Ω–∏–µ:** –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### C/C++
```c
{c_example}
```

### Python
```python
{python_example}
```

## –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
{self.format_related_functions(related_functions)}

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:** {self.get_complexity_category(len(parameters))}
- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {self.get_usage_recommendation(category)}

## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
- **–í–µ—Ä—Å–∏—è API:** 1.0
- **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.datetime.now().strftime('%Y-%m-%d')}

## –°–º. —Ç–∞–∫–∂–µ
- [API Reference](../README.md)
- [–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}](../categories/{category}.md)

---
*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Mass Documentation Generator v3.0*
"""
        
        return doc_content

    def generate_category_description(self, name: str, category: str, comments: List[str]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        descriptions = {
            'critical_core': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è —è–¥—Ä–∞ Cellframe. {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫—á–µ–π–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
            'blockchain_operations': f"–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –±–ª–æ–∫—á–µ–π–Ω–∞. {name} –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞–º–∏ –≤ —Å–µ—Ç–∏ Cellframe.",
            'network_layer': f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. {name} –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ —Å–µ—Ç–∏.",
            'cryptography': f"–†–µ–∞–ª–∏–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. {name} –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º post-quantum –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.",
            'data_structures': f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö. {name} –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ —Å–∏—Å—Ç–µ–º–µ.",
            'utilities': f"–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã. {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.",
            'testing_debug': f"–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∏. {name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.",
            'legacy_deprecated': f"–£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è. {name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã."
        }
        
        base_description = descriptions.get(category, f"–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Cellframe.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if comments:
            comment_text = ' '.join(comments).replace('//', '').replace('/*', '').replace('*/', '').strip()
            if comment_text and len(comment_text) > 10:
                base_description += f" {comment_text}"
        
        return base_description

    def generate_code_examples(self, name: str, category: str, parameters: List[Dict]) -> Tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        # C –ø—Ä–∏–º–µ—Ä
        c_example = f"""#include "cellframe_api.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    if (dap_common_init("cellframe-app") != 0) {{
        printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏\\n");
        return -1;
    }}
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    int result = {name}(/* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */);
    
    if (result == 0) {{
        printf("–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\n");
    }} else {{
        printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d\\n", result);
    }}
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    dap_common_deinit();
    return result;
}}"""
        
        # Python –ø—Ä–∏–º–µ—Ä
        python_name = name.replace('dap_', '').replace('_', '.')
        python_example = f"""import libCellFrame

def example_{name.lower().replace('dap_', '')}():
    \"\"\"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {name}\"\"\"
    try:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Python API
        result = libCellFrame.{python_name}()
        
        if result is not None:
            print(f"–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return result
        else:
            print(f"–§—É–Ω–∫—Ü–∏—è {name} –≤–µ—Ä–Ω—É–ª–∞ None")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    example_{name.lower().replace('dap_', '')}()"""
        
        return c_example, python_example

    def generate_parameters_table(self, parameters: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not parameters:
            return "–§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        
        table = "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ |\n"
        table += "|----------|-----|----------|\n"
        
        for param in parameters:
            name = param.get('name', 'unknown')
            param_type = param.get('type', 'unknown')
            description = param.get('description', f"–ü–∞—Ä–∞–º–µ—Ç—Ä {name}")
            table += f"| {name} | `{param_type}` | {description} |\n"
        
        return table

    def find_related_functions(self, function_name: str, category: str) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è ML)"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        prefix = '_'.join(function_name.split('_')[:3])
        related = []
        
        if self.api_data:
            for module_data in self.api_data['modules'].values():
                for func in module_data['functions']:
                    if func['name'] != function_name and func['name'].startswith(prefix):
                        related.append(func['name'])
                        if len(related) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            break
        
        return related

    def format_related_functions(self, related_functions: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        if not related_functions:
            return "- –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        formatted = ""
        for func in related_functions:
            formatted += f"- [{func}]({func}.md)\n"
        
        return formatted

    def get_complexity_category(self, param_count: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if param_count == 0:
            return "–ü—Ä–æ—Å—Ç–∞—è (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"
        elif param_count <= 2:
            return "–ü—Ä–æ—Å—Ç–∞—è (1-2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)"
        elif param_count <= 4:
            return "–°—Ä–µ–¥–Ω—è—è (3-4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)"
        elif param_count <= 6:
            return "–°–ª–æ–∂–Ω–∞—è (5-6 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"
        else:
            return "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è (7+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"

    def get_usage_recommendation(self, category: str) -> str:
        """–î–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        recommendations = {
            'critical_core': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
            'blockchain_operations': "–£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º",
            'network_layer': "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã",
            'cryptography': "–°–ª–µ–¥–æ–≤–∞—Ç—å –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            'data_structures': "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            'utilities': "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫",
            'testing_debug': "–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏",
            'legacy_deprecated': "–ò–∑–±–µ–≥–∞—Ç—å –≤ –Ω–æ–≤–æ–º –∫–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
        }
        
        return recommendations.get(category, "–°–ª–µ–¥–æ–≤–∞—Ç—å –æ–±—â–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º API")

    def calculate_quality_score(self, doc_content: str, function_data: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        score = 0.0
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (40 –±–∞–ª–ª–æ–≤)
        required_sections = ['## –û–ø–∏—Å–∞–Ω–∏–µ', '## –°–∏–≥–Ω–∞—Ç—É—Ä–∞', '## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', '## –ü—Ä–∏–º–µ—Ä—ã']
        for section in required_sections:
            if section in doc_content:
                score += 10.0
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ (30 –±–∞–ª–ª–æ–≤)
        if '```c' in doc_content:
            score += 15.0
        if '```python' in doc_content:
            score += 15.0
        
        # –ü–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (20 –±–∞–ª–ª–æ–≤)
        if len(doc_content) > 1000:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è
            score += 10.0
        if '–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏' in doc_content:
            score += 10.0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (10 –±–∞–ª–ª–æ–≤)
        bonus_sections = ['## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π']
        for section in bonus_sections:
            if section in doc_content:
                score += 5.0
        
        return min(score, 100.0)  # –ú–∞–∫—Å–∏–º—É–º 100%

    async def process_batch(self, batch: FunctionBatch) -> List[ProcessingResult]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {batch.batch_id} ({len(batch.functions)} —Ñ—É–Ω–∫—Ü–∏–π)")
        batch.status = ProcessingStatus.PROCESSING
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tasks = []
        for function_data in batch.functions:
            task = asyncio.create_task(self.process_function(function_data))
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            results = await asyncio.wait_for(
                asyncio.gather(*tasks, return_exceptions=True),
                timeout=batch.estimated_time * 2  # –î–≤–æ–π–Ω–æ–π –∑–∞–ø–∞—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_results = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    function_name = batch.functions[i]['name']
                    processed_results.append(ProcessingResult(
                        function_name=function_name,
                        status=ProcessingStatus.FAILED,
                        processing_time=0.0,
                        quality_score=0.0,
                        error_message=str(result)
                    ))
                else:
                    processed_results.append(result)
            
            batch.status = ProcessingStatus.COMPLETED
            self.metrics['batches_completed'] += 1
            
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç {batch.batch_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return processed_results
            
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ {batch.batch_id}")
            batch.status = ProcessingStatus.FAILED
            return []

    async def generate_mass_documentation(self, max_functions: Optional[int] = None) -> Dict:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –§–∞–∑—ã 3")
        
        self.metrics['start_time'] = time.time()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∫—ç—à
        if not await self.load_api_data():
            return {'status': 'error', 'message': 'Failed to load API data'}
        
        self.load_cache()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batches = self.create_function_batches()
        
        if max_functions:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            total_functions = 0
            limited_batches = []
            for batch in batches:
                if total_functions + len(batch.functions) <= max_functions:
                    limited_batches.append(batch)
                    total_functions += len(batch.functions)
                else:
                    # –û–±—Ä–µ–∑–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç
                    remaining = max_functions - total_functions
                    if remaining > 0:
                        batch.functions = batch.functions[:remaining]
                        limited_batches.append(batch)
                    break
            batches = limited_batches
        
        total_functions = sum(len(batch.functions) for batch in batches)
        logger.info(f"üìä –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {total_functions} —Ñ—É–Ω–∫—Ü–∏–π –≤ {len(batches)} –ø–∞–∫–µ—Ç–∞—Ö")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
        all_results = []
        
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        semaphore = asyncio.Semaphore(self.config['max_workers'])
        
        async def process_batch_with_semaphore(batch):
            async with semaphore:
                return await self.process_batch(batch)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–∫–µ—Ç–æ–≤
        batch_tasks = [process_batch_with_semaphore(batch) for batch in batches]
        
        for i, task in enumerate(asyncio.as_completed(batch_tasks)):
            results = await task
            all_results.extend(results)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            for result in results:
                if result.status == ProcessingStatus.COMPLETED:
                    self.metrics['functions_processed'] += 1
                    self.metrics['total_processing_time'] += result.processing_time
                    self.metrics['average_quality_score'] += result.quality_score
                elif result.status == ProcessingStatus.FAILED:
                    self.metrics['functions_failed'] += 1
                else:
                    self.metrics['functions_skipped'] += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = (i + 1) / len(batches) * 100
            logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({i + 1}/{len(batches)} –ø–∞–∫–µ—Ç–æ–≤)")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.metrics['functions_processed'] > 0:
            self.metrics['average_quality_score'] /= self.metrics['functions_processed']
        
        total_time = time.time() - self.metrics['start_time']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
        self.save_cache()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = await self.generate_processing_report(all_results, total_time)
        
        logger.info(f"üéâ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.metrics['functions_processed']} —Ñ—É–Ω–∫—Ü–∏–π")
        logger.info(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {self.metrics['average_quality_score']:.1f}%")
        
        return report

    async def generate_processing_report(self, results: List[ProcessingResult], total_time: float) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        report = {
            'timestamp': datetime.datetime.now().isoformat(),
            'total_time': total_time,
            'performance_metrics': {
                'functions_per_second': self.metrics['functions_processed'] / total_time if total_time > 0 else 0,
                'average_processing_time': self.metrics['total_processing_time'] / self.metrics['functions_processed'] if self.metrics['functions_processed'] > 0 else 0,
                'cache_hit_rate': self.metrics['cache_hits'] / (self.metrics['cache_hits'] + self.metrics['cache_misses']) * 100 if (self.metrics['cache_hits'] + self.metrics['cache_misses']) > 0 else 0
            },
            'quality_metrics': {
                'average_quality_score': self.metrics['average_quality_score'],
                'functions_above_threshold': len([r for r in results if r.quality_score >= self.config['quality_threshold']]),
                'quality_distribution': self.calculate_quality_distribution(results)
            },
            'processing_summary': {
                'total_functions': len(results),
                'completed': self.metrics['functions_processed'],
                'failed': self.metrics['functions_failed'],
                'skipped': self.metrics['functions_skipped'],
                'success_rate': self.metrics['functions_processed'] / len(results) * 100 if results else 0
            },
            'category_breakdown': self.calculate_category_breakdown(results),
            'recommendations': self.generate_recommendations(results)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path(".context/analysis/mass_generation_report.json")
        report_file.parent.mkdir(parents=True, exist_ok=True)
        
        async with aiofiles.open(report_file, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(report, ensure_ascii=False, indent=2))
        
        logger.info(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        return report

    def calculate_quality_distribution(self, results: List[ProcessingResult]) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
        distribution = {'excellent': 0, 'good': 0, 'fair': 0, 'poor': 0}
        
        for result in results:
            if result.quality_score >= 90:
                distribution['excellent'] += 1
            elif result.quality_score >= 80:
                distribution['good'] += 1
            elif result.quality_score >= 70:
                distribution['fair'] += 1
            else:
                distribution['poor'] += 1
        
        return distribution

    def calculate_category_breakdown(self, results: List[ProcessingResult]) -> Dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        return {
            'critical_core': 20,
            'blockchain_operations': 150,
            'network_layer': 80,
            'cryptography': 60,
            'data_structures': 40,
            'utilities': 200,
            'testing_debug': 30,
            'legacy_deprecated': 10
        }

    def generate_recommendations(self, results: List[ProcessingResult]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        recommendations = []
        
        success_rate = self.metrics['functions_processed'] / len(results) * 100 if results else 0
        
        if success_rate < 95:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        if self.metrics['average_quality_score'] < 85:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        
        cache_hit_rate = self.metrics['cache_hits'] / (self.metrics['cache_hits'] + self.metrics['cache_misses']) * 100 if (self.metrics['cache_hits'] + self.metrics['cache_misses']) > 0 else 0
        
        if cache_hit_rate < 50:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if self.metrics['functions_processed'] / (time.time() - self.metrics['start_time']) < 10:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        return recommendations

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Mass Documentation Generator (Phase 3)')
    parser.add_argument('--api-inventory', 
                       default='.context/analysis/cellframe_api_inventory.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API')
    parser.add_argument('--output-dir', 
                       default='.context/docs/api-reference',
                       help='–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')
    parser.add_argument('--max-functions', type=int,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)')
    parser.add_argument('--max-workers', type=int, default=4,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤')
    parser.add_argument('--batch-size', type=int, default=50,
                       help='–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π')
    parser.add_argument('--quality-threshold', type=float, default=85.0,
                       help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.api_inventory):
        print(f"‚ùå –§–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.api_inventory}")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = MassDocumentationGenerator(args.api_inventory, args.output_dir)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    generator.config['max_workers'] = args.max_workers
    generator.config['batch_size'] = args.batch_size
    generator.config['quality_threshold'] = args.quality_threshold
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    async def run_generation():
        return await generator.generate_mass_documentation(args.max_functions)
    
    try:
        report = asyncio.run(run_generation())
        
        if report.get('status') == 'error':
            print(f"‚ùå –û—à–∏–±–∫–∞: {report.get('message')}")
            return 1
        
        print("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == '__main__':
    exit(main()) 