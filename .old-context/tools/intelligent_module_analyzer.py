#!/usr/bin/env python3
"""
Intelligent Module Analyzer for Python Cellframe
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π Python Cellframe

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π,
–≤—ã—è–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.
"""

import os
import re
import ast
import json
import inspect
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Any, Optional
from collections import defaultdict, Counter

class IntelligentModuleAnalyzer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ–¥—É–ª–µ–π Python Cellframe"""
    
    def __init__(self, base_path="python-cellframe"):
        self.base_path = Path(base_path)
        self.analysis_results = {}
        self.module_map = {}
        self.dependency_graph = {}
        self.api_patterns = {}
        self.improvement_suggestions = {}
        
    def analyze_all_modules(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        print("üß† –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥—É–ª–µ–π Python Cellframe")
        print("=" * 65)
        
        # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüìÅ –§–∞–∑–∞ 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥—É–ª–µ–π...")
        self.scan_module_structure()
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("\nüîó –§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        self.analyze_dependencies()
        
        # 3. –ê–Ω–∞–ª–∏–∑ API –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        print("\nüîç –§–∞–∑–∞ 3: –ê–Ω–∞–ª–∏–∑ API –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        self.analyze_api_patterns()
        
        # 4. –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print("\nüéØ –§–∞–∑–∞ 4: –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        self.find_missing_functions()
        
        # 5. –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è
        print("\nüí° –§–∞–∑–∞ 5: –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è...")
        self.analyze_improvement_opportunities()
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        print("\nüìä –§–∞–∑–∞ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        self.generate_reports()
        
        print("\n‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return self.analysis_results
    
    def scan_module_structure(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥—É–ª–µ–π"""
        modules = {}
        
        for py_file in self.base_path.rglob("*.c"):
            if self.is_python_binding_file(py_file):
                module_info = self.analyze_c_module(py_file)
                modules[str(py_file.relative_to(self.base_path))] = module_info
        
        for py_file in self.base_path.rglob("*.py"):
            if py_file.name != "__pycache__":
                module_info = self.analyze_python_module(py_file)
                modules[str(py_file.relative_to(self.base_path))] = module_info
        
        self.module_map = modules
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
        
    def is_python_binding_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Python –±–∏–Ω–¥–∏–Ω–≥–æ–º"""
        return (
            "wrapping_" in file_path.name or
            "python" in file_path.name.lower() or
            file_path.parent.name in ["src", "modules"]
        )
    
    def analyze_c_module(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç C –º–æ–¥—É–ª—å —Å Python –±–∏–Ω–¥–∏–Ω–≥–∞–º–∏"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except:
            return {"error": "Cannot read file"}
        
        # –ü–æ–∏—Å–∫ Python API —Ñ—É–Ω–∫—Ü–∏–π
        python_functions = re.findall(r'PyObject\s+\*(\w+)\(PyObject\s+\*[^)]*\)', content)
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
        structures = re.findall(r'typedef\s+struct\s+(\w+)', content)
        
        # –ü–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω–∏–π
        includes = re.findall(r'#include\s+[<"]([^>"]+)[>"]', content)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        lines = content.split('\n')
        complexity_metrics = self.calculate_complexity_metrics(content)
        
        return {
            "type": "c_extension",
            "python_functions": python_functions,
            "function_count": len(python_functions),
            "structures": structures,
            "includes": includes,
            "lines_of_code": len(lines),
            "complexity": complexity_metrics,
            "last_modified": file_path.stat().st_mtime
        }
    
    def analyze_python_module(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python –º–æ–¥—É–ª—å"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
        except:
            return {"error": "Cannot parse Python file"}
        
        # –ê–Ω–∞–ª–∏–∑ AST
        functions = []
        classes = []
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                functions.append({
                    "name": node.name,
                    "args": [arg.arg for arg in node.args.args],
                    "line": node.lineno,
                    "is_public": not node.name.startswith('_')
                })
            elif isinstance(node, ast.ClassDef):
                classes.append({
                    "name": node.name,
                    "line": node.lineno,
                    "methods": [n.name for n in node.body if isinstance(n, ast.FunctionDef)]
                })
            elif isinstance(node, (ast.Import, ast.ImportFrom)):
                if isinstance(node, ast.Import):
                    imports.extend([alias.name for alias in node.names])
                else:
                    imports.append(node.module)
        
        return {
            "type": "python_module",
            "functions": functions,
            "classes": classes,
            "imports": imports,
            "lines_of_code": len(content.split('\n')),
            "last_modified": file_path.stat().st_mtime
        }
    
    def calculate_complexity_metrics(self, content):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        lines = content.split('\n')
        
        # –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        complexity_keywords = ['if', 'else', 'elif', 'for', 'while', 'case', 'default']
        cyclomatic_complexity = sum(
            len(re.findall(rf'\b{keyword}\b', content)) 
            for keyword in complexity_keywords
        )
        
        # –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        max_nesting = 0
        current_nesting = 0
        for line in lines:
            stripped = line.strip()
            if stripped.endswith('{'):
                current_nesting += 1
                max_nesting = max(max_nesting, current_nesting)
            elif stripped.startswith('}'):
                current_nesting = max(0, current_nesting - 1)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π
        function_count = len(re.findall(r'PyObject\s+\*\w+\(', content))
        
        return {
            "cyclomatic_complexity": cyclomatic_complexity,
            "max_nesting_depth": max_nesting,
            "function_count": function_count,
            "avg_function_length": len(lines) // max(function_count, 1)
        }
    
    def analyze_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        dependencies = defaultdict(set)
        
        for module_path, module_info in self.module_map.items():
            if module_info.get("type") == "c_extension":
                # –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω–∏–π –≤ C —Ñ–∞–π–ª–∞—Ö
                includes = module_info.get("includes", [])
                for include in includes:
                    if "dap_" in include or "cellframe" in include:
                        dependencies[module_path].add(include)
            
            elif module_info.get("type") == "python_module":
                # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Python —Ñ–∞–π–ª–∞—Ö
                imports = module_info.get("imports", [])
                for imp in imports:
                    if imp and ("cellframe" in imp.lower() or "dap" in imp.lower()):
                        dependencies[module_path].add(imp)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ lists –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.dependency_graph = {k: list(v) for k, v in dependencies.items()}
        print(f"   üîó –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {sum(len(deps) for deps in dependencies.values())}")
    
    def analyze_api_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã API"""
        patterns = {
            "naming_conventions": defaultdict(int),
            "parameter_patterns": defaultdict(int),
            "return_patterns": defaultdict(int),
            "error_handling_patterns": defaultdict(int)
        }
        
        for module_path, module_info in self.module_map.items():
            if module_info.get("type") == "c_extension":
                functions = module_info.get("python_functions", [])
                
                for func in functions:
                    # –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                    if func.startswith("dap_"):
                        patterns["naming_conventions"]["dap_prefix"] += 1
                    elif func.startswith("python_"):
                        patterns["naming_conventions"]["python_prefix"] += 1
                    else:
                        patterns["naming_conventions"]["no_prefix"] += 1
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    if "_create" in func:
                        patterns["parameter_patterns"]["create_pattern"] += 1
                    elif "_get" in func:
                        patterns["parameter_patterns"]["get_pattern"] += 1
                    elif "_set" in func:
                        patterns["parameter_patterns"]["set_pattern"] += 1
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–µ dict –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.api_patterns = {
            key: dict(value) for key, value in patterns.items()
        }
        print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    
    def find_missing_functions(self):
        """–ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        missing_functions = {}
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        for module_path, module_info in self.module_map.items():
            if module_info.get("type") == "c_extension":
                suggestions = self.suggest_missing_functions_for_module(module_path, module_info)
                if suggestions:
                    missing_functions[module_path] = suggestions
        
        self.missing_functions = missing_functions
        print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {len(missing_functions)}")
    
    def suggest_missing_functions_for_module(self, module_path, module_info):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è"""
        suggestions = []
        existing_functions = module_info.get("python_functions", [])
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ CRUD
        has_create = any("create" in func for func in existing_functions)
        has_get = any("get" in func for func in existing_functions)
        has_set = any("set" in func for func in existing_functions)
        has_delete = any(any(word in func for word in ["delete", "remove", "destroy"]) for func in existing_functions)
        
        if has_create and not has_delete:
            suggestions.append({
                "type": "crud_completion",
                "function": "delete/destroy function",
                "reason": "Has create but missing delete",
                "priority": "medium"
            })
        
        if has_get and not has_set:
            suggestions.append({
                "type": "crud_completion", 
                "function": "setter function",
                "reason": "Has getter but missing setter",
                "priority": "low"
            })
        
        # –ê–Ω–∞–ª–∏–∑ utility —Ñ—É–Ω–∫—Ü–∏–π
        if len(existing_functions) > 5:
            suggestions.append({
                "type": "utility",
                "function": "validation function",
                "reason": "Complex module should have validation",
                "priority": "medium"
            })
            
            suggestions.append({
                "type": "utility",
                "function": "string representation function", 
                "reason": "Should have string/debug representation",
                "priority": "low"
            })
        
        return suggestions
    
    def analyze_improvement_opportunities(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        improvements = {}
        
        for module_path, module_info in self.module_map.items():
            module_improvements = []
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            if module_info.get("type") == "c_extension":
                complexity = module_info.get("complexity", {})
                
                if complexity.get("cyclomatic_complexity", 0) > 20:
                    module_improvements.append({
                        "type": "complexity_reduction",
                        "issue": "High cyclomatic complexity",
                        "suggestion": "Split complex functions into smaller ones",
                        "priority": "high"
                    })
                
                if complexity.get("max_nesting_depth", 0) > 4:
                    module_improvements.append({
                        "type": "readability",
                        "issue": "Deep nesting",
                        "suggestion": "Reduce nesting with early returns or helper functions",
                        "priority": "medium"
                    })
                
                if complexity.get("avg_function_length", 0) > 50:
                    module_improvements.append({
                        "type": "maintainability",
                        "issue": "Long functions",
                        "suggestion": "Break down long functions into smaller ones",
                        "priority": "medium"
                    })
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            functions = module_info.get("python_functions", [])
            if functions:
                inconsistent_naming = self.check_naming_consistency(functions)
                if inconsistent_naming:
                    module_improvements.append({
                        "type": "naming_consistency",
                        "issue": "Inconsistent naming conventions",
                        "suggestion": "Standardize function naming",
                        "priority": "low"
                    })
            
            if module_improvements:
                improvements[module_path] = module_improvements
        
        self.improvement_suggestions = improvements
        print(f"   üí° –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {len(improvements)}")
    
    def check_naming_consistency(self, functions):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        prefixes = [func.split('_')[0] for func in functions if '_' in func]
        if len(set(prefixes)) > len(prefixes) * 0.7:  # –ë–æ–ª–µ–µ 70% —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
            return True
        return False
    
    def generate_reports(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().isoformat()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
        main_report = {
            "analysis_info": {
                "timestamp": timestamp,
                "analyzer_version": "1.0.0",
                "modules_analyzed": len(self.module_map),
                "analysis_type": "intelligent_comprehensive"
            },
            "module_structure": self.module_map,
            "dependency_graph": self.dependency_graph,
            "api_patterns": self.api_patterns,
            "missing_functions": getattr(self, 'missing_functions', {}),
            "improvement_suggestions": self.improvement_suggestions
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        reports_dir = Path(".context/analysis")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
        with open(reports_dir / "module_architecture_analysis.json", 'w', encoding='utf-8') as f:
            json.dump(main_report, f, ensure_ascii=False, indent=2)
        
        # –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        with open(reports_dir / "dependency_graph.json", 'w', encoding='utf-8') as f:
            json.dump(self.dependency_graph, f, ensure_ascii=False, indent=2)
        
        # –û—Ç—á–µ—Ç –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_report = self.generate_complexity_report()
        with open(reports_dir / "module_complexity_report.json", 'w', encoding='utf-8') as f:
            json.dump(complexity_report, f, ensure_ascii=False, indent=2)
        
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary = self.generate_summary_report()
        with open(reports_dir / "intelligent_analysis_summary.md", 'w', encoding='utf-8') as f:
            f.write(summary)
        
        print(f"   üìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {reports_dir}")
        
        self.analysis_results = main_report
    
    def generate_complexity_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        complexity_data = {}
        
        for module_path, module_info in self.module_map.items():
            if module_info.get("type") == "c_extension":
                complexity = module_info.get("complexity", {})
                complexity_data[module_path] = {
                    "cyclomatic_complexity": complexity.get("cyclomatic_complexity", 0),
                    "max_nesting_depth": complexity.get("max_nesting_depth", 0),
                    "function_count": complexity.get("function_count", 0),
                    "avg_function_length": complexity.get("avg_function_length", 0),
                    "lines_of_code": module_info.get("lines_of_code", 0)
                }
        
        return {
            "timestamp": datetime.now().isoformat(),
            "modules": complexity_data,
            "summary": {
                "total_modules": len(complexity_data),
                "avg_complexity": sum(m.get("cyclomatic_complexity", 0) for m in complexity_data.values()) / max(len(complexity_data), 1),
                "high_complexity_modules": [
                    path for path, data in complexity_data.items() 
                    if data.get("cyclomatic_complexity", 0) > 20
                ]
            }
        }
    
    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –≤ Markdown"""
        summary = f"""# üß† –û—Ç—á–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥—É–ª–µ–π Python Cellframe

**–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
**–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:** 1.0.0

## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {len(self.module_map)}
- **C extension –º–æ–¥—É–ª–µ–π:** {sum(1 for m in self.module_map.values() if m.get('type') == 'c_extension')}
- **Python –º–æ–¥—É–ª–µ–π:** {sum(1 for m in self.module_map.values() if m.get('type') == 'python_module')}
- **–í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:** {sum(len(deps) for deps in self.dependency_graph.values())}

## üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏

### –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
- **–ú–æ–¥—É–ª–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:** {len(getattr(self, 'missing_functions', {}))}
- **–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:** {sum(len(suggestions) for suggestions in getattr(self, 'missing_functions', {}).values())}

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
- **–ú–æ–¥—É–ª–µ–π —Ç—Ä–µ–±—É—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏—è:** {len(self.improvement_suggestions)}
- **–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:** {sum(len(improvements) for improvements in self.improvement_suggestions.values())}

## üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

### –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        high_priority = []
        for module_path, improvements in self.improvement_suggestions.items():
            for improvement in improvements:
                if improvement.get("priority") == "high":
                    high_priority.append(f"- **{Path(module_path).name}**: {improvement.get('suggestion')}")
        
        if high_priority:
            summary += "\n".join(high_priority[:5])  # –¢–æ–ø 5
        else:
            summary += "\n- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ‚úÖ"
        
        summary += f"""

### –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        medium_priority = []
        for module_path, improvements in self.improvement_suggestions.items():
            for improvement in improvements:
                if improvement.get("priority") == "medium":
                    medium_priority.append(f"- **{Path(module_path).name}**: {improvement.get('suggestion')}")
        
        if medium_priority:
            summary += "\n".join(medium_priority[:5])  # –¢–æ–ø 5
        else:
            summary += "\n- –°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        summary += f"""

## üìà –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–§–∞–∑–∞ 2**: –°–æ–∑–¥–∞–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API
2. **–§–∞–∑–∞ 3**: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
3. **–§–∞–∑–∞ 4**: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
4. **–§–∞–∑–∞ 5**: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

## üìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

- `module_architecture_analysis.json` - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- `dependency_graph.json` - –ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª–µ–π
- `module_complexity_report.json` - –û—Ç—á–µ—Ç –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
- `intelligent_analysis_summary.md` - –≠—Ç–æ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç

---
*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é Intelligent Module Analyzer*
"""
        
        return summary

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† Intelligent Module Analyzer for Python Cellframe")
    print("=" * 55)
    
    if not Path("python-cellframe").exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    analyzer = IntelligentModuleAnalyzer()
    results = analyzer.analyze_all_modules()
    
    print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üìÅ –ú–æ–¥—É–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(analyzer.module_map)}")
    print(f"   üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {sum(len(deps) for deps in analyzer.dependency_graph.values())}")
    print(f"   üéØ –ú–æ–¥—É–ª–µ–π —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {len(getattr(analyzer, 'missing_functions', {}))}")
    print(f"   üí° –ú–æ–¥—É–ª–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {len(analyzer.improvement_suggestions)}")
    
    print(f"\nüìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: .context/analysis/")
    print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 2: –°–æ–∑–¥–∞–Ω–∏–µ unit —Ç–µ—Å—Ç–æ–≤")
    
    return 0

if __name__ == '__main__':
    exit(main()) 