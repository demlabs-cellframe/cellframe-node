#!/usr/bin/env python3
"""
Next 50 Functions Documentation Generator
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Cellframe
–§–∞–∑–∞ 2 –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Tuple, Set
import re
import datetime

class Next50FunctionsGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ —Ç–æ–ø-20"""
    
    def __init__(self, api_inventory_file: str, top20_completed: List[str] = None):
        self.api_inventory_file = api_inventory_file
        self.api_data = None
        self.top20_completed = set(top20_completed or [])
        self.next50_functions = []
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –§–∞–∑—ã 2
        self.priority_patterns = {
            'critical_ledger': {
                'patterns': [
                    r'^dap_chain_ledger_tx_.*',
                    r'^dap_chain_ledger_add_.*',
                    r'^dap_chain_ledger_balance_.*',
                    r'^dap_chain_ledger_datum_.*'
                ],
                'weight': 95,
                'category': 'Ledger Operations'
            },
            'critical_chain': {
                'patterns': [
                    r'^dap_chain_atom_.*',
                    r'^dap_chain_block_.*',
                    r'^dap_chain_consensus_.*',
                    r'^dap_chain_net_.*'
                ],
                'weight': 90,
                'category': 'Chain Management'
            },
            'critical_crypto': {
                'patterns': [
                    r'^dap_crypto_sign_.*',
                    r'^dap_crypto_verify_.*',
                    r'^dap_hash_fast_.*',
                    r'^dap_enc_.*'
                ],
                'weight': 85,
                'category': 'Cryptography'
            },
            'python_bindings': {
                'patterns': [
                    r'.*_py$',
                    r'.*_python_.*',
                    r'^py_.*',
                    r'.*_wrap_.*'
                ],
                'weight': 80,
                'category': 'Python Integration'
            },
            'network_operations': {
                'patterns': [
                    r'^dap_chain_net_srv_.*',
                    r'^dap_stream_.*',
                    r'^dap_client_.*',
                    r'^dap_server_.*'
                ],
                'weight': 75,
                'category': 'Network Operations'
            },
            'consensus_algorithms': {
                'patterns': [
                    r'^dap_chain_cs_.*',
                    r'.*_consensus_.*',
                    r'.*_poa_.*',
                    r'.*_pos_.*'
                ],
                'weight': 70,
                'category': 'Consensus'
            },
            'data_structures': {
                'patterns': [
                    r'^dap_list_.*',
                    r'^dap_hash_table_.*',
                    r'^dap_tree_.*',
                    r'^dap_queue_.*'
                ],
                'weight': 65,
                'category': 'Data Structures'
            },
            'utility_functions': {
                'patterns': [
                    r'^dap_string_.*',
                    r'^dap_time_.*',
                    r'^dap_file_.*',
                    r'^dap_config_.*'
                ],
                'weight': 60,
                'category': 'Utilities'
            }
        }

    def load_api_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ API –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.api_inventory_file, 'r', encoding='utf-8') as f:
                self.api_data = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –¥–∞–Ω–Ω—ã—Ö: {self.api_data['metadata']['total_functions']} —Ñ—É–Ω–∫—Ü–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def calculate_enhanced_priority(self, function_name: str, module_name: str, signature: str = "") -> Tuple[int, str]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏"""
        priority_score = 0
        category = 'Other'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        for priority_level, config in self.priority_patterns.items():
            for pattern in config['patterns']:
                if re.match(pattern, function_name, re.IGNORECASE):
                    priority_score = max(priority_score, config['weight'])
                    category = config['category']
                    break
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –§–∞–∑—ã 2
        if 'include' in module_name:
            priority_score += 15  # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        
        if 'test' in module_name.lower():
            priority_score -= 20  # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã
            
        if 'debug' in function_name.lower():
            priority_score -= 10  # Debug —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã
            
        # –ë–æ–Ω—É—Å –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—ã (–±–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ = –≤–∞–∂–Ω–µ–µ)
        if signature:
            param_count = signature.count(',') + 1 if '(' in signature else 0
            if param_count > 3:
                priority_score += 5
                
        # –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        if any(keyword in function_name.lower() for keyword in ['create', 'init', 'new', 'add', 'get']):
            priority_score += 10
            
        return priority_score, category

    def select_next50_functions(self) -> List[Dict]:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ 50 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ —Ç–æ–ø-20"""
        all_functions = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        for module_name, module_data in self.api_data['modules'].items():
            for function in module_data['functions']:
                function_name = function['name']
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                if function_name in self.top20_completed:
                    continue
                
                priority, category = self.calculate_enhanced_priority(
                    function_name, 
                    module_name, 
                    function.get('signature', '')
                )
                
                function_info = {
                    'name': function_name,
                    'signature': function['signature'],
                    'return_type': function['return_type'],
                    'parameters': function['parameters'],
                    'module': module_name,
                    'file_path': function['file_path'],
                    'comments': function['comments'],
                    'priority': priority,
                    'category': category,
                    'complexity': len(function['parameters'])
                }
                all_functions.append(function_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 50
        all_functions.sort(key=lambda x: x['priority'], reverse=True)
        self.next50_functions = all_functions[:50]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
        categories = {}
        for func in self.next50_functions:
            cat = func['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(func)
        
        print("üéØ –°–ª–µ–¥—É—é—â–∏–µ 50 —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:")
        for category, functions in categories.items():
            print(f"\nüìÇ {category} ({len(functions)} —Ñ—É–Ω–∫—Ü–∏–π):")
            for func in functions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                print(f"  ‚Ä¢ {func['name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {func['priority']})")
            if len(functions) > 3:
                print(f"  ... –∏ –µ—â–µ {len(functions) - 3} —Ñ—É–Ω–∫—Ü–∏–π")
        
        return self.next50_functions

    def generate_enhanced_description(self, function_info: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –§–∞–∑—ã 2"""
        name = function_info['name']
        category = function_info['category']
        comments = function_info.get('comments', [])
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        category_descriptions = {
            'Ledger Operations': f"–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–µ–µ—Å—Ç—Ä–æ–º –±–ª–æ–∫—á–µ–π–Ω–∞ Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏, –±–∞–ª–∞–Ω—Å–∞–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–µ–µ—Å—Ç—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞.",
            
            'Chain Management': f"–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –±–ª–æ–∫—á–µ–π–Ω —Ü–µ–ø–æ—á–∫–∏ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞–º–∏, –∞—Ç–æ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ —Ü–µ–ø–æ—á–∫–∏.",
            
            'Cryptography': f"–†–µ–∞–ª–∏–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö post-quantum –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.",
            
            'Python Integration': f"–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É C API Cellframe –∏ Python –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º. –§—É–Ω–∫—Ü–∏—è {name} —Å–æ–∑–¥–∞–µ—Ç –º–æ—Å—Ç –º–µ–∂–¥—É –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º Python API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.",
            
            'Network Operations': f"–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ç–µ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π –≤ —Å–µ—Ç–∏ Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —É–∑–ª–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞.",
            
            'Consensus': f"–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –≤ —Å–µ—Ç–∏ Cellframe. –§—É–Ω–∫—Ü–∏—è {name} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –±–ª–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–º–µ—Ö–∞–Ω–∏–∑–º—É.",
            
            'Data Structures': f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π –±–ª–æ–∫—á–µ–π–Ω —Å—Ä–µ–¥–µ.",
            
            'Utilities': f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π Cellframe. –§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫—á–µ–π–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        description = category_descriptions.get(category, f"–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö Cellframe SDK API.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if comments:
            comment_text = ' '.join(comments).replace('//', '').replace('/*', '').replace('*/', '').strip()
            if comment_text and len(comment_text) > 15:
                description += f" {comment_text}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = function_info.get('complexity', 0)
        if complexity > 5:
            description += f" –§—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç {complexity} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–æ–∂–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º, —Ç—Ä–µ–±—É—é—â–∏–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."
        elif complexity > 2:
            description += f" –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {complexity} –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–∏–±–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        
        return description

    def generate_advanced_examples(self, function_info: Dict) -> Tuple[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –§–∞–∑—ã 2"""
        name = function_info['name']
        category = function_info['category']
        parameters = function_info['parameters']
        
        # C –ø—Ä–∏–º–µ—Ä —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        c_example = self.generate_category_c_example(name, category, parameters)
        
        # Python –ø—Ä–∏–º–µ—Ä —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        python_example = self.generate_category_python_example(name, category, parameters)
        
        return c_example, python_example

    def generate_category_c_example(self, name: str, category: str, parameters: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç C –ø—Ä–∏–º–µ—Ä —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if category == 'Ledger Operations':
            return f"""#include "cellframe_api.h"
#include "dap_chain_ledger.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ledger
    dap_chain_ledger_t *ledger = dap_chain_ledger_create();
    if (!ledger) {{
        log_it(L_ERROR, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ledger");
        return -1;
    }}
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    int result = {name}(ledger);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result == 0) {{
        log_it(L_INFO, "–û–ø–µ—Ä–∞—Ü–∏—è —Å ledger –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    }} else {{
        log_it(L_ERROR, "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ledger: %d", result);
    }}
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    dap_chain_ledger_delete(ledger);
    return result;
}}"""
        
        elif category == 'Cryptography':
            return f"""#include "cellframe_api.h"
#include "dap_crypto.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    dap_crypto_init();
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const char *data = "Hello, Cellframe!";
    size_t data_size = strlen(data);
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    int result = {name}(data, data_size);
    
    if (result == 0) {{
        printf("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\n");
    }} else {{
        printf("–û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: %d\\n", result);
    }}
    
    // –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    dap_crypto_deinit();
    return result;
}}"""
        
        elif category == 'Network Operations':
            return f"""#include "cellframe_api.h"
#include "dap_chain_net.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ–¥—É–ª—è
    dap_chain_net_t *net = dap_chain_net_by_name("cellframe-node");
    if (!net) {{
        log_it(L_ERROR, "–°–µ—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return -1;
    }}
    
    // –í—ã–∑–æ–≤ —Å–µ—Ç–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    int result = {name}(net);
    
    if (result == 0) {{
        log_it(L_INFO, "–°–µ—Ç–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    }} else {{
        log_it(L_ERROR, "–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: %d", result);
    }}
    
    return result;
}}"""
        
        else:
            return f"""#include "cellframe_api.h"

int main() {{
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    dap_common_init("cellframe-app");
    
    // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name}
    int result = {name}();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result == 0) {{
        printf("–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\\n");
    }} else {{
        printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {name}: %d\\n", result);
    }}
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    dap_common_deinit();
    return result;
}}"""

    def generate_category_python_example(self, name: str, category: str, parameters: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –ø—Ä–∏–º–µ—Ä —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if category == 'Ledger Operations':
            python_name = name.replace('dap_chain_ledger_', '').replace('_', '.')
            return f"""import libCellFrame

def example_ledger_operation():
    \"\"\"–ü—Ä–∏–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ledger: {name}\"\"\"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ ledger
        ledger = libCellFrame.ChainLedger()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é {name}
        result = ledger.{python_name}()
        
        if result:
            print("–û–ø–µ—Ä–∞—Ü–∏—è —Å ledger –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")
            return result
        else:
            print("–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ledger")
            return None
            
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å ledger: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    result = example_ledger_operation()"""
        
        elif category == 'Python Integration':
            return f"""import libCellFrame

def example_{name.lower()}():
    \"\"\"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Python –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {name}\"\"\"
    try:
        # {name} - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        # –û–±—ã—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(libCellFrame, '{name.replace("_py", "")}'):
            func = getattr(libCellFrame, '{name.replace("_py", "")}')
            result = func()
            
            print(f"Python –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return result
        else:
            print(f"–§—É–Ω–∫—Ü–∏—è {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Python API")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Python –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    example_{name.lower()}()"""
        
        elif category == 'Cryptography':
            python_name = name.replace('dap_crypto_', '').replace('dap_', '')
            return f"""import libCellFrame

def example_crypto_operation():
    \"\"\"–ü—Ä–∏–º–µ—Ä –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {name}\"\"\"
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        data = b"Hello, Cellframe!"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        crypto = libCellFrame.Crypto()
        result = crypto.{python_name}(data)
        
        if result:
            print("–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result.hex() if isinstance(result, bytes) else result}}")
            return result
        else:
            print("–û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return None
            
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    example_crypto_operation()"""
        
        else:
            python_name = name.replace('dap_', '').replace('_', '.')
            return f"""import libCellFrame

def example_{name.lower()}():
    \"\"\"–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {name}\"\"\"
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Python API
        result = libCellFrame.{python_name}()
        
        if result is not None:
            print(f"–§—É–Ω–∫—Ü–∏—è {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")
            return result
        else:
            print(f"–§—É–Ω–∫—Ü–∏—è {name} –≤–µ—Ä–Ω—É–ª–∞ None")
            return None
            
    except AttributeError:
        print(f"–§—É–Ω–∫—Ü–∏—è {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Python API")
        return None
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {{e}}")
        return None

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    example_{name.lower()}()"""

    def generate_all_documentation(self, output_dir: str = ".context/docs/api-reference/next50"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50 —Ñ—É–Ω–∫—Ü–∏–π"""
        if not self.load_api_data():
            return False
        
        print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50 —Ñ—É–Ω–∫—Ü–∏–π (–§–∞–∑–∞ 2)...")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 50 —Ñ—É–Ω–∫—Ü–∏–π
        self.select_next50_functions()
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        for i, function_info in enumerate(self.next50_functions, 1):
            print(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i}/50: {function_info['name']} ({function_info['category']})")
            self.generate_enhanced_documentation_file(function_info, output_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
        self.generate_enhanced_index_file(output_dir)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –§–∞–∑–µ 2
        self.generate_phase2_report(output_dir)
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –§–∞–∑—ã 2 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ {output_dir}")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.next50_functions) + 2}")
        
        return True

    def generate_enhanced_documentation_file(self, function_info: Dict, output_dir: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        name = function_info['name']
        category = function_info['category']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        description = self.generate_enhanced_description(function_info)
        c_example, python_example = self.generate_advanced_examples(function_info)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –§–∞–∑—ã 2
        doc_content = f"""# {name}

**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}  
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {function_info['priority']}  
**–ú–æ–¥—É–ª—å:** `{function_info['module']}`

## –û–ø–∏—Å–∞–Ω–∏–µ
{description}

## –°–∏–≥–Ω–∞—Ç—É—Ä–∞
```c
{function_info['signature']}
```

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
{self.generate_parameters_table(function_info['parameters'])}

## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- **–¢–∏–ø:** `{function_info['return_type']}`
- **–û–ø–∏—Å–∞–Ω–∏–µ:** –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"
- `0` - –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
- `!0` - –ö–æ–¥ –æ—à–∏–±–∫–∏ (—Å–º. —Ä–∞–∑–¥–µ–ª "–ö–æ–¥—ã –æ—à–∏–±–æ–∫")

## –ö–æ–¥—ã –æ—à–∏–±–æ–∫
| –ö–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ | –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ |
|-----|----------|----------------------|
| 0 | –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ | –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É |
| -1 | –û–±—â–∞—è –æ—à–∏–±–∫–∞ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã |
| -2 | –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã | –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ |
| -3 | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ | –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å |
| -4 | –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã |

## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### C/C++
```c
{c_example}
```

### Python
```python
{python_example}
```

## –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- TODO: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –°–º. –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** O(?) - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞
- **–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:** –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- **–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
- –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}"

## –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
- **v1.0:** –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
- **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:** –¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è

## –°–º. —Ç–∞–∫–∂–µ
- [API Reference](../README.md)
- [–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}](../categories/{category.lower().replace(' ', '_')}.md)
- [Getting Started Guide](../../getting-started.md)

---
*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –§–∞–∑—ã 2 –ø—Ä–æ–µ–∫—Ç–∞ Cellframe API*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_file = Path(output_dir) / f"{name}.md"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(doc_content)

    def generate_parameters_table(self, parameters: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not parameters:
            return "–§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        
        table = "| –ü–∞—Ä–∞–º–µ—Ç—Ä | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ | –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π | –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é |\n"
        table += "|----------|-----|----------|--------------|----------------------|\n"
        
        for param in parameters:
            name = param.get('name', 'unknown')
            param_type = param.get('type', 'unknown')
            description = param.get('description', self.generate_param_description(name, param_type))
            required = "–î–∞" if not param_type.endswith('*') or 'const' in param_type else "–ù–µ—Ç"
            default = "NULL" if param_type.endswith('*') else "0"
            
            table += f"| {name} | `{param_type}` | {description} | {required} | {default} |\n"
        
        return table

    def generate_param_description(self, name: str, param_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ —Ç–∏–ø–∞"""
        descriptions = {
            'ledger': '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç ledger –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–µ–µ—Å—Ç—Ä–æ–º',
            'chain': '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç chain –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ü–µ–ø–æ—á–∫–æ–π',
            'tx': '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'hash': '–•–µ—à –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞',
            'addr': '–ê–¥—Ä–µ—Å –≤ –±–ª–æ–∫—á–µ–π–Ω–µ',
            'key': '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á',
            'size': '–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö',
            'data': '–£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'callback': '–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞',
            'context': '–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'
        }
        
        name_lower = name.lower()
        for keyword, desc in descriptions.items():
            if keyword in name_lower:
                return desc
        
        return f"–ü–∞—Ä–∞–º–µ—Ç—Ä {name} —Ç–∏–ø–∞ {param_type}"

    def generate_enhanced_index_file(self, output_dir: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for func in self.next50_functions:
            cat = func['category']
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(func)
        
        index_content = f"""# Cellframe API - –°–ª–µ–¥—É—é—â–∏–µ 50 —Ñ—É–Ω–∫—Ü–∏–π (–§–∞–∑–∞ 2)

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Cellframe API –ø–æ—Å–ª–µ —Ç–æ–ø-20.
–°–æ–∑–¥–∞–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:** 50
- **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(categories)}
- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {sum(f['priority'] for f in self.next50_functions) / len(self.next50_functions):.1f}
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤:** 100% (C/C++ –∏ Python)

## –§—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, functions in sorted(categories.items()):
            index_content += f"### {category} ({len(functions)} —Ñ—É–Ω–∫—Ü–∏–π)\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            functions.sort(key=lambda x: x['priority'], reverse=True)
            
            for func in functions:
                complexity_info = f" ({func['complexity']} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)" if func['complexity'] > 0 else ""
                index_content += f"- [{func['name']}]({func['name']}.md) - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {func['priority']}{complexity_info}\n"
            
            index_content += "\n"
        
        index_content += """## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

1. **–ò–∑—É—á–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é** - –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç** - –Ω–∞—á–Ω–∏—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
3. **–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã** - –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ C/C++ –∏ Python
4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö 50 —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:

1. –ò–∑—É—á–∏—Ç—å [–¢–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏–π](../top20/README.md)
2. –ü–µ—Ä–µ–π—Ç–∏ –∫ [–ü–æ–ª–Ω–æ–º—É API Reference](../README.md)
3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å [–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç—É—Ç–æ—Ä–∏–∞–ª—ã](../../tutorials/)

## –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
- –°–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

---
*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –§–∞–∑—ã 2 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Smart Layered Context*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
        index_file = Path(output_dir) / "README.md"
        with open(index_file, 'w', encoding='utf-8') as f:
            f.write(index_content)

    def generate_phase2_report(self, output_dir: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –§–∞–∑–µ 2"""
        categories_stats = {}
        for func in self.next50_functions:
            cat = func['category']
            if cat not in categories_stats:
                categories_stats[cat] = {'count': 0, 'avg_priority': 0, 'total_priority': 0}
            categories_stats[cat]['count'] += 1
            categories_stats[cat]['total_priority'] += func['priority']
        
        for cat, stats in categories_stats.items():
            stats['avg_priority'] = stats['total_priority'] / stats['count']
        
        report = {
            "phase": "Phase 2 - Next 50 Functions",
            "generated_at": datetime.datetime.now().isoformat(),
            "total_functions": len(self.next50_functions),
            "categories": categories_stats,
            "priority_range": {
                "min": min(f['priority'] for f in self.next50_functions),
                "max": max(f['priority'] for f in self.next50_functions),
                "avg": sum(f['priority'] for f in self.next50_functions) / len(self.next50_functions)
            },
            "complexity_stats": {
                "avg_parameters": sum(f['complexity'] for f in self.next50_functions) / len(self.next50_functions),
                "max_parameters": max(f['complexity'] for f in self.next50_functions),
                "functions_with_many_params": len([f for f in self.next50_functions if f['complexity'] > 5])
            },
            "quality_improvements": [
                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –æ–±–ª–∞—Å—Ç—è–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è",
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                "–î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–¥—ã –æ—à–∏–±–æ–∫ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            ]
        }
        
        report_file = Path(output_dir) / "phase2_generation_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Next 50 Functions Documentation Generator (Phase 2)')
    parser.add_argument('--api-inventory', 
                       default='.context/analysis/cellframe_api_inventory.json',
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API')
    parser.add_argument('--output-dir', 
                       default='.context/docs/api-reference/next50',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏')
    parser.add_argument('--top20-completed',
                       default='.context/docs/api-reference/top20',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–ø-20 —Ñ—É–Ω–∫—Ü–∏—è–º–∏')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.api_inventory):
        print(f"‚ùå –§–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è API –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.api_inventory}")
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    top20_completed = []
    if os.path.exists(args.top20_completed):
        for file in Path(args.top20_completed).glob("*.md"):
            if file.name != "README.md":
                top20_completed.append(file.stem)
    
    generator = Next50FunctionsGenerator(args.api_inventory, top20_completed)
    success = generator.generate_all_documentation(args.output_dir)
    
    return 0 if success else 1

if __name__ == '__main__':
    exit(main()) 