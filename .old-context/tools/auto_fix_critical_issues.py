#!/usr/bin/env python3
"""
Auto Fix Critical Issues in Python Cellframe
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ Python Cellframe
"""

import os
import re
import json
import shutil
from pathlib import Path
from datetime import datetime

class CriticalIssueFixer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
    
    def __init__(self, base_path="python-cellframe"):
        self.base_path = Path(base_path)
        self.backup_dir = Path(".context/backups")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        self.fixes_applied = []
        
    def backup_file(self, file_path):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"{file_path.name}_{timestamp}.backup"
        backup_path = self.backup_dir / backup_name
        
        shutil.copy2(file_path, backup_path)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    
    def fix_missing_return_null(self, file_path, line_number):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ return NULL –ø–æ—Å–ª–µ PyErr_SetString"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
        
        if line_number > len(lines):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {line_number} –≤ —Ñ–∞–π–ª–µ {file_path}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å PyErr_SetString
        target_line = lines[line_number - 1]
        if 'PyErr_SetString' not in target_line:
            print(f"‚ùå PyErr_SetString –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {line_number}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ return NULL –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        for i in range(line_number, min(line_number + 3, len(lines))):
            if 'return NULL' in lines[i] or 'return' in lines[i]:
                print(f"‚ö†Ô∏è  return —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ {i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
        indent = len(target_line) - len(target_line.lstrip())
        indent_str = ' ' * indent
        
        # –î–æ–±–∞–≤–ª—è–µ–º return NULL –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å PyErr_SetString
        lines.insert(line_number, f"{indent_str}return NULL;\n")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            fix_info = {
                "type": "missing_return_null",
                "file": str(file_path),
                "line": line_number,
                "description": "Added return NULL after PyErr_SetString",
                "timestamp": datetime.now().isoformat()
            }
            self.fixes_applied.append(fix_info)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω return NULL –≤ {file_path}:{line_number}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def fix_malloc_null_check(self, file_path, line_number):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É NULL –ø–æ—Å–ª–µ malloc"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
        
        if line_number > len(lines):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {line_number} –≤ —Ñ–∞–π–ª–µ {file_path}")
            return False
        
        target_line = lines[line_number - 1]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ malloc
        var_match = re.search(r'(\w+)\s*=\s*(?:malloc|calloc|realloc)\s*\(', target_line)
        if not var_match:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é malloc –≤ —Å—Ç—Ä–æ–∫–µ {line_number}")
            return False
        
        var_name = var_match.group(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ NULL
        for i in range(line_number, min(line_number + 5, len(lines))):
            if f'if' in lines[i] and var_name in lines[i] and 'NULL' in lines[i]:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
        indent = len(target_line) - len(target_line.lstrip())
        indent_str = ' ' * indent
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É NULL
        null_check = f"{indent_str}if ({var_name} == NULL) {{\n"
        null_check += f"{indent_str}    PyErr_SetString(PyExc_MemoryError, \"Memory allocation failed\");\n"
        null_check += f"{indent_str}    return NULL;\n"
        null_check += f"{indent_str}}}\n"
        
        lines.insert(line_number, null_check)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            fix_info = {
                "type": "malloc_null_check",
                "file": str(file_path),
                "line": line_number,
                "description": f"Added NULL check for {var_name}",
                "timestamp": datetime.now().isoformat()
            }
            self.fixes_applied.append(fix_info)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ NULL –¥–ª—è {var_name} –≤ {file_path}:{line_number}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def fix_critical_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        report_file = Path(".context/analysis/detailed_issues_report.json")
        if not report_file.exists():
            print("‚ùå –û—Ç—á–µ—Ç —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ detailed_issue_analyzer.py")
            return False
        
        with open(report_file, 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        critical_issues = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        for category, issues in report["analysis_categories"].items():
            for issue in issues:
                if issue["severity"] == "HIGH":
                    critical_issues.append(issue)
        
        if not critical_issues:
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return True
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(critical_issues)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        
        fixed_count = 0
        
        for issue in critical_issues:
            file_path = Path(issue["file"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not file_path.exists():
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.backup_file(file_path)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
            if "Missing return NULL after PyErr_SetString" in issue["issue"]:
                if self.fix_missing_return_null(file_path, issue["line"]):
                    fixed_count += 1
            
            elif "malloc/calloc result not checked for NULL" in issue["issue"]:
                if self.fix_malloc_null_check(file_path, issue["line"]):
                    fixed_count += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {fixed_count}")
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(os.listdir(self.backup_dir))}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        fixes_report = {
            "timestamp": datetime.now().isoformat(),
            "total_fixes": len(self.fixes_applied),
            "fixes": self.fixes_applied
        }
        
        with open(".context/analysis/auto_fixes_report.json", 'w', encoding='utf-8') as f:
            json.dump(fixes_report, f, ensure_ascii=False, indent=2)
        
        print(f"üìã –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: .context/analysis/auto_fixes_report.json")
        
        return fixed_count > 0
    
    def create_manual_fix_guide(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        print("üìñ –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Ä—É—á–Ω–æ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é...")
        
        guide = {
            "title": "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º Python Cellframe",
            "timestamp": datetime.now().isoformat(),
            "sections": {
                "error_handling": {
                    "title": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
                    "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Python API",
                    "fixes": [
                        {
                            "problem": "Missing return NULL after PyErr_SetString",
                            "solution": "–î–æ–±–∞–≤–∏—Ç—å 'return NULL;' –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ PyErr_SetString",
                            "example_before": "PyErr_SetString(PyExc_ValueError, \"Invalid parameter\");",
                            "example_after": "PyErr_SetString(PyExc_ValueError, \"Invalid parameter\");\nreturn NULL;",
                            "priority": "CRITICAL"
                        }
                    ]
                },
                "memory_management": {
                    "title": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é",
                    "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å malloc/free –∏ —É—Ç–µ—á–∫–∞–º–∏ –ø–∞–º—è—Ç–∏", 
                    "fixes": [
                        {
                            "problem": "malloc result not checked for NULL",
                            "solution": "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É NULL –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ malloc/calloc",
                            "example_before": "char *buffer = malloc(size);",
                            "example_after": "char *buffer = malloc(size);\nif (buffer == NULL) {\n    PyErr_SetString(PyExc_MemoryError, \"Memory allocation failed\");\n    return NULL;\n}",
                            "priority": "HIGH"
                        },
                        {
                            "problem": "Potential memory leak",
                            "solution": "–î–æ–±–∞–≤–∏—Ç—å free() –¥–ª—è –∫–∞–∂–¥–æ–≥–æ malloc/calloc",
                            "example_before": "char *buffer = malloc(size);\n// use buffer\nreturn result;",
                            "example_after": "char *buffer = malloc(size);\n// use buffer\nfree(buffer);\nreturn result;",
                            "priority": "MEDIUM"
                        }
                    ]
                },
                "thread_safety": {
                    "title": "–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å thread safety",
                    "fixes": [
                        {
                            "problem": "Non-const static variables",
                            "solution": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å thread-local storage –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é",
                            "example_before": "static int counter = 0;",
                            "example_after": "__thread int counter = 0;  // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mutex",
                            "priority": "MEDIUM"
                        }
                    ]
                },
                "best_practices": {
                    "title": "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
                    "description": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞",
                    "practices": [
                        "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è malloc/calloc",
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RAII –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ",
                        "–î–æ–±–∞–≤–ª—è–π—Ç–µ return NULL –ø–æ—Å–ª–µ PyErr_SetString",
                        "–ò–∑–±–µ–≥–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ const –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                        "–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–µ"
                    ]
                }
            }
        }
        
        with open(".context/analysis/manual_fix_guide.json", 'w', encoding='utf-8') as f:
            json.dump(guide, f, ensure_ascii=False, indent=2)
        
        print("üìã –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: .context/analysis/manual_fix_guide.json")
        
        return guide

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not Path("python-cellframe").exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    fixer = CriticalIssueFixer()
    
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º Python Cellframe")
    print("=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    success = fixer.fix_critical_issues()
    
    # –°–æ–∑–¥–∞–µ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    fixer.create_manual_fix_guide()
    
    if success:
        print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print("üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .context/backups/")
    else:
        print("\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä—É—á–Ω–æ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é")
    
    return 0

if __name__ == '__main__':
    exit(main()) 