#!/usr/bin/env python3
"""
Unit Test Generator for Python Cellframe
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Python Cellframe

–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç comprehensive unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
Python Cellframe API –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
"""

import os
import re
import ast
import json
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Tuple, Any, Optional
from collections import defaultdict

class UnitTestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Python Cellframe"""
    
    def __init__(self, base_path="python-cellframe"):
        self.base_path = Path(base_path)
        self.test_dir = Path("python-cellframe/tests")
        self.analysis_data = {}
        self.generated_tests = {}
        
    def generate_all_tests(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ unit —Ç–µ—Å—Ç—ã"""
        print("üß™ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Python Cellframe")
        print("=" * 50)
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüìÅ –§–∞–∑–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        self.setup_test_infrastructure()
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
        print("\nüîç –§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π...")
        self.analyze_existing_modules()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è core –º–æ–¥—É–ª–µ–π
        print("\nüß™ –§–∞–∑–∞ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è core –º–æ–¥—É–ª–µ–π...")
        self.generate_core_tests()
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è service –º–æ–¥—É–ª–µ–π
        print("\nüîß –§–∞–∑–∞ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è service –º–æ–¥—É–ª–µ–π...")
        self.generate_service_tests()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        print("\nüîó –§–∞–∑–∞ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        self.generate_integration_tests()
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
        print("\nüõ†Ô∏è –§–∞–∑–∞ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç...")
        self.create_test_utilities()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        print("\nüìä –§–∞–∑–∞ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        self.generate_test_reports()
        
        print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è unit —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return self.generated_tests
    
    def setup_test_infrastructure(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.test_dir.mkdir(parents=True, exist_ok=True)
        (self.test_dir / "core").mkdir(exist_ok=True)
        (self.test_dir / "services").mkdir(exist_ok=True)
        (self.test_dir / "integration").mkdir(exist_ok=True)
        (self.test_dir / "fixtures").mkdir(exist_ok=True)
        (self.test_dir / "utils").mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
        for subdir in ["", "core", "services", "integration", "fixtures", "utils"]:
            init_file = self.test_dir / subdir / "__init__.py" if subdir else self.test_dir / "__init__.py"
            if not init_file.exists():
                init_file.write_text('"""Test package"""')
        
        # –°–æ–∑–¥–∞–µ–º pytest.ini
        pytest_config = """[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short --strict-markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
    requires_network: Tests that require network access
"""
        
        pytest_ini = self.test_dir.parent / "pytest.ini"
        if not pytest_ini.exists():
            pytest_ini.write_text(pytest_config)
        
        print("   üìÅ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
    
    def analyze_existing_modules(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
        modules = {}
        
        if not self.base_path.exists():
            print(f"   ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {self.base_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º C —Ñ–∞–π–ª—ã —Å Python –±–∏–Ω–¥–∏–Ω–≥–∞–º–∏
        for c_file in self.base_path.rglob("*.c"):
            if self.is_python_binding_file(c_file):
                module_info = self.analyze_c_module_for_tests(c_file)
                if module_info.get("python_functions"):
                    modules[str(c_file.relative_to(self.base_path))] = module_info
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
        for py_file in self.base_path.rglob("*.py"):
            if py_file.name not in ["__init__.py", "__pycache__"]:
                module_info = self.analyze_python_module_for_tests(py_file)
                if module_info.get("functions") or module_info.get("classes"):
                    modules[str(py_file.relative_to(self.base_path))] = module_info
        
        self.analysis_data = modules
        print(f"   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
    
    def is_python_binding_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Python –±–∏–Ω–¥–∏–Ω–≥–æ–º"""
        return (
            "wrapping_" in file_path.name or
            "python" in file_path.name.lower() or
            file_path.parent.name in ["src", "modules", "CellFrame"]
        )
    
    def analyze_c_module_for_tests(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç C –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
        except Exception as e:
            return {"error": f"Cannot read file: {e}"}
        
        # –ü–æ–∏—Å–∫ Python API —Ñ—É–Ω–∫—Ü–∏–π
        python_functions = re.findall(r'PyObject\s+\*(\w+)\(PyObject\s+\*[^)]*\)', content)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
        function_signatures = {}
        for func in python_functions:
            # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ
            pattern = rf'PyObject\s+\*{func}\(PyObject\s+\*[^)]*\)'
            match = re.search(pattern, content)
            if match:
                function_signatures[func] = {
                    "signature": match.group(0),
                    "has_args": "args" in match.group(0).lower(),
                    "has_kwargs": "kwargs" in match.group(0).lower()
                }
        
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        return_patterns = {}
        for func in python_functions:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            func_start = content.find(f"PyObject *{func}(")
            if func_start != -1:
                func_end = content.find("}", func_start)
                if func_end != -1:
                    func_body = content[func_start:func_end]
                    if "Py_RETURN_NONE" in func_body:
                        return_patterns[func] = "None"
                    elif "PyLong_FromLong" in func_body:
                        return_patterns[func] = "int"
                    elif "PyUnicode_FromString" in func_body:
                        return_patterns[func] = "str"
                    elif "PyBool_FromLong" in func_body:
                        return_patterns[func] = "bool"
                    else:
                        return_patterns[func] = "object"
        
        return {
            "type": "c_extension",
            "python_functions": python_functions,
            "function_signatures": function_signatures,
            "return_patterns": return_patterns,
            "module_name": file_path.stem
        }
    
    def analyze_python_module_for_tests(self, file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Python –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            tree = ast.parse(content)
        except Exception as e:
            return {"error": f"Cannot parse Python file: {e}"}
        
        functions = []
        classes = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                func_info = {
                    "name": node.name,
                    "args": [arg.arg for arg in node.args.args],
                    "line": node.lineno,
                    "is_public": not node.name.startswith('_'),
                    "has_docstring": ast.get_docstring(node) is not None,
                    "returns": self.analyze_return_type(node)
                }
                functions.append(func_info)
                
            elif isinstance(node, ast.ClassDef):
                class_info = {
                    "name": node.name,
                    "line": node.lineno,
                    "methods": [],
                    "has_docstring": ast.get_docstring(node) is not None
                }
                
                for item in node.body:
                    if isinstance(item, ast.FunctionDef):
                        method_info = {
                            "name": item.name,
                            "args": [arg.arg for arg in item.args.args],
                            "is_public": not item.name.startswith('_'),
                            "is_property": any(isinstance(d, ast.Name) and d.id == 'property' for d in item.decorator_list)
                        }
                        class_info["methods"].append(method_info)
                
                classes.append(class_info)
        
        return {
            "type": "python_module",
            "functions": functions,
            "classes": classes,
            "module_name": file_path.stem
        }
    
    def analyze_return_type(self, node):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        for child in ast.walk(node):
            if isinstance(child, ast.Return):
                if isinstance(child.value, ast.Constant):
                    return type(child.value.value).__name__
                elif isinstance(child.value, ast.Name):
                    return "variable"
                elif isinstance(child.value, ast.Call):
                    return "function_call"
        return "unknown"
    
    def generate_core_tests(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è core –º–æ–¥—É–ª–µ–π"""
        core_modules = [
            "chain", "crypto", "net", "mempool", "wallet"
        ]
        
        generated_count = 0
        
        for module_path, module_info in self.analysis_data.items():
            module_name = module_info.get("module_name", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å core –º–æ–¥—É–ª–µ–º
            is_core = any(core_name in module_name.lower() or core_name in module_path.lower() 
                         for core_name in core_modules)
            
            if is_core and module_info.get("type") == "c_extension":
                test_content = self.generate_c_module_test(module_info, module_path)
                test_file = self.test_dir / "core" / f"test_{module_name}.py"
                
                with open(test_file, 'w', encoding='utf-8') as f:
                    f.write(test_content)
                
                self.generated_tests[f"core/{module_name}"] = {
                    "file": str(test_file),
                    "functions_tested": len(module_info.get("python_functions", [])),
                    "test_type": "core_c_extension"
                }
                generated_count += 1
        
        print(f"   üß™ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è core –º–æ–¥—É–ª–µ–π: {generated_count}")
    
    def generate_service_tests(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è service –º–æ–¥—É–ª–µ–π"""
        service_modules = [
            "service", "app", "bridge", "voting", "vpn", "xchange", "stake"
        ]
        
        generated_count = 0
        
        for module_path, module_info in self.analysis_data.items():
            module_name = module_info.get("module_name", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥—É–ª—å service –º–æ–¥—É–ª–µ–º
            is_service = any(service_name in module_name.lower() or service_name in module_path.lower()
                           for service_name in service_modules)
            
            if is_service:
                if module_info.get("type") == "c_extension":
                    test_content = self.generate_c_module_test(module_info, module_path)
                else:
                    test_content = self.generate_python_module_test(module_info, module_path)
                
                test_file = self.test_dir / "services" / f"test_{module_name}.py"
                
                with open(test_file, 'w', encoding='utf-8') as f:
                    f.write(test_content)
                
                functions_count = len(module_info.get("python_functions", [])) + len(module_info.get("functions", []))
                
                self.generated_tests[f"services/{module_name}"] = {
                    "file": str(test_file),
                    "functions_tested": functions_count,
                    "test_type": f"service_{module_info.get('type')}"
                }
                generated_count += 1
        
        print(f"   üîß –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è service –º–æ–¥—É–ª–µ–π: {generated_count}")
    
    def generate_c_module_test(self, module_info, module_path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –¥–ª—è C –º–æ–¥—É–ª—è"""
        module_name = module_info.get("module_name")
        functions = module_info.get("python_functions", [])
        return_patterns = module_info.get("return_patterns", {})
        
        test_content = f'''"""
Unit tests for {module_name} module
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è {module_name}
"""

import pytest
import unittest
from unittest.mock import Mock, patch, MagicMock

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è
try:
    import CellFrame
    cellframe_available = True
except ImportError:
    cellframe_available = False
    CellFrame = None

@pytest.mark.skipif(not cellframe_available, reason="CellFrame module not available")
class Test{module_name.title().replace('_', '')}:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è {module_name}"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.mock_data = {{}}
        
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        pass
'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        for func in functions:
            return_type = return_patterns.get(func, "object")
            
            test_content += f'''
    
    def test_{func}_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func}"""
        assert hasattr(CellFrame, '{func}'), f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–æ–¥—É–ª–µ CellFrame"
    
    def test_{func}_callable(self):
        """–¢–µ—Å—Ç —á—Ç–æ {func} –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å"""
        func = getattr(CellFrame, '{func}', None)
        assert callable(func), f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π"
    
    def test_{func}_basic_call(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –≤—ã–∑–æ–≤–∞ {func}"""
        try:
            result = CellFrame.{func}()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
'''
            
            if return_type == "None":
                test_content += f'            assert result is None, f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"\n'
            elif return_type == "int":
                test_content += f'            assert isinstance(result, int), f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å int"\n'
            elif return_type == "str":
                test_content += f'            assert isinstance(result, str), f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å str"\n'
            elif return_type == "bool":
                test_content += f'            assert isinstance(result, bool), f"–§—É–Ω–∫—Ü–∏—è {func} –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å bool"\n'
            else:
                test_content += f'            # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–∏–ø: {{type(result)}}\n            assert result is not None or result is None  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n'
            
            test_content += f'''        except Exception as e:
            # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "argument" in str(e).lower() or "parameter" in str(e).lower():
                pytest.skip(f"–§—É–Ω–∫—Ü–∏—è {func} —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {{e}}")
            else:
                pytest.fail(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {func}: {{e}}")
    
    def test_{func}_with_invalid_args(self):
        """–¢–µ—Å—Ç {func} —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        with pytest.raises((TypeError, ValueError, AttributeError)):
            CellFrame.{func}("invalid", "arguments", 123)
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_content += f'''

class Test{module_name.title().replace('_', '')}Integration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è {module_name}"""
    
    @pytest.mark.integration
    def test_module_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π"""
        if not cellframe_available:
            pytest.skip("CellFrame module not available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω
        assert CellFrame is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è
        expected_functions = {functions}
        
        for func_name in expected_functions:
            assert hasattr(CellFrame, func_name), f"–§—É–Ω–∫—Ü–∏—è {{func_name}} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥—É–ª–µ"

if __name__ == '__main__':
    pytest.main([__file__])
'''
        
        return test_content
    
    def generate_python_module_test(self, module_info, module_path):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –¥–ª—è Python –º–æ–¥—É–ª—è"""
        module_name = module_info.get("module_name")
        functions = module_info.get("functions", [])
        classes = module_info.get("classes", [])
        
        test_content = f'''"""
Unit tests for {module_name} module
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è Python –º–æ–¥—É–ª—è {module_name}
"""

import pytest
import unittest
from unittest.mock import Mock, patch, MagicMock
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

try:
    from {module_path.replace('/', '.').replace('.py', '')} import *
    module_available = True
except ImportError as e:
    module_available = False
    import_error = e

@pytest.mark.skipif(not module_available, reason=f"Module not available: {{import_error if 'import_error' in locals() else 'Unknown error'}}")
class Test{module_name.title().replace('_', '')}:
    """–¢–µ—Å—Ç—ã –¥–ª—è Python –º–æ–¥—É–ª—è {module_name}"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        pass
        
    def teardown_method(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        pass
'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        for func in functions:
            if func.get("is_public", True):
                func_name = func.get("name")
                args = func.get("args", [])
                
                test_content += f'''
    
    def test_{func_name}_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_name}"""
        assert '{func_name}' in globals(), f"–§—É–Ω–∫—Ü–∏—è {func_name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
    
    def test_{func_name}_callable(self):
        """–¢–µ—Å—Ç —á—Ç–æ {func_name} –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å"""
        func = globals().get('{func_name}')
        assert callable(func), f"–§—É–Ω–∫—Ü–∏—è {func_name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π"
'''
                
                if len(args) <= 1:  # –§—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ self
                    test_content += f'''
    def test_{func_name}_basic_call(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –≤—ã–∑–æ–≤–∞ {func_name}"""
        try:
            result = {func_name}()
            # –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
            assert True
        except Exception as e:
            if "argument" in str(e).lower():
                pytest.skip(f"–§—É–Ω–∫—Ü–∏—è {func_name} —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            else:
                pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {func_name}: {{e}}")
'''
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤
        for cls in classes:
            cls_name = cls.get("name")
            methods = cls.get("methods", [])
            
            test_content += f'''

class Test{cls_name}:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ {cls_name}"""
    
    def test_{cls_name.lower()}_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ {cls_name}"""
        assert '{cls_name}' in globals(), f"–ö–ª–∞—Å—Å {cls_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    
    def test_{cls_name.lower()}_instantiation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ {cls_name}"""
        cls = globals().get('{cls_name}')
        try:
            instance = cls()
            assert instance is not None
        except Exception as e:
            if "argument" in str(e).lower():
                pytest.skip(f"–ö–ª–∞—Å—Å {cls_name} —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è")
            else:
                pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {cls_name}: {{e}}")
'''
            
            # –¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
            for method in methods:
                if method.get("is_public", True):
                    method_name = method.get("name")
                    test_content += f'''
    
    def test_{cls_name.lower()}_{method_name}_exists(self):
        """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞ {method_name} –≤ –∫–ª–∞—Å—Å–µ {cls_name}"""
        cls = globals().get('{cls_name}')
        assert hasattr(cls, '{method_name}'), f"–ú–µ—Ç–æ–¥ {method_name} –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª–∞—Å—Å–µ {cls_name}"
'''
        
        test_content += f'''

if __name__ == '__main__':
    pytest.main([__file__])
'''
        
        return test_content
    
    def generate_integration_tests(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        integration_test = f'''"""
Integration tests for Python Cellframe
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Python Cellframe
"""

import pytest
import unittest
from unittest.mock import Mock, patch

try:
    import CellFrame
    cellframe_available = True
except ImportError:
    cellframe_available = False

@pytest.mark.integration
@pytest.mark.skipif(not cellframe_available, reason="CellFrame module not available")
class TestCellFrameIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã CellFrame"""
    
    def test_module_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        import CellFrame
        assert CellFrame is not None
    
    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        expected_components = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        cellframe_attrs = [attr for attr in dir(CellFrame) if not attr.startswith('_')]
        
        assert len(cellframe_attrs) > 0, "CellFrame –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã"
    
    def test_module_stability(self):
        """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö"""
        import CellFrame
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        for i in range(10):
            import CellFrame as CF
            assert CF is not None
    
    @pytest.mark.slow
    def test_memory_usage(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        import CellFrame
        import gc
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–æ–¥—É–ª–µ–º
        for i in range(100):
            attrs = dir(CellFrame)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–º—è—Ç—å –Ω–µ —É—Ç–µ–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ
        gc.collect()
        assert True  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–∞–º—è—Ç—å –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å

@pytest.mark.integration 
class TestModuleInteractions:
    """–¢–µ—Å—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
    
    def test_cross_module_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        if not cellframe_available:
            pytest.skip("CellFrame not available")
        
        import CellFrame
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ
        attrs = dir(CellFrame)
        functions = [attr for attr in attrs if callable(getattr(CellFrame, attr, None))]
        
        assert len(functions) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"

if __name__ == '__main__':
    pytest.main([__file__])
'''
        
        integration_file = self.test_dir / "integration" / "test_integration.py"
        with open(integration_file, 'w', encoding='utf-8') as f:
            f.write(integration_test)
        
        self.generated_tests["integration/test_integration"] = {
            "file": str(integration_file),
            "test_type": "integration"
        }
        
        print("   üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def create_test_utilities(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã"""
        # –°–æ–∑–¥–∞–µ–º fixtures
        fixtures_content = '''"""
Test fixtures for Python Cellframe tests
–¢–µ—Å—Ç–æ–≤—ã–µ fixtures –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Python Cellframe
"""

import pytest
from unittest.mock import Mock, MagicMock

@pytest.fixture
def mock_cellframe():
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è CellFrame –º–æ–¥—É–ª—è"""
    mock = MagicMock()
    return mock

@pytest.fixture
def sample_data():
    """–û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return {
        "test_string": "test_value",
        "test_int": 42,
        "test_bool": True,
        "test_list": [1, 2, 3],
        "test_dict": {"key": "value"}
    }

@pytest.fixture
def temp_file(tmp_path):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    file_path = tmp_path / "test_file.txt"
    file_path.write_text("test content")
    return file_path

@pytest.fixture(scope="session")
def cellframe_session():
    """Session-wide fixture –¥–ª—è CellFrame"""
    try:
        import CellFrame
        yield CellFrame
    except ImportError:
        yield None

@pytest.fixture
def test_config():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return {
        "timeout": 30,
        "retries": 3,
        "debug": True
    }
'''
        
        fixtures_file = self.test_dir / "fixtures" / "conftest.py"
        with open(fixtures_file, 'w', encoding='utf-8') as f:
            f.write(fixtures_content)
        
        # –°–æ–∑–¥–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã
        utils_content = '''"""
Test utilities for Python Cellframe tests
–¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ Python Cellframe
"""

import time
import functools
from typing import Any, Callable

def retry_on_failure(max_retries: int = 3, delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ"""
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_retries - 1:
                        time.sleep(delay)
                    
            raise last_exception
        return wrapper
    return decorator

def skip_if_module_missing(module_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                __import__(module_name)
                return func(*args, **kwargs)
            except ImportError:
                import pytest
                pytest.skip(f"Module {module_name} not available")
        return wrapper
    return decorator

class TestHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    
    @staticmethod
    def assert_function_exists(module, function_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ"""
        assert hasattr(module, function_name), f"Function {function_name} not found in module"
        assert callable(getattr(module, function_name)), f"Attribute {function_name} is not callable"
    
    @staticmethod
    def assert_type_or_none(value: Any, expected_type: type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –∏–ª–∏ None"""
        assert value is None or isinstance(value, expected_type), f"Expected {expected_type} or None, got {type(value)}"
    
    @staticmethod
    def safe_call(func: Callable, *args, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            return func(*args, **kwargs)
        except Exception as e:
            return {"error": str(e), "type": type(e).__name__}

def measure_execution_time(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        print(f"Function {func.__name__} executed in {execution_time:.4f} seconds")
        return result
    return wrapper
'''
        
        utils_file = self.test_dir / "utils" / "test_helpers.py"
        with open(utils_file, 'w', encoding='utf-8') as f:
            f.write(utils_content)
        
        print("   üõ†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def generate_test_reports(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö"""
        timestamp = datetime.now().isoformat()
        
        report = {
            "generation_info": {
                "timestamp": timestamp,
                "generator_version": "1.0.0",
                "total_tests_generated": len(self.generated_tests),
                "modules_analyzed": len(self.analysis_data)
            },
            "generated_tests": self.generated_tests,
            "test_structure": {
                "core_tests": len([t for t in self.generated_tests.keys() if t.startswith("core/")]),
                "service_tests": len([t for t in self.generated_tests.keys() if t.startswith("services/")]),
                "integration_tests": len([t for t in self.generated_tests.keys() if t.startswith("integration/")])
            },
            "coverage_analysis": {
                "total_functions_found": sum(
                    len(m.get("python_functions", [])) + len(m.get("functions", []))
                    for m in self.analysis_data.values()
                ),
                "functions_with_tests": sum(
                    t.get("functions_tested", 0) 
                    for t in self.generated_tests.values()
                )
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        reports_dir = Path(".context/analysis")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        with open(reports_dir / "unit_test_generation_report.json", 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary = f"""# üß™ –û—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ unit —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Python Cellframe

**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
**–í–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:** 1.0.0

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:** {len(self.generated_tests)}
- **–ú–æ–¥—É–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {len(self.analysis_data)}
- **Core —Ç–µ—Å—Ç–æ–≤:** {report['test_structure']['core_tests']}
- **Service —Ç–µ—Å—Ç–æ–≤:** {report['test_structure']['service_tests']}
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:** {report['test_structure']['integration_tests']}

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

```
tests/
‚îú‚îÄ‚îÄ core/           # –¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
‚îú‚îÄ‚îÄ services/       # –¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π  
‚îú‚îÄ‚îÄ integration/    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ fixtures/       # –¢–µ—Å—Ç–æ–≤—ã–µ fixtures
‚îî‚îÄ‚îÄ utils/          # –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
```

## üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏

- **–§—É–Ω–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ:** {report['coverage_analysis']['total_functions_found']}
- **–§—É–Ω–∫—Ü–∏–π –ø–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏:** {report['coverage_analysis']['functions_with_tests']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è:** {(report['coverage_analysis']['functions_with_tests'] / max(report['coverage_analysis']['total_functions_found'], 1) * 100):.1f}%

## üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
cd python-cellframe
python -m pytest tests/ -v

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤
python -m pytest tests/core/ tests/services/ -v

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
python -m pytest tests/integration/ -v -m integration

# –ó–∞–ø—É—Å–∫ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
python -m pytest tests/ --cov=CellFrame --cov-report=html
```

## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤**: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏
2. **–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è**: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD**: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏
4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏

---
*–¢–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é Unit Test Generator*
"""
        
        with open(reports_dir / "unit_test_generation_summary.md", 'w', encoding='utf-8') as f:
            f.write(summary)
        
        print(f"   üìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {reports_dir}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ Unit Test Generator for Python Cellframe")
    print("=" * 45)
    
    if not Path("python-cellframe").exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è python-cellframe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ cellframe-node")
        return 1
    
    generator = UnitTestGenerator()
    results = generator.generate_all_tests()
    
    print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è unit —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üß™ –¢–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(generator.generated_tests)}")
    print(f"   üìÅ –ú–æ–¥—É–ª–µ–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(generator.analysis_data)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
    core_tests = len([t for t in generator.generated_tests.keys() if t.startswith("core/")])
    service_tests = len([t for t in generator.generated_tests.keys() if t.startswith("services/")])
    integration_tests = len([t for t in generator.generated_tests.keys() if t.startswith("integration/")])
    
    print(f"   üèóÔ∏è Core —Ç–µ—Å—Ç–æ–≤: {core_tests}")
    print(f"   üîß Service —Ç–µ—Å—Ç–æ–≤: {service_tests}")
    print(f"   üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {integration_tests}")
    
    print(f"\nüìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: .context/analysis/")
    print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 3: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    return 0

if __name__ == '__main__':
    exit(main()) 