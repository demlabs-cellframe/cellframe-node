{
  "context_info": {
    "name": "Cellframe Node - Post-Quantum Blockchain Platform",
    "version": "5.0-development",
    "type": "blockchain_node_project",
    "created": "2025-01-16T15:30:00Z",
    "last_updated": "2025-01-16T15:30:00Z",
    "domain": "blockchain_development",
    "category": "projects"
  },

  "project_overview": {
    "title": "üîó Cellframe Node - –ü–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤–∞—è –±–ª–æ–∫—á–µ–π–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
    "description": "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫—á–µ–π–Ω –Ω–æ–¥–∞ —Å –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DAP (Decentralized Application Platform)",
    "key_features": [
      "Post-quantum cryptography integration",
      "Multi-layer blockchain architecture", 
      "DAP SDK –¥–ª—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
      "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è C/C++ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
      "Python –±–∏–Ω–¥–∏–Ω–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
      "Cross-platform –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (Linux, macOS, Windows, Android)",
      "Integrated mining –∏ consensus –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
      "Built-in wallet –∏ transaction processing"
    ],
    "target_applications": [
      "Blockchain node development",
      "Post-quantum cryptocurrency networks",
      "Decentralized application platforms", 
      "Quantum-resistant smart contracts",
      "High-performance cryptographic services",
      "Cross-platform blockchain clients"
    ]
  },

  "architecture_analysis": {
    "core_components": {
      "cellframe-sdk": {
        "description": "Core SDK —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –±–ª–æ–∫—á–µ–π–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
        "path": "cellframe-sdk/",
        "key_modules": [
          "modules/chain/ - Blockchain core logic",
          "modules/consensus/ - Consensus algorithms (PoW, PoA, PoS)",
          "modules/net/ - Network layer –∏ P2P communication", 
          "modules/wallet/ - Wallet management –∏ transaction signing",
          "modules/mining/ - Mining pools –∏ algorithms",
          "modules/mempool/ - Transaction mempool management",
          "modules/service/ - Various blockchain services"
        ],
        "architecture": "–ú–æ–¥—É–ª—å–Ω–∞—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤"
      },
      "dap-sdk": {
        "description": "Decentralized Application Platform SDK",
        "path": "dap-sdk/",
        "key_modules": [
          "core/ - Basic types –∏ utilities",
          "crypto/ - Post-quantum cryptography",
          "net/ - Network protocols –∏ RPC",
          "global-db/ - Distributed database",
          "io/ - Input/output operations",
          "plugin/ - Plugin system"
        ],
        "architecture": "Cross-platform C library —Å Python –±–∏–Ω–¥–∏–Ω–≥–∞–º–∏"
      },
      "python-cellframe": {
        "description": "Python –±–∏–Ω–¥–∏–Ω–≥–∏ –∏ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API",
        "path": "python-cellframe/",
        "capabilities": [
          "Python API –¥–ª—è blockchain operations",
          "–ü—Ä–∏–º–µ—Ä—ã –∏ –¥–µ–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
          "–ì–æ—Ç–æ–≤—ã–µ –ø–ª–∞–≥–∏–Ω—ã –∏ —Å–µ—Ä–≤–∏—Å—ã",
          "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ Python —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞–º–∏"
        ]
      }
    },

    "build_system": {
      "primary": "CMake-based multi-platform build",
      "dependencies": {
        "core": ["build-essential", "cmake", "libmagic-dev", "libsqlite3-dev"],
        "crypto": ["libjson-c-dev", "libffi-dev"],
        "development": ["python3-dev", "curl", "jq", "xsltproc"],
        "database": ["libpq-dev"],
        "compilation": ["clang"]
      },
      "platforms": ["Linux", "macOS", "Windows", "Android"],
      "configuration": "project.yaml –¥–ª—è dependency management"
    },

    "development_workflow": {
      "version_control": "Git —Å submodules –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
      "ci_cd": "GitLab CI/CD —Å multi-platform testing",
      "documentation": "Integrated docs —Å examples",
      "testing": "Comprehensive test framework –≤ dap-sdk/test-framework/",
      "packaging": "Platform-specific packaging –≤ prod_build/"
    }
  },

  "development_context": {
    "primary_languages": {
      "c": {
        "usage": "Core blockchain implementation",
        "standards": "C99+ —Å GCC/Clang compatibility",
        "key_areas": ["consensus algorithms", "cryptography", "network protocols"],
        "best_practices": [
          "Memory management —Å proper cleanup",
          "Thread-safe operations –¥–ª—è network layer",
          "Modular design —Å clear interfaces",
          "Comprehensive error handling"
        ]
      },
      "python": {
        "usage": "Bindings, tools, –∏ high-level applications",
        "standards": "Python 3.8+ compatibility", 
        "key_areas": ["API wrappers", "development tools", "example applications"],
        "frameworks": ["FastAPI –¥–ª—è RPC", "SQLAlchemy –¥–ª—è DB", "Pytest –¥–ª—è testing"]
      },
      "cmake": {
        "usage": "Cross-platform build configuration",
        "standards": "CMake 3.16+ —Å modern practices",
        "key_areas": ["dependency management", "cross-compilation", "packaging"]
      }
    },

    "cryptography_focus": {
      "post_quantum": {
        "algorithms": ["CRYSTALS-Kyber", "CRYSTALS-Dilithium", "SPHINCS+"],
        "implementation": "Custom optimized implementations –≤ dap-sdk/crypto/",
        "standards": "NIST Post-Quantum Cryptography standards compliance"
      },
      "traditional": {
        "algorithms": ["secp256k1", "ed25519", "AES", "SHA-3"],
        "usage": "Backwards compatibility –∏ hybrid schemes"
      },
      "integration": {
        "approach": "Hybrid classical + post-quantum signatures",
        "performance": "Optimized implementations –¥–ª—è high-throughput",
        "security": "Quantum-resistant by design"
      }
    },

    "blockchain_specifics": {
      "consensus_mechanisms": [
        "Proof of Work (PoW) —Å customizable algorithms",
        "Proof of Authority (PoA) –¥–ª—è permissioned networks", 
        "Delegated Proof of Stake (DPoS)",
        "Hybrid consensus models"
      ],
      "network_layer": {
        "protocols": ["Custom P2P protocol", "JSON-RPC API", "WebSocket support"],
        "features": ["Node discovery", "Block propagation", "Transaction broadcasting"],
        "optimization": "High-performance networking —Å low latency"
      },
      "storage": {
        "backend": "SQLite-based —Å custom indexing",
        "features": ["Transaction history", "Block storage", "State management"],
        "optimization": "Efficient data structures –¥–ª—è fast queries"
      }
    }
  },

  "development_patterns": {
    "code_organization": {
      "modular_design": "–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
      "plugin_architecture": "Extensible —á–µ—Ä–µ–∑ plugin system",
      "api_layers": "–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ API: C core ‚Üí Python bindings ‚Üí High-level apps",
      "configuration": "YAML-based configuration management"
    },

    "best_practices": {
      "memory_management": [
        "RAII patterns –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ",
        "Careful pointer management –≤ C code",
        "Memory leak detection –≤ testing",
        "Proper cleanup –≤ error paths"
      ],
      "error_handling": [
        "Consistent error codes –∏ messages",
        "Graceful degradation –ø—Ä–∏ failures",
        "Comprehensive logging –¥–ª—è debugging",
        "Recovery mechanisms –¥–ª—è network issues"
      ],
      "testing": [
        "Unit tests –¥–ª—è core components",
        "Integration tests –¥–ª—è cross-module functionality",
        "Performance benchmarks",
        "Security testing –¥–ª—è crypto components"
      ],
      "documentation": [
        "API documentation —Å examples",
        "Architecture documentation",
        "Deployment guides",
        "Developer tutorials"
      ]
    },

    "performance_optimization": {
      "crypto_optimization": "SIMD instructions –¥–ª—è crypto operations",
      "network_optimization": "Async I/O –¥–ª—è network operations",
      "memory_optimization": "Pool allocators –¥–ª—è frequent allocations",
      "database_optimization": "Efficient indexing –∏ query optimization"
    }
  },

  "integration_guidelines": {
    "slc_integration": {
      "suggested_templates": [
        "languages/c/c_development_enhanced.json - –î–ª—è core C development",
        "languages/python/python_development.json - –î–ª—è Python bindings",
        "projects/cryptography_project.json - –î–ª—è crypto development",
        "methodologies/defi_security_audit.json - –î–ª—è security review"
      ],
      "workflow_integration": [
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–õ–ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ development workflow",
        "Template-based project structure –¥–ª—è new features",
        "Automated code generation –¥–ª—è boilerplate",
        "Documentation generation –∏–∑ code comments"
      ]
    },

    "development_environment": {
      "required_tools": [
        "CMake 3.16+ –¥–ª—è build management",
        "GCC/Clang –¥–ª—è C compilation", 
        "Python 3.8+ –¥–ª—è bindings development",
        "Git –¥–ª—è version control",
        "Docker –¥–ª—è containerized builds"
      ],
      "recommended_ides": [
        "CLion –¥–ª—è C/C++ development",
        "Cursor IDE —Å –°–õ–ö integration",
        "VS Code —Å C/C++ extensions",
        "PyCharm –¥–ª—è Python development"
      ],
      "debugging_tools": [
        "GDB –¥–ª—è C debugging",
        "Valgrind –¥–ª—è memory analysis",
        "AddressSanitizer –¥–ª—è memory safety",
        "Python debugger –¥–ª—è bindings"
      ]
    }
  },

  "project_roadmap": {
    "current_focus": {
      "phase": "5.0 Development",
      "priorities": [
        "Post-quantum cryptography optimization",
        "Performance improvements –≤ consensus layer",
        "Enhanced Python API",
        "Cross-platform compatibility improvements",
        "Security audit –∏ hardening"
      ]
    },

    "upcoming_features": [
      "WebAssembly support –¥–ª—è smart contracts",
      "Enhanced mining pool capabilities", 
      "Improved network protocol efficiency",
      "Mobile SDK development",
      "Cloud deployment automation"
    ],

    "long_term_vision": [
      "Quantum-resistant blockchain ecosystem",
      "High-performance DAP platform",
      "Enterprise-grade blockchain solutions",
      "Academic research collaboration platform"
    ]
  },

  "development_tasks": {
    "common_scenarios": {
      "new_consensus_algorithm": {
        "description": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ consensus algorithm",
        "steps": [
          "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –≤ cellframe-sdk/modules/consensus/",
          "Implement consensus interface",
          "Add configuration options",
          "Write comprehensive tests",
          "Update documentation"
        ],
        "templates": ["languages/c/c_development_enhanced.json"],
        "estimated_time": "2-4 weeks"
      },
      "python_api_extension": {
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Python API",
        "steps": [
          "Add C functions –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–æ–¥—É–ª–µ",
          "Create Python bindings –≤ python-cellframe/",
          "Write Python tests –∏ examples",
          "Update documentation",
          "Performance testing"
        ],
        "templates": ["languages/python/python_development.json"],
        "estimated_time": "1-2 weeks"
      },
      "crypto_integration": {
        "description": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞",
        "steps": [
          "Implement algorithm –≤ dap-sdk/crypto/",
          "Add tests –¥–ª—è correctness –∏ performance",
          "Integrate —Å existing crypto framework",
          "Update key management",
          "Security review"
        ],
        "templates": ["projects/cryptography_project.json"],
        "estimated_time": "3-6 weeks"
      },
      "network_protocol_update": {
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ network protocol",
        "steps": [
          "Modify protocol –≤ dap-sdk/net/",
          "Update serialization/deserialization",
          "Ensure backwards compatibility",
          "Network testing",
          "Protocol documentation"
        ],
        "templates": ["languages/c/c_development_enhanced.json"],
        "estimated_time": "2-3 weeks"
      }
    },

    "maintenance_tasks": {
      "dependency_updates": "Regular updates —Ç—Ä–µ—Ç—å–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫",
      "security_patches": "Security vulnerability fixes",
      "performance_optimization": "Continuous performance improvements",
      "documentation_updates": "Keep docs up-to-date —Å code changes",
      "testing_improvements": "Expand test coverage –∏ automation"
    }
  },

  "troubleshooting": {
    "common_issues": {
      "build_failures": {
        "symptoms": "CMake configuration –∏–ª–∏ compilation errors",
        "solutions": [
          "Check dependency installation",
          "Verify CMake version compatibility",
          "Check compiler version support",
          "Review build logs –¥–ª—è specific errors"
        ]
      },
      "crypto_errors": {
        "symptoms": "Cryptographic operation failures",
        "solutions": [
          "Verify algorithm implementations",
          "Check key format compatibility",
          "Review random number generation",
          "Test —Å known vectors"
        ]
      },
      "network_issues": {
        "symptoms": "Node connectivity –∏–ª–∏ synchronization problems",
        "solutions": [
          "Check network configuration",
          "Verify port accessibility",
          "Review peer discovery logic",
          "Check protocol version compatibility"
        ]
      },
      "python_binding_issues": {
        "symptoms": "Python import –∏–ª–∏ function call errors",
        "solutions": [
          "Verify Python binding compilation",
          "Check Python version compatibility",
          "Review C API changes",
          "Test bindings independently"
        ]
      }
    },

    "debugging_strategies": {
      "systematic_approach": "Start —Å logs, move to unit tests, then integration tests",
      "tool_usage": "Use appropriate debugging tools –¥–ª—è each layer",
      "reproduction": "Create minimal test cases –¥–ª—è reliable reproduction",
      "documentation": "Document fixes –¥–ª—è future reference"
    }
  },

  "collaboration": {
    "team_structure": {
      "core_developers": "C/C++ blockchain core development",
      "crypto_specialists": "Post-quantum cryptography implementation",
      "python_developers": "Bindings –∏ high-level applications",
      "qa_engineers": "Testing –∏ quality assurance",
      "documentation_team": "Technical writing –∏ user guides"
    },

    "communication_channels": {
      "code_reviews": "GitLab merge requests —Å thorough review process",
      "issue_tracking": "GitLab issues –¥–ª—è bug reports –∏ feature requests",
      "documentation": "Integrated docs —Å code repository",
      "community": "Developer forums –∏ community channels"
    },

    "contribution_guidelines": {
      "code_standards": "Follow project coding standards",
      "testing_requirements": "All changes must include appropriate tests",
      "documentation_requirements": "Update documentation –¥–ª—è user-facing changes",
      "review_process": "Peer review required –¥–ª—è all code changes"
    }
  },

  "navigation_system": {
    "purpose": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è cellframe-node development",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/projects/cellframe_node_context.json",
    "file_role": "project_specific_context_hub",
    "integration": {
      "slc_system": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –°–õ–ö –¥–ª—è intelligent recommendations",
      "cursor_ide": "Auto-loading —á–µ—Ä–µ–∑ project detection",
      "ai_assistant": "JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è specialized guidance"
    },
    "related_contexts": [
      "projects/dap_sdk_project.json",
      "projects/cryptography_project.json", 
      "languages/c/c_development_enhanced.json",
      "languages/python/python_development.json",
      "methodologies/defi_security_audit.json"
    ]
  },

  "ai_integration": {
    "intelligent_suggestions": {
      "context_detection": [
        "Blockchain development patterns",
        "Post-quantum cryptography implementations",
        "Cross-platform C development",
        "Python binding creation",
        "Performance optimization strategies"
      ],
      "auto_recommendations": [
        "Suggest relevant modules –ø—Ä–∏ specific development tasks",
        "Recommend testing strategies –¥–ª—è crypto code",
        "Propose optimization techniques",
        "Guide through debugging processes"
      ]
    },

    "development_assistance": {
      "code_generation": "Template-based code generation –¥–ª—è common patterns",
      "architecture_guidance": "Best practices –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
      "security_review": "Automated security pattern analysis",
      "performance_analysis": "Bottleneck identification –∏ optimization suggestions"
    }
  },

  "success_metrics": {
    "development_efficiency": [
      "Reduced time –¥–ª—è new feature implementation",
      "Improved code quality —á–µ—Ä–µ–∑ automated checks",
      "Faster debugging through better tooling",
      "Enhanced collaboration —á–µ—Ä–µ–∑ clear documentation"
    ],
    "project_health": [
      "Comprehensive test coverage",
      "Regular security audits",
      "Performance benchmarks",
      "Active community engagement"
    ],
    "innovation_goals": [
      "Leading post-quantum blockchain implementation",
      "High-performance DAP platform",
      "Developer-friendly tools –∏ APIs",
      "Academic research contributions"
    ]
  }
}