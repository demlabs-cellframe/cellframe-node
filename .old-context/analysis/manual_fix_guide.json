{
  "title": "Руководство по исправлению проблем Python Cellframe",
  "timestamp": "2025-06-18T16:19:59.043325",
  "sections": {
    "error_handling": {
      "title": "Обработка ошибок",
      "description": "Проблемы с обработкой ошибок Python API",
      "fixes": [
        {
          "problem": "Missing return NULL after PyErr_SetString",
          "solution": "Добавить 'return NULL;' после каждого PyErr_SetString",
          "example_before": "PyErr_SetString(PyExc_ValueError, \"Invalid parameter\");",
          "example_after": "PyErr_SetString(PyExc_ValueError, \"Invalid parameter\");\nreturn NULL;",
          "priority": "CRITICAL"
        }
      ]
    },
    "memory_management": {
      "title": "Управление памятью",
      "description": "Проблемы с malloc/free и утечками памяти",
      "fixes": [
        {
          "problem": "malloc result not checked for NULL",
          "solution": "Добавить проверку NULL после каждого malloc/calloc",
          "example_before": "char *buffer = malloc(size);",
          "example_after": "char *buffer = malloc(size);\nif (buffer == NULL) {\n    PyErr_SetString(PyExc_MemoryError, \"Memory allocation failed\");\n    return NULL;\n}",
          "priority": "HIGH"
        },
        {
          "problem": "Potential memory leak",
          "solution": "Добавить free() для каждого malloc/calloc",
          "example_before": "char *buffer = malloc(size);\n// use buffer\nreturn result;",
          "example_after": "char *buffer = malloc(size);\n// use buffer\nfree(buffer);\nreturn result;",
          "priority": "MEDIUM"
        }
      ]
    },
    "thread_safety": {
      "title": "Потокобезопасность",
      "description": "Проблемы с thread safety",
      "fixes": [
        {
          "problem": "Non-const static variables",
          "solution": "Использовать thread-local storage или синхронизацию",
          "example_before": "static int counter = 0;",
          "example_after": "__thread int counter = 0;  // или использовать mutex",
          "priority": "MEDIUM"
        }
      ]
    },
    "best_practices": {
      "title": "Лучшие практики",
      "description": "Рекомендации по улучшению кода",
      "practices": [
        "Всегда проверяйте возвращаемые значения malloc/calloc",
        "Используйте RAII паттерны где возможно",
        "Добавляйте return NULL после PyErr_SetString",
        "Избегайте глобальных и статических переменных",
        "Используйте const для неизменяемых данных",
        "Добавляйте комментарии к сложной логике"
      ]
    }
  }
}