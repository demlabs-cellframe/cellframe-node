#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è Smart Layered Context CLI
–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤

–í–µ—Ä—Å–∏—è: 2.0.0
–û–±–Ω–æ–≤–ª–µ–Ω–æ: 2025-01-25
"""

import unittest
import sys
import os
import time
import json
from pathlib import Path
from io import StringIO
import subprocess
import importlib.util

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    import coverage
    COVERAGE_AVAILABLE = True
except ImportError:
    COVERAGE_AVAILABLE = False
    print("‚ö†Ô∏è  Coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install coverage")


class SLCTestRunner:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è –°–õ–ö"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.tests_dir = self.project_root / "tests"
        self.results = {
            'total_tests': 0,
            'passed': 0,
            'failed': 0,
            'errors': 0,
            'skipped': 0,
            'coverage': None,
            'execution_time': 0,
            'test_suites': {}
        }
    
    def discover_test_suites(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤"""
        test_suites = {}
        
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        basic_tests_path = self.tests_dir / "cli" / "test_cli_basic.py"
        if basic_tests_path.exists():
            test_suites['basic'] = {
                'path': basic_tests_path,
                'description': '–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞',
                'priority': 1
            }
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã CLI (–ë–ï–ó –ü–†–û–ü–£–°–ö–û–í)
        real_cli_tests_path = self.tests_dir / "cli" / "test_real_cli_status.py"
        if real_cli_tests_path.exists():
            test_suites['real_cli'] = {
                'path': real_cli_tests_path,
                'description': '–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CLI —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤)',
                'priority': 2
            }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ (—Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π)
        core_tests_path = self.tests_dir / "cli" / "test_core_commands.py"
        if core_tests_path.exists():
            test_suites['core_commands'] = {
                'path': core_tests_path,
                'description': '–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ CLI (—Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏)',
                'priority': 3
            }
        
        return test_suites
    
    def run_test_suite(self, suite_name, suite_info):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞"""
        print(f"\n{'='*60}")
        print(f"üß™ –ó–ê–ü–£–°–ö: {suite_info['description']}")
        print(f"üìÅ –§–∞–π–ª: {suite_info['path']}")
        print(f"{'='*60}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
        loader = unittest.TestLoader()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤
        spec = importlib.util.spec_from_file_location(suite_name, suite_info['path'])
        test_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(test_module)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
        suite = loader.loadTestsFromModule(test_module)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        stream = StringIO()
        runner = unittest.TextTestRunner(
            stream=stream, 
            verbosity=2,
            buffer=True
        )
        
        start_time = time.time()
        result = runner.run(suite)
        execution_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        suite_results = {
            'tests_run': result.testsRun,
            'failures': len(result.failures),
            'errors': len(result.errors),
            'skipped': len(result.skipped) if hasattr(result, 'skipped') else 0,
            'success_rate': ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100) if result.testsRun > 0 else 0,
            'execution_time': execution_time,
            'output': stream.getvalue()
        }
        
        self.results['test_suites'][suite_name] = suite_results
        self.results['total_tests'] += result.testsRun
        self.results['passed'] += (result.testsRun - len(result.failures) - len(result.errors))
        self.results['failed'] += len(result.failures)
        self.results['errors'] += len(result.errors)
        self.results['skipped'] += suite_results['skipped']
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–±–æ—Ä–∞
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ë–û–†–ê '{suite_name.upper()}':")
        print(f"   üéØ –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.testsRun}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {result.testsRun - len(result.failures) - len(result.errors)}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(result.failures)}")
        print(f"   üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {suite_results['skipped']}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {suite_results['success_rate']:.1f}%")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        if result.failures:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test, traceback in result.failures:
                print(f"   ‚Ä¢ {test}: {traceback.split('AssertionError:')[-1].strip()}")
        
        if result.errors:
            print(f"\nüí• –û–®–ò–ë–ö–ò:")
            for test, traceback in result.errors:
                print(f"   ‚Ä¢ {test}: {traceback.split('Error:')[-1].strip()}")
        
        return suite_results
    
    def run_coverage_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"""
        if not COVERAGE_AVAILABLE:
            return None
        
        print(f"\n{'='*60}")
        print("üìä –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –ö–û–î–ê")
        print(f"{'='*60}")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
            cov = coverage.Coverage()
            cov.start()
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            cov.stop()
            cov.save()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            stream = StringIO()
            cov.report(file=stream)
            coverage_report = stream.getvalue()
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
            print(coverage_report)
            
            return coverage_report
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: {e}")
            return None
    
    def run_cli_integration_tests(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã CLI"""
        print(f"\n{'='*60}")
        print("üîß –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ CLI")
        print(f"{'='*60}")
        
        cli_tests = [
            ("./slc help", "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã help"),
            ("./slc status", "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã status"),
            ("./slc templates", "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã templates"),
            ("./slc list", "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã list")
        ]
        
        integration_results = {
            'total': len(cli_tests),
            'passed': 0,
            'failed': 0,
            'details': []
        }
        
        for command, description in cli_tests:
            try:
                print(f"\nüß™ {description}: {command}")
                result = subprocess.run(
                    command.split(), 
                    capture_output=True, 
                    text=True, 
                    timeout=10,
                    cwd=self.project_root
                )
                
                if result.returncode == 0:
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ (–∫–æ–¥: {result.returncode})")
                    integration_results['passed'] += 1
                    integration_results['details'].append({
                        'command': command,
                        'status': 'success',
                        'return_code': result.returncode
                    })
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ (–∫–æ–¥: {result.returncode})")
                    if result.stderr:
                        print(f"   üìù –û—à–∏–±–∫–∞: {result.stderr[:100]}...")
                    integration_results['failed'] += 1
                    integration_results['details'].append({
                        'command': command,
                        'status': 'failed',
                        'return_code': result.returncode,
                        'error': result.stderr
                    })
                    
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ Timeout")
                integration_results['failed'] += 1
                integration_results['details'].append({
                    'command': command,
                    'status': 'timeout'
                })
            except Exception as e:
                print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                integration_results['failed'] += 1
                integration_results['details'].append({
                    'command': command,
                    'status': 'exception',
                    'error': str(e)
                })
        
        success_rate = (integration_results['passed'] / integration_results['total']) * 100
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–û–í:")
        print(f"   üéØ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {integration_results['total']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {integration_results['passed']}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {integration_results['failed']}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        return integration_results
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{'='*80}")
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SMART LAYERED CONTEXT CLI")
        print(f"{'='*80}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_success_rate = (self.results['passed'] / self.results['total_tests']) * 100 if self.results['total_tests'] > 0 else 0
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.results['total_tests']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.results['passed']}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.results['failed']}")
        print(f"   üí• –û—à–∏–±–æ–∫: {self.results['errors']}")
        print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.results['skipped']}")
        print(f"   üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {total_success_rate:.1f}%")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.results['execution_time']:.2f}—Å")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –Ω–∞–±–æ—Ä–∞–º
        print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –¢–ï–°–¢–û–í–´–ú –ù–ê–ë–û–†–ê–ú:")
        for suite_name, suite_results in self.results['test_suites'].items():
            status_emoji = "‚úÖ" if suite_results['success_rate'] >= 90 else "‚ö†Ô∏è" if suite_results['success_rate'] >= 70 else "‚ùå"
            print(f"   {status_emoji} {suite_name.upper()}: {suite_results['success_rate']:.1f}% ({suite_results['tests_run']} —Ç–µ—Å—Ç–æ–≤)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if total_success_rate >= 95:
            print("   üéâ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! CLI —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞.")
        elif total_success_rate >= 80:
            print("   üëç –•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        elif total_success_rate >= 60:
            print("   ‚ö†Ô∏è  –°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
        else:
            print("   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ JSON
        report_data = {
            'timestamp': time.time(),
            'summary': {
                'total_tests': self.results['total_tests'],
                'passed': self.results['passed'],
                'failed': self.results['failed'],
                'errors': self.results['errors'],
                'skipped': self.results['skipped'],
                'success_rate': total_success_rate,
                'execution_time': self.results['execution_time']
            },
            'test_suites': self.results['test_suites']
        }
        
        report_file = self.project_root / "tests" / "test_results.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        return total_success_rate
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø SMART LAYERED CONTEXT CLI")
        print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        
        start_time = time.time()
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
        test_suites = self.discover_test_suites()
        print(f"\nüîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: {len(test_suites)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä
        for suite_name, suite_info in sorted(test_suites.items(), key=lambda x: x[1]['priority']):
            self.run_test_suite(suite_name, suite_info)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã CLI
        integration_results = self.run_cli_integration_tests()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage_report = self.run_coverage_analysis()
        self.results['coverage'] = coverage_report
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.results['execution_time'] = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_success_rate = self.generate_final_report()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if final_success_rate >= 80:
            return 0  # –£—Å–ø–µ—Ö
        else:
            return 1  # –ù–µ—É–¥–∞—á–∞


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    runner = SLCTestRunner()
    exit_code = runner.run_all_tests()
    
    sys.exit(exit_code)


if __name__ == "__main__":
    main() 