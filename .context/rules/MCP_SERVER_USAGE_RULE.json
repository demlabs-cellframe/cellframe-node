{
  "rule_id": "MCP_SERVER_USAGE_RULE",
  "title": "Правила использования MCP сервера DAP SDK",
  "description": "Обязательные правила для работы с MCP сервером через скрипт управления",
  "version": "1.0.0",
  "created": "2025-09-11T20:25:00Z",
  "updated": "2025-09-11T20:25:00Z",
  "priority": "HIGH",
  "category": "tools",
  "scope": ["mcp_server", "dap_sdk", "automation"],
  "rules": {
    "mandatory_usage": {
      "description": "Обязательное использование скрипта управления для работы с MCP сервером",
      "requirements": [
        "Всегда использовать /home/naeper/work/cellframe-node/dap-sdk/docs/mcp_server/mcp_server_ctl для управления MCP сервером",
        "Запрещено запускать MCP сервер напрямую через python или другие способы",
        "Использовать только команды скрипта: start, stop, restart, status, logs, test"
      ],
      "examples": [
        "./mcp_server_ctl start - запуск сервера",
        "./mcp_server_ctl status - проверка статуса",
        "./mcp_server_ctl logs - просмотр логов",
        "./mcp_server_ctl stop - остановка сервера"
      ]
    },
    "server_management": {
      "description": "Правила управления сервером",
      "requirements": [
        "Перед запуском нового сервера всегда проверять статус существующего",
        "При обнаружении работающего сервера - использовать restart вместо start",
        "Обязательно проверять логи при ошибках запуска",
        "Использовать команду test для проверки работоспособности"
      ]
    },
    "project_structure": {
      "description": "Структура проекта MCP сервера",
      "location": "/home/naeper/work/cellframe-node/dap-sdk/docs/mcp_server/",
      "components": {
        "core": "Основные модули (context.py, tools.py, server.py)",
        "tests": "Тесты всех компонентов",
        "utils": "Вспомогательные функции",
        "mcp_server_ctl": "Скрипт управления сервером",
        "run_server_daemon.py": "Демон для фонового запуска"
      }
    },
    "development_workflow": {
      "description": "Рабочий процесс разработки",
      "requirements": [
        "При изменении кода сервера - использовать restart для применения изменений",
        "Запускать тесты командой ./mcp_server_ctl test перед коммитом",
        "Проверять логи на наличие ошибок после изменений",
        "Использовать status для мониторинга работы сервера"
      ]
    }
  },
  "enforcement": {
    "level": "STRICT",
    "violations": [
      "Прямой запуск python run_server.py или python3 mcp_server.py",
      "Использование nohup или других способов фонового запуска",
      "Игнорирование команд скрипта управления"
    ],
    "consequences": "Нарушение правил может привести к конфликтам процессов и нестабильной работе"
  },
  "integration": {
    "slc_commands": [
      "При работе с MCP сервером всегда использовать mcp_server_ctl",
      "Добавить проверку статуса MCP сервера в рабочие процессы",
      "Интегрировать команды управления в автоматизированные скрипты"
    ]
  },
  "monitoring": {
    "health_check": "./mcp_server_ctl status",
    "log_monitoring": "./mcp_server_ctl logs",
    "restart_procedure": "./mcp_server_ctl restart",
    "test_execution": "./mcp_server_ctl test"
  }
}

