"""
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ CLI
"""

import json
import os
from pathlib import Path
from typing import Dict, Any, List, Union


class BaseCommand:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥"""
    
    name = ""
    description = ""
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        pass
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        raise NotImplementedError
    
    def validate_args(self, args) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
        return True
    
    def print_error(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        print(f"‚ùå {message}")
    
    def print_success(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        print(f"‚úÖ {message}")
    
    def print_warning(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        print(f"‚ö†Ô∏è {message}")


class ContextAwareCommand(BaseCommand):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
    
    def validate_args(self, args) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        return True
    
    def execute(self, args) -> int:
        """
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è execute —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π execute_with_context
        """
        try:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç execute_with_context, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if hasattr(self, 'execute_with_context') and callable(getattr(self, 'execute_with_context')):
                execution_result = self.execute_with_context(args)
                
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≤—ã–≤–æ–¥–∏–º JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç
                if isinstance(execution_result, dict):
                    self.output_json_context(execution_result)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if isinstance(execution_result, dict):
                    return 0 if execution_result.get("success", True) else 1
                else:
                    return 0
            else:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                raise NotImplementedError(f"–ö–æ–º–∞–Ω–¥–∞ {self.__class__.__name__} –¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å execute –∏–ª–∏ execute_with_context")
                
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return 1
    
    def output_json_context(self, data: Dict[str, Any], expand_files: bool = True):
        """
        –í—ã–≤–æ–¥–∏—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
            expand_files: –ï—Å–ª–∏ True, –∑–∞–º–µ–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        """
        print("\n" + "=" * 60)
        print("ü§ñ JSON –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø AI:")
        print("=" * 60)
        
        if expand_files:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            self._file_index = {}  # normalized_path -> file_id
            self._loaded_files = {}  # file_id -> content
            self._file_counter = 0
            data = self._expand_file_references(data)
            
            # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            # self._post_process_loaded_files()  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫—É
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤—ã–π JSON
            if self._loaded_files:
                data["loaded_files"] = self._loaded_files
                data["file_index_info"] = {
                    "total_files": len(self._loaded_files),
                    "description": "–ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "ref_format": "–°—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç {'$ref': '#/loaded_files/file_XXX'}"
                }
            
            # –û—á–∏—â–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            loaded_files_backup = self._loaded_files.copy()
            self._file_index = {}
            self._loaded_files = {}
            self._file_counter = 0
        
        print(json.dumps(data, indent=2, ensure_ascii=False))
        print("=" * 60)
    
    def _post_process_loaded_files(self):
        """
        –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        """
        if not hasattr(self, '_loaded_files'):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        file_ids = list(self._loaded_files.keys())
        
        for file_id in file_ids:
            file_info = self._loaded_files[file_id]
            if file_info.get('_needs_recursive_processing', False):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                processed_content = self._expand_file_references(file_info['content'], max_depth=10, current_depth=1)
                file_info['content'] = processed_content
                # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                file_info.pop('_needs_recursive_processing', None)
    
    def _expand_file_references(self, data: Union[Dict, List, str], max_depth: int = 10, current_depth: int = 0, context_file_path: str = None, only_from_file_blocks: bool = True) -> Union[Dict, List, str]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            current_depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤
        """
        if current_depth >= max_depth:
            return data
        
        if isinstance(data, dict):
            result = {}
            for key, value in data.items():
                if key in ["suggested_files_to_load", "files_to_load", "related_files"] and isinstance(value, list):
                    # –°–û–ó–î–ê–ï–ú –ê–õ–ò–ê–°–´ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
                    result[key] = self._create_file_aliases(value, current_depth + 1, context_file_path)
                else:
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if only_from_file_blocks:
                        # –í —Ä–µ–∂–∏–º–µ only_from_file_blocks –ù–ï –∏—â–µ–º —Ñ–∞–π–ª—ã –≤ –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                        result[key] = self._expand_file_references(value, max_depth, current_depth + 1, context_file_path, only_from_file_blocks)
                    else:
                        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—â–µ–º —Ñ–∞–π–ª—ã –≤–µ–∑–¥–µ
                        result[key] = self._expand_file_references(value, max_depth, current_depth + 1, context_file_path, only_from_file_blocks)
            return result
        
        elif isinstance(data, list):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            result = []
            for item in data:
                if not only_from_file_blocks and isinstance(item, str) and self._looks_like_file_path(item):
                    # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
                    resolved_path = self._resolve_relative_path(item, context_file_path)
                    file_content = self._load_file_content(resolved_path)
                    result.append(file_content)
                else:
                    result.append(self._expand_file_references(item, max_depth, current_depth + 1, context_file_path, only_from_file_blocks))
            return result
        
        elif isinstance(data, str):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
            if not only_from_file_blocks and self._looks_like_file_path(data):
                resolved_path = self._resolve_relative_path(data, context_file_path)
                return self._load_file_content(resolved_path)
            return data
        
        return data
    
    def _create_file_aliases(self, file_paths: List[str], current_depth: int, context_file_path: str = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–ª–∏–∞—Å—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤–º–µ—Å—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
        Args:
            file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            current_depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            context_file_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –≥–¥–µ –∫–ª—é—á = –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–∏–µ = –∞–ª–∏–∞—Å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        """
        file_aliases = {}
        
        for file_path in file_paths:
            if isinstance(file_path, str):
                # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                resolved_path = self._resolve_relative_path(file_path, context_file_path)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–µ
                normalized_path = self._normalize_path(resolved_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –∏–Ω–¥–µ–∫—Å–µ
                if hasattr(self, '_file_index') and normalized_path in self._file_index:
                    file_id = self._file_index[normalized_path]
                    file_aliases[file_path] = {
                        "$ref": f"#/loaded_files/{file_id}",
                        "$file_path": file_path,
                        "$normalized_path": normalized_path,
                        "$note": "–ê–ª–∏–∞—Å –Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
                    }
                else:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –∏–Ω–¥–µ–∫—Å–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                    content = self._load_file_content(resolved_path)
                    
                    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞ –∏ —Ñ–∞–π–ª —Ç–µ–ø–µ—Ä—å –≤ –∏–Ω–¥–µ–∫—Å–µ, —Å–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å
                    if hasattr(self, '_file_index') and normalized_path in self._file_index:
                        file_id = self._file_index[normalized_path]
                        file_aliases[file_path] = {
                            "$ref": f"#/loaded_files/{file_id}",
                            "$file_path": file_path,
                            "$normalized_path": normalized_path,
                            "$note": "–ê–ª–∏–∞—Å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
                        }
                    else:
                        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                        file_aliases[file_path] = content  # —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
        
        return file_aliases

    def _load_files_as_dict(self, file_paths: List[str], current_depth: int, context_file_path: str = None) -> Dict[str, Any]:
        """
        DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ _create_file_aliases –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
        
        Args:
            file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            current_depth: –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –≥–¥–µ –∫–ª—é—á = –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∑–Ω–∞—á–µ–Ω–∏–µ = —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        """
        # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        return self._create_file_aliases(file_paths, current_depth, context_file_path)
    
    def _load_file_content(self, file_path: str) -> Union[Dict, List, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
        normalized_path = self._normalize_path(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å - –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É
        if hasattr(self, '_file_index') and normalized_path in self._file_index:
            file_id = self._file_index[normalized_path]
            return {
                "$ref": f"#/loaded_files/{file_id}",
                "$file_path": file_path,
                "$normalized_path": normalized_path,
                "$note": "–°—Å—ã–ª–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"
            }
        
        try:
            # DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã
            # print(f"DEBUG: Loading file: {file_path}")
            # print(f"DEBUG: base_path type: {type(self.base_path)}, value: {self.base_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—É—Ç–µ–π
            if file_path.startswith('/'):
                # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
                full_path = Path(file_path)
            elif file_path.startswith('./'):
                # –ü—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ./ - —É–±–∏—Ä–∞–µ–º ./ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π
                clean_path = file_path[2:]  # –£–±–∏—Ä–∞–µ–º './'
                if clean_path.startswith('.context/') and Path(self.base_path).name == '.context':
                    # –£–±–∏—Ä–∞–µ–º .context/ –∏–∑ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ –µ—Å–ª–∏ base_path —É–∂–µ .context
                    relative_path = clean_path[9:]  # –£–±–∏—Ä–∞–µ–º '.context/'
                    full_path = Path(self.base_path) / relative_path
                else:
                    full_path = Path(self.base_path) / clean_path
            elif file_path.startswith('.context/'):
                # –ü—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å .context/ - —É–±–∏—Ä–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ base_path —É–∂–µ .context
                if Path(self.base_path).name == '.context':
                    # –£–±–∏—Ä–∞–µ–º .context/ –∏–∑ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏
                    relative_path = file_path[9:]  # –£–±–∏—Ä–∞–µ–º '.context/'
                    full_path = Path(self.base_path) / relative_path
                else:
                    # base_path –Ω–µ .context - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    full_path = Path(self.base_path) / file_path
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                # print(f"DEBUG: Creating path from base_path={self.base_path} (type: {type(self.base_path)}) + file_path={file_path}")
                if isinstance(self.base_path, str):
                    # –ï—Å–ª–∏ base_path —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Path
                    full_path = Path(self.base_path) / file_path
                else:
                    full_path = self.base_path / file_path
            
            if not full_path.exists():
                return f"[FILE_NOT_FOUND: {file_path} -> {full_path}]"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã)
            if full_path.stat().st_size > 100 * 1024:  # 100KB
                return f"[FILE_TOO_LARGE: {file_path} ({full_path.stat().st_size} bytes)]"
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            result = None
            if file_path.endswith('.json'):
                try:
                    result = json.loads(content)
                except json.JSONDecodeError:
                    result = f"[INVALID_JSON: {file_path}]"
            else:
                # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
                if len(content) > 5000:  # 5000 —Å–∏–º–≤–æ–ª–æ–≤
                    result = content[:5000] + f"\n[TRUNCATED: {len(content) - 5000} more characters]"
                else:
                    result = content
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å
            if hasattr(self, '_file_index') and hasattr(self, '_loaded_files'):
                self._file_counter += 1
                file_id = f"file_{self._file_counter:03d}"
                self._file_index[normalized_path] = file_id
                
                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ä–∞–∑—É
                processed_result = result
                if isinstance(result, dict):
                    processed_result = self._expand_file_references(result, max_depth=10, current_depth=1, context_file_path=file_path, only_from_file_blocks=True)
                
                self._loaded_files[file_id] = {
                    "file_path": file_path,
                    "normalized_path": normalized_path,
                    "content": processed_result
                }
            
            return result
            
        except Exception as e:
            result = f"[ERROR_LOADING: {file_path} - {str(e)}]"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏–Ω–¥–µ–∫—Å —Ç–æ–∂–µ
            if hasattr(self, '_file_index') and hasattr(self, '_loaded_files'):
                self._file_counter += 1
                file_id = f"file_{self._file_counter:03d}"
                self._file_index[normalized_path] = file_id
                self._loaded_files[file_id] = {
                    "file_path": file_path,
                    "normalized_path": normalized_path,
                    "content": result,
                    "error": True
                }
            
            return result
    
    def _resolve_relative_path(self, file_path: str, context_file_path: str = None) -> str:
        """
        –†–∞–∑—Ä–µ—à–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º)
            context_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥–µ—Ç —Å—Å—ã–ª–∫–∞
            
        Returns:
            –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        if not file_path:
            return file_path
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å .context/ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (file_path.startswith('/') or 
            file_path.startswith('.context/') or 
            file_path.startswith('./')):
            return file_path
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        if not context_file_path:
            return file_path
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Å–ª–µ—à–µ–π - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –ø–∞–ø–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if '/' not in file_path:
            try:
                context_dir = Path(context_file_path).parent
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π —Ñ–∞–π–ª
                potential_path = context_dir / file_path
                if (self.base_path / potential_path).exists():
                    return str(potential_path)
            except Exception:
                pass
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
        return file_path
    
    def _normalize_path(self, file_path: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ _load_file_content)
            if file_path.startswith('/'):
                full_path = Path(file_path)
            elif file_path.startswith('./'):
                clean_path = file_path[2:]  # –£–±–∏—Ä–∞–µ–º './'
                if clean_path.startswith('.context/') and self.base_path.name == '.context':
                    relative_path = clean_path[9:]  # –£–±–∏—Ä–∞–µ–º '.context/'
                    full_path = self.base_path / relative_path
                else:
                    full_path = self.base_path / clean_path
            elif file_path.startswith('.context/'):
                if self.base_path.name == '.context':
                    relative_path = file_path[9:]  # –£–±–∏—Ä–∞–µ–º '.context/'
                    full_path = self.base_path / relative_path
                else:
                    full_path = self.base_path / file_path
            else:
                full_path = self.base_path / file_path
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            return str(full_path.resolve())
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
            return file_path
    
    def _looks_like_file_path(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        
        Args:
            text: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        if not isinstance(text, str) or len(text) < 3:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã CLI –∏ —Å–∫—Ä–∏–ø—Ç—ã Python
        if (text.startswith('./slc ') or text.startswith('slc ') or text.startswith('—Å–ª–∫ ') or
            text.startswith('python3 ') or text.startswith('python ') or 
            ' load-context ' in text or ' -c ' in text):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–∫—Ä–æ–º–µ –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∞—Ö)
        if (' - ' in text or 
            text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å ') or text.startswith('–§–∞–π–ª ') or
            text.startswith('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π ') or text.startswith('AI/ML ') or
            text.startswith('–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è ') or text.startswith('–ë–∞–∑–æ–≤—ã–µ ') or
            text.startswith('Python ') or text.startswith('Async/') or
            '—à–∞–±–ª–æ–Ω—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' in text or '–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è' in text or
            '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥' in text or '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã' in text or
            '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞' in text or '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏' in text or
            'support' in text):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º–∞—Å–∫–∏ —Ñ–∞–π–ª–æ–≤, —à–∞–±–ª–æ–Ω—ã, npm –ø–∞–∫–µ—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
        if (text.startswith('*') or text.endswith('*') or 
            'test_*.py' in text or '*_test.py' in text or
            'async/await' in text or text.startswith('@') or
            '/' in text and ('Draft/' in text or 'Review/' in text or 'Published' in text) or
            text in ['requirements.txt', 'dev-requirements.txt', 'environment.yml', 'conda-lock.yml']):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º URL
        if text.startswith('http') or '://' in text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        file_extensions = ['.json', '.py', '.md', '.txt', '.yaml', '.yml', '.js', '.ts', '.sh']
        has_extension = any(text.endswith(ext) for ext in file_extensions)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å
        if has_extension:
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            if (len(text.split()) > 3 or 
                any(word in text.lower() for word in ['–¥–ª—è', '—Å–∏—Å—Ç–µ–º–∞', '—Ñ–∞–π–ª', '–º–æ–¥—É–ª—å', '—à–∞–±–ª–æ–Ω'])):
                return False
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—É—Ç–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–ø–∞–ø–∫–∏)
        if '/' in text and not ' ' in text:
            # –ü—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            parts = text.split('/')
            if (len(parts) > 1 and 
                all(part.strip() and not ' ' in part for part in parts) and
                not any(part.startswith('.') and len(part) > 4 for part in parts)):
                return True
        
        return False


class CommandRegistry:
    """–†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥ CLI"""
    
    def __init__(self):
        self._commands: Dict[str, BaseCommand] = {}
    
    def register(self, command: BaseCommand):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        self._commands[command.name] = command
    
    def get_command(self, name: str) -> BaseCommand:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–º–µ–Ω–∏
        
        Args:
            name: –ò–º—è –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        return self._commands.get(name)
    
    def get_all_commands(self) -> Dict[str, BaseCommand]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return self._commands.copy()
    
    def list_commands(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –∫–æ–º–∞–Ω–¥"""
        return list(self._commands.keys()) 