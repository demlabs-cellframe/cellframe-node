"""
–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã: templates, search, info, create, recommend

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand
from core.template_manager import TemplateManager


class TemplatesCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ templates - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.template_manager = TemplateManager(base_path)
    
    @property
    def name(self) -> str:
        return "templates"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--category", "-c",
            help="–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã templates"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã Smart Layered Context")
        print("=" * 50)
        
        templates = self.template_manager.list_templates(args.category)
        
        if args.format == "json":
            print(json.dumps(templates, indent=2, ensure_ascii=False))
            return 0
        
        if not any(templates.values()):
            self.print_warning("–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 1
        
        total_templates = 0
        for category, template_list in templates.items():
            if template_list:
                print(f"\nüìÇ {category.upper()}:")
                for template in template_list:
                    print(f"   üìÑ {template}")
                    total_templates += 1
        
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {total_templates}")
        return 0


class SearchCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ search - –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.template_manager = TemplateManager(base_path)
    
    @property
    def name(self) -> str:
        return "search"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "query",
            help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã search"""
        print(f"üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: '{args.query}'")
        print("=" * 50)
        
        results = self.template_manager.search_templates(args.query)
        
        if args.format == "json":
            print(json.dumps(results, indent=2, ensure_ascii=False))
            return 0
        
        if not any(results.values()):
            self.print_warning(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{args.query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("   ‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å")
            print("   ‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            print("   ‚Ä¢ python3 tools/scripts/slc_cli.py list - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤")
            return 1
        
        total_found = 0
        for category, template_list in results.items():
            print(f"\nüìÇ {category.upper()}:")
            for template in template_list:
                print(f"   üìÑ {template}")
                total_found += 1
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_found}")
        return 0


class InfoCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.template_manager = TemplateManager(base_path)
    
    @property
    def name(self) -> str:
        return "info"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "template_path",
            help="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ai_ml/prompt_engineering.json)"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã info"""
        template_info = self.template_manager.get_template_info(args.template_path)
        
        if not template_info:
            self.print_error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.template_path}")
            return 1
        
        if template_info.get("error"):
            self.print_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {template_info['error']}")
            return 1
        
        if args.format == "json":
            print(json.dumps(template_info, indent=2, ensure_ascii=False))
            return 0
        
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ: {args.template_path}")
        print("=" * 60)
        print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {template_info.get('name', 'Unknown')}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {template_info.get('description', 'No description')}")
        print(f"üè∑Ô∏è  –í–µ—Ä—Å–∏—è: {template_info.get('version', '1.0.0')}")
        print(f"üéØ –î–æ–º–µ–Ω: {template_info.get('domain', 'unknown')}")
        print(f"üìä –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: {template_info.get('applicability', 'Unknown')}")
        
        target_projects = template_info.get('target_projects', [])
        if target_projects:
            print(f"\nüéØ –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            for project in target_projects:
                print(f"   ‚Ä¢ {project}")
        
        print(f"\nüí° –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print(f"   python3 tools/scripts/slc_cli.py create {args.template_path} my-project")
        
        return 0


class TplCreateCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ tpl-create - —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.template_manager = TemplateManager(base_path)
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ProjectGenerator –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from ..core.project_generator import ProjectGenerator
        self.project_generator = ProjectGenerator(base_path)
    
    @property
    def name(self) -> str:
        return "tpl-create"
    
    @property
    def description(self) -> str:
        return "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "template_path",
            help="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ai_ml/prompt_engineering.json)"
        )
        parser.add_argument(
            "project_name",
            help="–ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
        )
        parser.add_argument(
            "--output-dir", "-o",
            default=".",
            help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)"
        )
        parser.add_argument(
            "--force",
            action="store_true",
            help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç"
        )
    
    def validate_args(self, args: argparse.Namespace) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã create"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
        if not args.project_name.strip():
            self.print_error("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = ['/', '\\', ':', '*', '?', '"', '<', '>', '|']
        if any(char in args.project_name for char in invalid_chars):
            self.print_error(f"–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(invalid_chars)}")
            return False
        
        return True
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã create"""
        if not self.validate_args(args):
            return 1
        
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '{args.project_name}' –∏–∑ —à–∞–±–ª–æ–Ω–∞ {args.template_path}")
        print("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_info = self.template_manager.get_template_info(args.template_path)
        if not template_info or template_info.get("error"):
            self.print_error(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {args.template_path}")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        from pathlib import Path
        output_path = Path(args.output_dir) / args.project_name
        
        if output_path.exists() and not args.force:
            self.print_error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_path}")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏")
            return 1
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é ProjectGenerator
        print(f"üìã –®–∞–±–ª–æ–Ω: {template_info.get('name', 'Unknown')}")
        print(f"üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_path}")
        
        result = self.project_generator.create_project(
            args.template_path,
            args.project_name, 
            args.output_dir,
            args.force
        )
        
        if result["success"]:
            self.print_success(f"–ü—Ä–æ–µ–∫—Ç '{args.project_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {result['project_path']}")
            print(f"üìã –®–∞–±–ª–æ–Ω: {result['template_name']}")
            print(f"üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['files_created']}")
            
            print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"   cd {result['project_path']}")
            print(f"   # –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ README.md")
            return 0
        else:
            self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {result['error']}")
            return 1 