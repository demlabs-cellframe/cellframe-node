#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –°–õ–ö

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- organize: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
- cleanup: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
- create-rule: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
- monitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
- org-stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

–í–µ—Ä—Å–∏—è: 1.1.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import argparse
import json
import os
import sys
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
import threading
import hashlib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand, ContextAwareCommand
from ..core.file_organization_engine import FileOrganizationEngine, AutoCleanupSystem, quick_organize, cleanup_project


class OrganizeCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    @property
    def name(self) -> str:
        return "organize"
    
    @property
    def description(self) -> str:
        return "üóÇÔ∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.engine = FileOrganizationEngine(base_path) if FileOrganizationEngine else None
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "paths",
            nargs="*",
            help="–ü—É—Ç–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç)"
        )
        
        parser.add_argument(
            "--dry-run", "-n",
            action="store_true",
            help="–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
        
        parser.add_argument(
            "--rules", "-r",
            help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"
        )
        
        parser.add_argument(
            "--exclude", "-e",
            action="append",
            help="–ò—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç–∏ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑)"
        )
        
        parser.add_argument(
            "--type", "-t",
            choices=["documentation", "code", "template", "temporary", "archive", "all"],
            default="all",
            help="–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"
        )
        
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π"
        )
        
        parser.add_argument(
            "--save-report",
            help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –≤ —Ñ–∞–π–ª"
        )
    
    def validate_args(self, args) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        if not self.engine:
            print("‚ùå –û—à–∏–±–∫–∞: File Organization Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π
        for path in args.paths:
            if not Path(path).exists():
                print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
                return False
        
        return True
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            print("üóÇÔ∏è  –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
            print("=" * 60)
            
            if args.dry_run:
                print("üîç –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê - —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
            target_paths = args.paths if args.paths else None
            result = self.engine.organize_files(target_paths, dry_run=args.dry_run)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._print_results(result, args.verbose)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if args.save_report:
                self._save_report(result, args.save_report)
            
            # JSON –≤—ã–≤–æ–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            organize_result = {
                "command": "organize",
                "status": "completed" if not result.errors else "completed_with_errors",
                "mode": "dry_run" if args.dry_run else "execute",
                "summary": {
                    "processed_files": result.processed_files,
                    "moved_files": result.moved_files,
                    "deleted_files": result.deleted_files,
                    "archived_files": result.archived_files,
                    "space_freed": result.space_freed,
                    "execution_time": result.execution_time
                },
                "errors_count": len(result.errors),
                "warnings_count": len(result.warnings)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            recommendations = []
            if args.dry_run:
                if result.moved_files > 0 or result.deleted_files > 0:
                    recommendations.append("–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ './slc organize' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
                else:
                    recommendations.append("–ü—Ä–æ–µ–∫—Ç —É–∂–µ —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            else:
                if result.moved_files > 0:
                    recommendations.append(f"–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ {result.moved_files} —Ñ–∞–π–ª–æ–≤ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É–ª—É—á—à–µ–Ω–∞")
                if result.space_freed > 1024 * 1024:  # > 1MB
                    recommendations.append(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {self._format_size(result.space_freed)} –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
                if not result.errors:
                    recommendations.append("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É")
                else:
                    recommendations.append("–ï—Å—Ç—å –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ '—Å–ª–∫ validate'")
            
            organize_result["ai_recommendations"] = recommendations
            organize_result["next_commands"] = ["status", "validate"] if result.errors else ["status", "templates"]
            
            self.output_json_context(organize_result)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result.errors:
                print(f"\n‚ö†Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.errors)} –æ—à–∏–±–æ–∫")
                return 1
            else:
                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {result.execution_time:.2f}—Å")
                return 0
                
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            if args.verbose:
                import traceback
                traceback.print_exc()
            return 1
    
    def _print_results(self, result, verbose: bool):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.processed_files}")
        print(f"   üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.moved_files}")
        print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.deleted_files}")
        print(f"   üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.archived_files}")
        print(f"   üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {self._format_size(result.space_freed)}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
        
        if result.rules_applied:
            print(f"\nüìã –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:")
            for rule in set(result.rules_applied):
                count = result.rules_applied.count(rule)
                print(f"   ‚Ä¢ {rule} ({count} —Ä–∞–∑)")
        
        if result.errors and verbose:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}):")
            for error in result.errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {error}")
            if len(result.errors) > 5:
                print(f"   ... –∏ –µ—â—ë {len(result.errors) - 5} –æ—à–∏–±–æ–∫")
        
        if result.warnings and verbose:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(result.warnings)}):")
            for warning in result.warnings[:3]:
                print(f"   ‚Ä¢ {warning}")
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024
        return f"{size_bytes:.1f} TB"
    
    def _save_report(self, result, file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"""
        try:
            report = {
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "summary": {
                    "processed_files": result.processed_files,
                    "moved_files": result.moved_files,
                    "deleted_files": result.deleted_files,
                    "archived_files": result.archived_files,
                    "space_freed": result.space_freed,
                    "execution_time": result.execution_time
                },
                "rules_applied": result.rules_applied,
                "errors": result.errors,
                "warnings": result.warnings
            }
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")


class CleanupCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    name = "cleanup"
    description = "üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--dry-run", "-n",
            action="store_true",
            help="–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
        )
        
        parser.add_argument(
            "--aggressive", "-a",
            action="store_true",
            help="–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ backup —Ñ–∞–π–ª—ã)"
        )
        
        parser.add_argument(
            "--older-than",
            type=int,
            default=7,
            help="–£–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)"
        )
        
        parser.add_argument(
            "--patterns",
            nargs="+",
            help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        )
        
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            print("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
            print("=" * 50)
            
            if args.dry_run:
                print("üîç –†–ï–ñ–ò–ú –ê–ù–ê–õ–ò–ó–ê - —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            result = cleanup_project(dry_run=args.dry_run)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:")
            print(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.processed_files}")
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result.deleted_files}")
            print(f"   üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {self._format_size(result.space_freed)}")
            
            if result.errors and args.verbose:
                print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}):")
                for error in result.errors:
                    print(f"   ‚Ä¢ {error}")
            
            if result.deleted_files > 0:
                print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"\nüí° –§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            if args.verbose:
                import traceback
                traceback.print_exc()
            return 1
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024
        return f"{size_bytes:.1f} TB"


class MonitorCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    name = "monitor"
    description = "üëÅÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--auto-organize",
            action="store_true",
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã"
        )
        
        parser.add_argument(
            "--watch-paths",
            nargs="+",
            help="–ü—É—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)"
        )
        
        parser.add_argument(
            "--interval", "-i",
            type=int,
            default=30,
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        print("üëÅÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        print("üìù –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö:")
        print("   ‚Ä¢ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π backup'–∞")
        return 0


class OrganizationStatsCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    
    name = "org-stats"
    description = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
        self.engine = FileOrganizationEngine(base_path) if FileOrganizationEngine else None
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
        parser.add_argument(
            "--history",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"
        )
        
        parser.add_argument(
            "--rules",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if not self.engine:
                print("‚ùå –û—à–∏–±–∫–∞: File Organization Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return 1
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
            print("=" * 55)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.engine.get_organization_stats()
            
            if args.format == "json":
                print(json.dumps(stats, indent=2, ensure_ascii=False))
            else:
                self._print_table_stats(stats)
            
            if args.rules:
                self._print_rules_info()
            
            if args.history:
                self._print_history()
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return 1
    
    def _print_table_stats(self, stats: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:     {stats['total_operations']}")
        print(f"   –§–∞–π–ª–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ: {stats['files_organized']}")
        print(f"   –ú–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ:   {stats['space_freed']}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—á–∏—Å—Ç–∫–∞:   {stats['last_cleanup'] or '–ù–∏–∫–æ–≥–¥–∞'}")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª:       {stats['rules_count']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª:    {stats['enabled_rules']}")
    
    def _print_rules_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–∞—Ö"""
        print(f"\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        
        if not self.engine.rules:
            print("   –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        for i, rule in enumerate(self.engine.rules, 1):
            status = "‚úÖ" if rule.enabled else "‚ùå"
            print(f"   {i}. {status} {rule.name}")
            print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rule.priority}")
            print(f"      –î–µ–π—Å—Ç–≤–∏–µ: {rule.action.value}")
            print(f"      –ü–∞—Ç—Ç–µ—Ä–Ω: {rule.pattern}")
    
    def _print_history(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
        
        log_file = Path(self.base_path) / ".slc" / "organization_log.json"
        if not log_file.exists():
            print("   –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                log_entries = json.load(f)
            
            for entry in log_entries[-5:]:
                timestamp = entry['timestamp']
                result = entry['result']
                dry_run = entry.get('dry_run', False)
                mode = " [DRY RUN]" if dry_run else ""
                
                print(f"   üìÖ {timestamp}{mode}")
                print(f"      –§–∞–π–ª–æ–≤: {result['processed_files']}, "
                      f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {result['moved_files']}, "
                      f"–£–¥–∞–ª–µ–Ω–æ: {result['deleted_files']}")
                
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")


class CreateRuleCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    
    name = "create-rule"
    description = "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = base_path
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "name",
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
        )
        
        parser.add_argument(
            "--pattern", "-p",
            required=True,
            help="–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤"
        )
        
        parser.add_argument(
            "--target", "-t",
            required=True,
            help="–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
        )
        
        parser.add_argument(
            "--action", "-a",
            choices=["move", "copy", "delete", "archive"],
            default="move",
            help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤"
        )
        
        parser.add_argument(
            "--priority",
            type=int,
            default=50,
            help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ (0-100)"
        )
        
        parser.add_argument(
            "--enable",
            action="store_true",
            help="–°—Ä–∞–∑—É –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ '{args.name}' (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {args.pattern}")
        print(f"   –¶–µ–ª—å: {args.target}")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {args.action}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {args.priority}")
        print(f"   –í–∫–ª—é—á–µ–Ω–æ: {'–î–∞' if args.enable else '–ù–µ—Ç'}")
        
        print("\nüí° –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")
        return 0 