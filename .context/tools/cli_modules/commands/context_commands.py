#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –°–õ–ö

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã: 
- load-context: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- analyze-context: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- reload-context: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- update-context: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–í–µ—Ä—Å–∏—è: 1.2.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from ..base_command import BaseCommand, ContextAwareCommand
from tools.cli_modules.core.unified_context_engine import (
    UnifiedContextEngine, ContextLoadRequest, ContextLoadingStrategy
)


class LoadContextCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI"""
    
    name = "load-context"
    description = "üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö"
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.base_path = base_path
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: engine –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞, –∞ –Ω–µ —Å .context
        # –ï—Å–ª–∏ base_path —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ .context, –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        if base_path.endswith('/.context') or base_path.endswith('\\.context'):
            project_root = str(Path(base_path).parent)
        elif base_path == '.context':
            project_root = '..'
        else:
            project_root = base_path
            
        self.engine = UnifiedContextEngine(project_root) if UnifiedContextEngine else None
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "query",
            help="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        parser.add_argument(
            "--strategy", "-s",
            choices=["auto", "pattern", "manual", "full"],
            default="auto",
            help="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)"
        )
        
        parser.add_argument(
            "--max-modules", "-m",
            type=int,
            default=10,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)"
        )
        
        parser.add_argument(
            "--no-core",
            action="store_true",
            help="–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å core —Ñ–∞–π–ª—ã (manifest, standards, project)"
        )
        
        parser.add_argument(
            "--no-tasks",
            action="store_true", 
            help="–ù–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        )
        
        parser.add_argument(
            "--format", "-f",
            choices=["content", "copy", "json", "list"],
            default="content",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ('content' - –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ò–ò, 'copy' - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)"
        )
        
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"
        )
        
        parser.add_argument(
            "--save-result",
            help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª (—É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å)"
        )
    
    def validate_args(self, args) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        if not args.query.strip():
            print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        
        if not self.engine:
            print("‚ùå –û—à–∏–±–∫–∞: Unified Context Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        return True
    
    # –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ execute() - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ execute_with_context()
    
    def _output_json(self, result):
        """–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        output = {
            "loaded_files": result.loaded_files,
            "confidence_score": result.confidence_score,
            "strategy_used": result.strategy_used.value,
            "ai_recommendations": result.ai_recommendations,
            "execution_time": result.execution_time,
            "success": result.success
        }
        print(json.dumps(output, indent=2, ensure_ascii=False))
    
    def _output_list(self, result):
        """–í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        for file_path in result.loaded_files:
            print(file_path)
    
    def _output_content_format(self, result, verbose: bool = False):
        """–í—ã–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ò–ò"""
        if verbose:
            print(f"üéØ Confidence Score: {result.confidence_score:.2f}")
            print(f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.execution_time:.3f}—Å") 
            print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used.value}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.loaded_files)}")
            print("\n" + "=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        formatted_context = self.engine.get_formatted_context(
            result.loaded_files, 
            format_type="full"
        )
        
        print(formatted_context)
        
        if verbose and result.ai_recommendations:
            print(f"\nü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(result.ai_recommendations)}):")
            for i, rec in enumerate(result.ai_recommendations[:3], 1):
                score = rec.get('final_score', 0)
                path = rec.get('template_path', 'unknown')
                print(f"   {i}. {path} (score: {score:.2f})")
        
        if verbose and result.fallback_suggestions:
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in result.fallback_suggestions:
                print(f"   ‚Ä¢ {suggestion}")
    
    def _output_copy_format(self, result, verbose: bool = False):
        """–í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ—Ç–æ–≤–æ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç —Å –ò–ò"""
        print("üìã –ì–û–¢–û–í–´–ô –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò:")
        print("-" * 40)
        
        if verbose:
            print(f"üéØ Confidence Score: {result.confidence_score:.2f}")
            print(f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {result.execution_time:.3f}—Å")
            print(f"üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {result.strategy_used.value}")
            print(f"üìÅ –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(result.loaded_files)}")
            print()
        
        print("üì• –°–ö–û–ü–ò–†–£–ô–¢–ï –ò –í–°–¢–ê–í–¨–¢–ï –í –ß–ê–¢ –° –ò–ò:")
        print("=" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        categories = {
            "üè† Core —Å–∏—Å—Ç–µ–º–∞": [],
            "üìö –ú–æ–¥—É–ª–∏": [],
            "üìã –ó–∞–¥–∞—á–∏": [],
            "üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã": []
        }
        
        for file_path in result.loaded_files:
            if file_path.startswith("core/"):
                categories["üè† Core —Å–∏—Å—Ç–µ–º–∞"].append(file_path)
            elif file_path.startswith("modules/"):
                categories["üìö –ú–æ–¥—É–ª–∏"].append(file_path)
            elif file_path.startswith("tasks/"):
                categories["üìã –ó–∞–¥–∞—á–∏"].append(file_path)
            else:
                categories["üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"].append(file_path)
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, files in categories.items():
            if files:
                print(f"\n{category}:")
                for file_path in files:
                    print(f"cat {file_path}")
        
        print("\n" + "=" * 50)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(result.loaded_files)} —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.ai_recommendations and verbose:
            print(f"\nü§ñ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(result.ai_recommendations)}):")
            for i, rec in enumerate(result.ai_recommendations[:3], 1):
                score = rec.get('final_score', 0)
                path = rec.get('template_path', 'unknown')
                print(f"   {i}. {path} (score: {score:.2f})")
        
        # Fallback –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.fallback_suggestions and verbose:
            print("\nüí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in result.fallback_suggestions:
                print(f"   ‚Ä¢ {suggestion}")
    
    def _save_result(self, result, file_path: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª"""
        try:
            output_data = {
                "timestamp": "2025-01-15T21:30:00Z",
                "loaded_files": result.loaded_files,
                "confidence_score": result.confidence_score,
                "strategy_used": result.strategy_used.value,
                "ai_recommendations": result.ai_recommendations,
                "fallback_suggestions": result.fallback_suggestions,
                "execution_time": result.execution_time,
                "success": result.success
            }
            
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è load-context - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã"""
        return [
            "manifest.json",
            "modules/core/project.json", 
            "modules/core/standards.json",
            "tasks/active.json"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if execution_result.get("success"):
            loaded_files = execution_result.get("loaded_files", [])
            query = execution_result.get("query", "")
            return f"""
            –°–õ–ö –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è: '{query}'
            - –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(loaded_files)}
            - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            """
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if execution_result.get("success"):
            return [
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ '—Å–ª–∫ –ø–æ–¥—É–º–∞–π' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            ]
        return ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate"]
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return [
            "./slc list - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            "./slc templates - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã", 
            "./slc intelligent-recommend - –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        ]
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã load-context —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        from datetime import datetime
        
        try:
            print(f"üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è: '{args.query}'")
            print("=" * 60)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–ï–ó –≤—ã–∑–æ–≤–∞ execute() –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
                strategy_mapping = {
                    "auto": "AUTO_INTELLIGENT",
                    "pattern": "PATTERN_BASED", 
                    "manual": "MANUAL_SELECTION",
                    "full": "FULL_CONTEXT"
                }
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Å engine –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
                success = True
                
                if self.engine:
                    try:
                        from tools.cli_modules.core.unified_context_engine import ContextLoadRequest, ContextLoadingStrategy
                        
                        request = ContextLoadRequest(
                            user_query=args.query,
                            strategy=getattr(ContextLoadingStrategy, strategy_mapping.get(args.strategy, "AUTO_INTELLIGENT"), None),
                            include_core=not getattr(args, 'no_core', False),
                            include_tasks=not getattr(args, 'no_tasks', False),
                            max_modules=getattr(args, 'max_modules', 10),
                            verbose=getattr(args, 'verbose', False)
                        )
                        
                        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                        engine_result = self.engine.load_context(request)
                        
                        if engine_result.success:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            self._last_engine_result = engine_result
                            
                            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                            format_type = getattr(args, 'format', 'content')
                            if format_type == "content":
                                self._output_content_format(engine_result, getattr(args, 'verbose', False))
                            elif format_type == "copy":
                                self._output_copy_format(engine_result, getattr(args, 'verbose', False))
                            elif format_type == "json":
                                self._output_json(engine_result)
                            elif format_type == "list":
                                self._output_list(engine_result)
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                            if getattr(args, 'save_result', None):
                                self._save_result(engine_result, args.save_result)
                            
                            success = True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {engine_result.error_message}")
                            self._last_engine_result = None
                            success = False
                    except ImportError as import_err:
                        print(f"‚ö†Ô∏è  Unified Context Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({import_err}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
                        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        success = True
                    except Exception as engine_err:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ Context Engine ({engine_err}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
                        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        success = True
                else:
                    print("‚ö†Ô∏è  Unified Context Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
                    print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    success = True
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                if success:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç engine –∏–ª–∏ fallback
                    if hasattr(self, '_last_engine_result') and self._last_engine_result:
                        loaded_files = self._last_engine_result.loaded_files
                        ai_recommendations = [
                            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{args.query}'",
                            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å auto_load",
                            "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
                        ]
                    else:
                        loaded_files = self.get_default_context_files()
                        ai_recommendations = [
                            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{args.query}'",
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                            "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
                        ]
                    
                    return {
                        "success": True,
                        "command": "load-context",
                        "query": args.query,
                        "message": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è: '{args.query}'",
                        "loaded_files": loaded_files,
                        "strategy": getattr(args, 'strategy', 'auto'),
                        "timestamp": datetime.now().isoformat(),
                        "ai_recommendations": ai_recommendations,
                        "next_commands": [
                            "./slc list",
                            "./slc templates",
                            "./slc intelligent-recommend"
                        ],
                        "suggested_files_to_load": loaded_files
                    }
                else:
                    return {
                        "success": False,
                        "command": "load-context",
                        "query": args.query,
                        "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                        "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è: '{args.query}'",
                        "ai_recommendations": [
                            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
                            "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
                        ],
                        "next_commands": [
                            "./slc validate",
                            "./slc status"
                        ]
                    }
                    
            except Exception as inner_e:
                print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {inner_e}")
                return {
                    "success": False,
                    "command": "load-context",
                    "query": args.query,
                    "error": str(inner_e),
                    "message": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {inner_e}",
                    "ai_recommendations": [
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
                        "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
                    ],
                    "next_commands": [
                        "./slc validate",
                        "./slc status"
                    ]
                }
                
        except Exception as e:
            return {
                "success": False,
                "command": "load-context",
                "query": getattr(args, 'query', 'unknown'),
                "error": str(e),
                "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}",
                "ai_recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
                    "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
                ],
                "next_commands": [
                    "./slc validate",
                    "./slc status"
                ]
            }


class AnalyzeContextCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    @property
    def name(self) -> str:
        return "analyze-context"
    
    @property
    def description(self) -> str:
        return "üîç –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--current-files",
            nargs="+",
            help="–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        parser.add_argument(
            "--suggest-improvements",
            action="store_true",
            help="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
        
        parser.add_argument(
            "--depth",
            choices=["basic", "detailed", "comprehensive"],
            default="detailed",
            help="–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
    
    def execute(self, args) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö")
        print("=" * 30)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        analysis_result = self._analyze_current_context(args)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(analysis_result['issues'])}")
        print(f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {len(analysis_result['improvements'])}")
        print(f"üìÅ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {analysis_result['files_analyzed']}")
        
        if analysis_result['issues']:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in analysis_result['issues']:
                print(f"   ‚Ä¢ {issue}")
        
        if analysis_result['improvements']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
            for improvement in analysis_result['improvements']:
                print(f"   ‚Ä¢ {improvement}")
        
        # JSON –≤—ã–≤–æ–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
        self.output_json_context(analysis_result)
        
        return 0
    
    def _analyze_current_context(self, args) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        issues = []
        improvements = []
        files_analyzed = 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
            core_files = ["manifest.json", "modules/core/project.json", "modules/core/standards.json"]
            missing_core = []
            
            for file_path in core_files:
                full_path = Path(self.base_path) / file_path
                if not full_path.exists():
                    missing_core.append(file_path)
                else:
                    files_analyzed += 1
            
            if missing_core:
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_core)}")
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            tasks_path = Path(self.base_path) / "tasks" / "active.json"
            if tasks_path.exists():
                files_analyzed += 1
                try:
                    with open(tasks_path, 'r', encoding='utf-8') as f:
                        tasks_data = json.load(f)
                    
                    if tasks_data.get('completion', '0%') == '0%':
                        improvements.append("–ï—Å—Ç—å –Ω–µ–Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —Å–ø–∏—Å–æ–∫' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                    
                    if 'current_focus' in tasks_data:
                        improvements.append("–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ: " + str(tasks_data['current_focus'].get('title', 'N/A')))
                        
                except json.JSONDecodeError:
                    issues.append("–§–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            else:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            
            # –ê–Ω–∞–ª–∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
            modules_path = Path(self.base_path) / "modules"
            if modules_path.exists():
                template_count = len(list(modules_path.rglob("*.json")))
                files_analyzed += template_count
                
                if template_count < 20:
                    improvements.append("–ú–∞–ª–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π")
                elif template_count > 50:
                    improvements.append("–ú–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                else:
                    improvements.append("–•–æ—Ä–æ—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤ - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI
            cli_path = Path(self.base_path) / ".context" / "tools" / "scripts" / "slc_cli.py"
            if cli_path.exists():
                files_analyzed += 1
                improvements.append("CLI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ './slc help' –¥–ª—è –∫–æ–º–∞–Ω–¥")
            else:
                issues.append("CLI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            issues.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        recommendations = []
        if not issues:
            recommendations.append("–°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É")
            recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ '—Å–ª–∫ –ø–æ–¥—É–º–∞–π [–≤–∞—à–∞ –∑–∞–¥–∞—á–∞]' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é '—Å–ª–∫ validate --fix' –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            if len(issues) > 3:
                recommendations.append("–ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ '—Å–ª–∫ optimize' –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        next_commands = ["validate", "status", "help"]
        if not issues:
            next_commands = ["intelligent-recommend", "templates", "list"]
        
        return {
            "command": "analyze-context",
            "status": "completed",
            "issues": issues,
            "improvements": improvements,
            "files_analyzed": files_analyzed,
            "context_health": "healthy" if not issues else "needs_attention",
            "ai_recommendations": recommendations,
            "next_commands": next_commands,
            "suggested_files_to_load": [
                "manifest.json",
                "modules/core/project.json", 
                "tasks/active.json"
            ]
        }


class ReloadContextCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        
    @property
    def name(self) -> str:
        return "reload-context"
    
    @property
    def description(self) -> str:
        return "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–æ–≤–æ)"
    
    def add_arguments(self, parser):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"""
        parser.add_argument(
            "--save-state",
            action="store_true", 
            default=True,
            help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π"
        )
        
        parser.add_argument(
            "--verbose",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"
        )
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è reload-context"""
        return [
            ".context/manifest.json",
            ".context/tasks/active.json", 
            ".context/modules/core/project.json",
            ".context/modules/core/standards.json"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if execution_result.get("success"):
            active_task = execution_result.get("active_task", "–ù–µ—Ç")
            rules_count = execution_result.get("rules_loaded", 0)
            return f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω:
            - –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {active_task}
            - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {rules_count}
            - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
            """
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        if execution_result.get("success"):
            return [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ./slc status",
                "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ./slc list",
                "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: ./slc load-context [–∑–∞–¥–∞—á–∞]"
            ]
        return [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        ]
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return [
            "./slc status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            "./slc list - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            "./slc analyze-context - –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        ]
    
    def execute_with_context(self, args) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö")
        print("=" * 30)
        
        try:
            # –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if args.save_state:
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
                save_result = self._save_current_state(args.verbose)
            
            # –®–∞–≥ 2: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            reload_result = self._reload_context(args.verbose)
            
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
            
            return {
                "success": True,
                "command": "reload-context",
                "message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω",
                "active_task": reload_result.get("active_task", "API_SERVER_COMPREHENSIVE_TESTS"),
                "rules_loaded": reload_result.get("rules_loaded", 1),
                "files_reloaded": reload_result.get("files_reloaded", []),
                "timestamp": reload_result.get("timestamp"),
                "ai_recommendations": [
                    "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./slc status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
                ],
                "next_commands": [
                    "./slc status",
                    "./slc list", 
                    "./slc analyze-context"
                ],
                "suggested_files_to_load": [
                    ".context/tasks/active.json",
                    ".context/manifest.json",
                    ".context/modules/core/project.json"
                ]
            }
            
        except Exception as e:
            return {
                "success": False,
                "command": "reload-context",
                "error": str(e),
                "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}",
                "ai_recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
                    "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
                ],
                "next_commands": [
                    "./slc validate",
                    "./slc status"
                ]
            }
    
    def _save_current_state(self, verbose: bool = False):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            tasks_path = Path(self.base_path) / "tasks" / "active.json"
            if tasks_path.exists():
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                backup_path = tasks_path.with_suffix('.backup.json')
                import shutil
                shutil.copy2(tasks_path, backup_path)
                if verbose:
                    print(f"   üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {backup_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            history_path = Path(self.base_path) / "data" / "context_history.json"
            if history_path.exists():
                if verbose:
                    print(f"   üìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _reload_context(self, verbose: bool = False) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            import datetime
            reload_data = {
                "timestamp": datetime.datetime.now().isoformat(),
                "files_reloaded": [],
                "active_task": None,
                "rules_loaded": 0
            }
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ
            core_files = [
                "manifest.json",
                "modules/core/project.json", 
                "modules/core/standards.json"
            ]
            
            for file_path in core_files:
                full_path = Path(self.base_path) / file_path
                if full_path.exists():
                    reload_data["files_reloaded"].append(file_path)
                    if verbose:
                        print(f"   üìÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks_path = Path(self.base_path) / "tasks" / "active.json"
            backup_path = tasks_path.with_suffix('.backup.json')
            
            if backup_path.exists():
                import shutil
                shutil.copy2(backup_path, tasks_path)
                reload_data["files_reloaded"].append("tasks/active.json")
                if verbose:
                    print(f"   üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            active_task = self._auto_load_active_task_context(verbose)
            if active_task:
                reload_data["active_task"] = active_task
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è SLC Agent –∑–∞–¥–∞—á
            rules_count = self._load_related_rules(verbose)
            reload_data["rules_loaded"] = rules_count
            
            return reload_data
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return {
                "timestamp": datetime.datetime.now().isoformat(),
                "files_reloaded": [],
                "active_task": None,
                "rules_loaded": 0,
                "error": str(e)
            }
    
    def _auto_load_active_task_context(self, verbose: bool = False) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks_dir = Path(self.base_path) / "tasks"
            if not tasks_dir.exists():
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å active
            active_tasks = []
            for task_file in tasks_dir.glob("*.json"):
                if task_file.name in ["active.json", "deferred.json"]:
                    continue
                    
                try:
                    with open(task_file, 'r', encoding='utf-8') as f:
                        task_data = json.load(f)
                    
                    if task_data.get('status') == 'active':
                        active_tasks.append((task_file.stem, task_data))
                        
                except (json.JSONDecodeError, KeyError):
                    continue
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π
            if active_tasks:
                task_name, task_data = active_tasks[0]
                print(f"üéØ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {task_name}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
                if 'context' in task_data and 'files_to_load' in task_data['context']:
                    files_to_load = task_data['context']['files_to_load']
                    if verbose:
                        print(f"   üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {len(files_to_load)} —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
                        for file_path in files_to_load:
                            print(f"      ‚Ä¢ {file_path}")
                
                if verbose:
                    print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ '{task_name}' –∑–∞–≥—Ä—É–∂–µ–Ω")
                
                return task_name
            
            return None
                    
        except Exception as e:
            if verbose:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            return None
    
    def _load_related_rules(self, verbose: bool = False) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è –∑–∞–¥–∞—á SLC Agent"""
        try:
            rules_dir = Path(self.base_path) / "rules"
            if not rules_dir.exists():
                return 0
            
            # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å SLC Agent
            slc_agent_rules = []
            for rule_file in rules_dir.glob("*.json"):
                try:
                    with open(rule_file, 'r', encoding='utf-8') as f:
                        rule_data = json.load(f)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å–≤—è–∑—å —Å SLC Agent
                    tags = rule_data.get('tags', [])
                    category = rule_data.get('category', '')
                    title = rule_data.get('title', '').lower()
                    
                    if (any('agent' in str(tag).lower() for tag in tags) or 
                        'agent' in category.lower() or 
                        'slc_agent' in title or 
                        'ctl' in title):
                        slc_agent_rules.append((rule_file.stem, rule_data))
                        
                except (json.JSONDecodeError, KeyError):
                    continue
            
            if slc_agent_rules:
                print(f"üìã –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª SLC Agent: {len(slc_agent_rules)} –ø—Ä–∞–≤–∏–ª")
                if verbose:
                    for rule_name, rule_data in slc_agent_rules:
                        priority = rule_data.get('priority', 'normal')
                        print(f"   üîß {rule_name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
                        
                        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
                        if priority == 'critical':
                            print(f"      ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: {rule_data.get('description', 'N/A')}")
            
            return len(slc_agent_rules)
                            
        except Exception as e:
            if verbose:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
            return 0 