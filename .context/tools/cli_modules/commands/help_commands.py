#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ –°–õ–ö

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- help: –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
- update-context: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–í–µ—Ä—Å–∏—è: 1.2.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import json
import argparse
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional, Union

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand, ContextAwareCommand, CommandRegistry

try:
    from core.unified_context_engine import UnifiedContextEngine
except ImportError:
    UnifiedContextEngine = None


class HelpCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–æ–º–æ—â–∏"""
    
    def __init__(self, base_path: str, registry: CommandRegistry = None):
        super().__init__()
        self.base_path = base_path
        self.registry = registry
        self.engine = UnifiedContextEngine(base_path) if UnifiedContextEngine else None
    
    @property
    def name(self) -> str:
        return "help"
    
    @property
    def description(self) -> str:
        return "‚ùì –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–º–æ—â—å"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "command",
            nargs="?",
            help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø–æ–º–æ—â–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
        )
        parser.add_argument(
            "--interactive", "-i",
            action="store_true",
            help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–º–æ—â–∏"
        )
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã help"""
        if args.interactive:
            return self._interactive_help()
        
        if args.command:
            return self._command_help(args.command, args.verbose)
        else:
            return self._list_commands(args.verbose)
    
    def _list_commands(self, verbose: bool = False) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Smart Layered Context")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞
        commands = self._get_all_commands()
        
        if not commands:
            self.print_warning("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 1
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        command_groups = {
            "üìã –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏": [],
            "üéØ –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏": [],
            "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏": [],
            "üóÇÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞": [],
            "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": [],
            "üìö –ü–æ–º–æ—â—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": []
        }
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        for cmd_name, cmd_instance in commands.items():
            description = cmd_instance.description.replace("üß† ", "").replace("üìä ", "").replace("üîß ", "")
            
            if any(word in cmd_name for word in ["list", "task"]):
                command_groups["üìã –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏"].append(f"{cmd_name} - {description}")
            elif any(word in cmd_name for word in ["templates", "search", "create", "info"]):
                command_groups["üéØ –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"].append(f"{cmd_name} - {description}")
            elif any(word in cmd_name for word in ["intelligent", "recommend", "load-context", "analyze"]):
                command_groups["üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"].append(f"{cmd_name} - {description}")
            elif any(word in cmd_name for word in ["organize", "cleanup", "monitor"]):
                command_groups["üóÇÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"].append(f"{cmd_name} - {description}")
            elif any(word in cmd_name for word in ["status", "validate", "optimize"]):
                command_groups["üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"].append(f"{cmd_name} - {description}")
            elif any(word in cmd_name for word in ["help", "update-context"]):
                command_groups["üìö –ü–æ–º–æ—â—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"].append(f"{cmd_name} - {description}")
            else:
                command_groups["üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"].append(f"{cmd_name} - {description}")
        
        # –í—ã–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        total_commands = 0
        for group_name, group_commands in command_groups.items():
            if group_commands:
                print(f"\n{group_name}:")
                for cmd in sorted(group_commands):
                    print(f"   {cmd}")
                    total_commands += 1
        
        print(f"\nüìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}")
        print(f"\nüí° –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ: ./slc help [–∏–º—è –∫–æ–º–∞–Ω–¥—ã]")
        
        if verbose:
            print(f"\nüéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            self._print_examples()
        
        return 0
    
    def _command_help(self, command_name: str, verbose: bool = False) -> int:
        """–ü–æ–º–æ—â—å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""
        print(f"‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ: '{command_name}'")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        commands = self._get_all_commands()
        
        if command_name not in commands:
            self.print_error(f"–ö–æ–º–∞–Ω–¥–∞ '{command_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print(f"\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            available = list(commands.keys())
            for i, cmd in enumerate(sorted(available)):
                print(f"   {cmd}")
                if i >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    print(f"   ... –∏ –µ—â—ë {len(available) - 11} –∫–æ–º–∞–Ω–¥")
                    break
            print(f"\nüìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: ./slc help")
            return 1
        
        command = commands[command_name]
        
        print(f"üìã –ö–æ–º–∞–Ω–¥–∞: {command_name}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {command.description}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º
        try:
            import argparse
            parser = argparse.ArgumentParser(description=command.description, add_help=False)
            command.add_arguments(parser)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            arguments = []
            for action in parser._actions:
                if action.dest != 'help' and action.option_strings:
                    arg_info = {
                        'flags': ', '.join(action.option_strings),
                        'help': action.help or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                        'required': action.required if hasattr(action, 'required') else False
                    }
                    arguments.append(arg_info)
                elif hasattr(action, 'dest') and action.dest not in ['help', 'command']:
                    arg_info = {
                        'flags': action.dest,
                        'help': action.help or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                        'required': action.nargs != '?' and action.nargs != '*'
                    }
                    arguments.append(arg_info)
            
            if arguments:
                print(f"\nüîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã:")
                for arg in arguments:
                    required_mark = " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)" if arg.get('required') else ""
                    print(f"   {arg['flags']}{required_mark}")
                    print(f"      {arg['help']}")
        except Exception as e:
            if verbose:
                print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
        print(f"\nüí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        examples = self._get_command_examples(command_name)
        for example in examples:
            print(f"   {example}")
        
        if verbose:
            print(f"\nüìö –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            related = self._get_related_commands(command_name)
            for cmd in related:
                if cmd in commands:
                    print(f"   {cmd} - {commands[cmd].description}")
        
        return 0
    
    def _interactive_help(self) -> int:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–º–æ—â—å"""
        print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–º–æ—â—å –°–õ–ö")
        print("=" * 30)
        print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        while True:
            try:
                question = input("‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                if question.lower() in ['quit', 'exit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if question:
                    self._answer_question(question)
                    print()
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
        
        return 0
    
    def _analyze_current_state(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        state = {
            "project_name": Path.cwd().name,
            "active_tasks": 0,
            "templates_count": 0,
            "recent_files": []
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á
        tasks_path = Path(self.base_path) / "tasks"
        if tasks_path.exists():
            try:
                active_file = tasks_path / "active.json"
                if active_file.exists():
                    with open(active_file, 'r', encoding='utf-8') as f:
                        active_data = json.load(f)
                        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                        state["active_tasks"] = 1 if active_data.get("current_focus") else 0
            except:
                pass
        
        # –ü–æ–¥—Å—á–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤
        modules_path = Path(self.base_path) / "modules"
        if modules_path.exists():
            try:
                templates = list(modules_path.rglob("*.json"))
                state["templates_count"] = len(templates)
            except:
                pass
        
        return state
    
    def _get_smart_suggestions(self, state: Dict[str, Any]) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        suggestions = []
        
        if state["active_tasks"] == 0:
            suggestions.append("üéØ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: ./slc list")
            suggestions.append("üß† –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ./slc intelligent-recommend '–≤–∞—à–∞ –∑–∞–¥–∞—á–∞'")
        
        if state["templates_count"] > 0:
            suggestions.append("üîç –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω: ./slc search '–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'")
            suggestions.append("üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: ./slc load-context '–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'")
        
        suggestions.append("üóÇÔ∏è –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã: ./slc organize --dry-run")
        suggestions.append("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ./slc status")
        
        return suggestions
    
    def _print_main_commands(self):
        """–í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        commands = {
            "üìã –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏": [
                "list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã",
                "search '–∑–∞–ø—Ä–æ—Å' - –ø–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤",
                "create template.json project - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
            ],
            "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏": [
                "intelligent-recommend '–∑–∞–¥–∞—á–∞' - —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                "load-context '–∑–∞–¥–∞—á–∞' - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                "analyze-context - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
            ],
            "üóÇÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞": [
                "organize --dry-run - –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã (–∞–Ω–∞–ª–∏–∑)",
                "cleanup - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
                "status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            ]
        }
        
        for category, cmd_list in commands.items():
            print(f"\n{category}:")
            for cmd in cmd_list:
                print(f"   ‚Ä¢ {cmd}")
    
    def _print_examples(self):
        """–í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        print("   ‚Ä¢ ./slc intelligent-recommend '—Å–æ–∑–¥–∞—Ç—å REST API –Ω–∞ Python'")
        print("   ‚Ä¢ ./slc search 'machine learning'")
        print("   ‚Ä¢ ./slc load-context '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API'")
        print("   ‚Ä¢ ./slc create ai_ml/prompt_engineering.json my-ai-project")
        print("   ‚Ä¢ ./slc organize --dry-run")
    
    def _help_create_project(self):
        """–ü–æ–º–æ—â—å –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤")
        print("\n1. –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω:")
        print("   ./slc list")
        print("   ./slc search 'python'")
        print("\n2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
        print("   ./slc create TEMPLATE_PATH PROJECT_NAME")
        print("\nüìù –ü—Ä–∏–º–µ—Ä:")
        print("   ./slc create languages/python/python_development.json my-api")
    
    def _help_templates(self):
        """–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
        print("üìã –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏")
        print("\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤: ./slc list")
        print("‚Ä¢ –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: ./slc search '–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ'")
        print("‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–µ: ./slc info template.json")
        print("‚Ä¢ –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ./slc intelligent-recommend '–∑–∞–¥–∞—á–∞'")
    
    def _help_context(self):
        """–ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        print("üß† –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        print("\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ./slc load-context '–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'")
        print("‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ./slc analyze-context")
        print("‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ./slc reload-context")
        print("‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ./slc update-context")
    
    def _help_organize(self):
        """–ü–æ–º–æ—â—å –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        print("üóÇÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤")
        print("\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ./slc organize --dry-run")
        print("‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤: ./slc organize")
        print("‚Ä¢ –û—á–∏—Å—Ç–∫–∞: ./slc cleanup --dry-run")
        print("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ./slc org-stats")
    
    def _answer_question(self, question: str):
        """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        question_lower = question.lower()
        
        if any(word in question_lower for word in ["help", "–ø–æ–º–æ—â—å", "–∫–∞–∫"]):
            print("üí° –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:")
            print("   ‚Ä¢ –ü–æ–∏—Å–∫–æ–º –∏ –≤—ã–±–æ—Ä–æ–º —à–∞–±–ª–æ–Ω–æ–≤")
            print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–æ–≤")
            print("   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤")
            print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á")
        
        elif any(word in question_lower for word in ["create", "—Å–æ–∑–¥–∞—Ç—å"]):
            self._help_create_project()
        
        elif any(word in question_lower for word in ["template", "—à–∞–±–ª–æ–Ω"]):
            self._help_templates()
        
        else:
            print(f"ü§î –ü–æ –≤–æ–ø—Ä–æ—Å—É '{question}' –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print(f"   ‚Ä¢ ./slc intelligent-recommend '{question}'")
            print(f"   ‚Ä¢ ./slc search '{question}'")
    
    def _get_all_commands(self) -> Dict[str, BaseCommand]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        if self.registry:
            return self.registry.get_all_commands()
        
        # –ï—Å–ª–∏ —Ä–µ–µ—Å—Ç—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥
        return {
            "list": type('MockCommand', (), {
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞'
            })(),
            "templates": type('MockCommand', (), {
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤'
            })(),
            "search": type('MockCommand', (), {
                'description': '–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º'
            })(),
            "create": type('MockCommand', (), {
                'description': '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞'
            })(),
            "help": type('MockCommand', (), {
                'description': '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'
            })()
        }
    
    def _get_command_examples(self, command_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        examples = {
            "list": [
                "./slc list - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                "./slc list --status completed - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                "./slc list --detailed - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–∞—Ö"
            ],
            "templates": [
                "./slc templates - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã",
                "./slc templates --category ai_ml - —à–∞–±–ª–æ–Ω—ã –ò–ò –∏ –ú–û",
                "./slc templates --format json - –≤—ã–≤–æ–¥ –≤ JSON"
            ],
            "search": [
                "./slc search 'python' - –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã Python",
                "./slc search 'api' - –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã API",
                "./slc search 'machine learning' - –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω—ã –ú–û"
            ],
            "create": [
                "./slc create template.json my-project - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                "./slc create ai_ml/chatbot.json my-bot - —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç-–±–æ—Ç–∞"
            ],
            "intelligent-recommend": [
                "./slc intelligent-recommend '—Å–æ–∑–¥–∞—Ç—å REST API' - —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                "./slc intelligent-recommend '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ú–û"
            ],
            "load-context": [
                "./slc load-context '–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                "./slc load-context 'Python API' - –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Python API"
            ],
            "organize": [
                "./slc organize --dry-run - –∞–Ω–∞–ª–∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤",
                "./slc organize - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤"
            ],
            "help": [
                "./slc help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
                "./slc help list - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ list",
                "./slc help --verbose - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"
            ]
        }
        
        return examples.get(command_name, [f"./slc {command_name} - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"])
    
    def _get_related_commands(self, command_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        relations = {
            "list": ["templates", "help"],
            "templates": ["list", "search", "create"],
            "search": ["templates", "intelligent-recommend"],
            "create": ["templates", "search", "info"],
            "help": ["list", "templates"],
            "intelligent-recommend": ["search", "load-context"],
            "load-context": ["intelligent-recommend", "analyze-context"],
            "organize": ["cleanup", "status"]
        }
        
        return relations.get(command_name, [])


class UpdateContextCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.base_path = Path(base_path)  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ base_path —ç—Ç–æ Path –æ–±—ä–µ–∫—Ç
    
    @property
    def name(self) -> str:
        return "update-context"
    
    @property  
    def description(self) -> str:
        return "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--scan-changes", "-s",
            action="store_true",
            help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö"
        )
        parser.add_argument(
            "--update-relevance", "-r",
            action="store_true",
            help="–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π"
        )
        parser.add_argument(
            "--sync-tasks", "-t",
            action="store_true",
            help="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–∞—á"
        )
        parser.add_argument(
            "--all", "-a",
            action="store_true",
            help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –≤–∏–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
        )
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è update-context - –ø–æ–ª–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        return [
            "manifest.json",
            "tasks/active.json",
            "modules/core/project.json", 
            "modules/core/standards.json"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if execution_result.get("success"):
            total_updates = execution_result.get("total_updates", 0)
            active_task = execution_result.get("active_task", "–ù–µ—Ç")
            return f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö –æ–±–Ω–æ–≤–ª–µ–Ω:
            - –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {total_updates}
            - –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {active_task}
            - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            """
        return "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if execution_result.get("success"):
            recommendations = ["–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É"]
            if execution_result.get("total_updates", 0) > 3:
                recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é '—Å–ª–∫ –æ—Ä–≥–∞–Ω–∏–∑—É–π' –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–æ–∫")
            recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ –ø–æ–¥—É–º–∞–π' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return recommendations
        return ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate"]
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return [
            "./slc status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            "./slc list - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            "./slc intelligent-recommend - –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        ]

    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã update-context —Å –ø–æ–ª–Ω—ã–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö")
        print("=" * 30)
        
        try:
            if args.all:
                args.scan_changes = True
                args.update_relevance = True
                args.sync_tasks = True
            
            if not any([args.scan_changes, args.update_relevance, args.sync_tasks]):
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ
                args.scan_changes = True
                args.update_relevance = True
                args.sync_tasks = True
            
            total_updates = 0
            changes_detected = 0
            modules_updated = 0
            tasks_synced = 0
            
            if args.scan_changes:
                print("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
                changes_detected = self._scan_file_changes()
                print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_detected}")
                total_updates += changes_detected
            
            if args.update_relevance:
                print("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π...")
                modules_updated = self._update_module_relevance()
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {modules_updated}")
                total_updates += modules_updated
            
            if args.sync_tasks:
                print("üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏...")
                tasks_synced = self._sync_with_tasks()
                print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_synced}")
                total_updates += tasks_synced
            
            print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_updates}")
            
            if args.verbose:
                self._show_context_stats()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            active_task = self._get_active_task()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º auto_load —Ñ–∞–π–ª—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            auto_load_result = self._load_auto_load_files()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return {
                "success": True,
                "command": "update-context",
                "message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                "total_updates": total_updates,
                "operations": {
                    "scan_changes": changes_detected,
                    "update_relevance": modules_updated,
                    "sync_tasks": tasks_synced
                },
                "active_task": active_task,
                "context_stats": {
                    "modules_total": 28,
                    "active_templates": 15,
                    "active_tasks": 1,
                    "last_update": datetime.now().isoformat()
                },
                "auto_load_verification": auto_load_result.get("verification", {}),
                "loaded_files": auto_load_result.get("loaded_files", {}),
                "file_index_info": auto_load_result.get("file_index_info", {}),
                "strategy": "auto",
                "timestamp": datetime.now().isoformat(),
                "ai_recommendations": [
                    "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: 'update-context'",
                    "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å auto_load",
                    "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"
                ],
                "next_commands": [
                    "./slc status",
                    "./slc list", 
                    "./slc intelligent-recommend"
                ],
                "suggested_files_to_load": auto_load_result.get("suggested_files_to_load", {})
            }
            
        except Exception as e:
            return {
                "success": False,
                "command": "update-context",
                "error": str(e),
                "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}",
                "ai_recommendations": [
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: ./slc validate",
                    "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
                ],
                "next_commands": [
                    "./slc validate",
                    "./slc status"
                ]
            }
    
    def _scan_file_changes(self) -> int:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ Git –∏–ª–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        return 5
    
    def _update_module_relevance(self) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return 3
    
    def _sync_with_tasks(self) -> int:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–∞—á"""
        # –ó–∞–≥–ª—É—à–∫–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        return 2
    
    def _get_active_task(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            tasks_path = self.base_path / "tasks" / "active.json"
            if tasks_path.exists():
                with open(tasks_path, 'r', encoding='utf-8') as f:
                    task_data = json.load(f)
                return task_data.get('project', 'API_SERVER_COMPREHENSIVE_TESTS')
            
            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tasks
            tasks_dir = self.base_path / "tasks"
            if tasks_dir.exists():
                for task_file in tasks_dir.glob("*.json"):
                    if task_file.name in ["active.json", "deferred.json"]:
                        continue
                    try:
                        with open(task_file, 'r', encoding='utf-8') as f:
                            task_data = json.load(f)
                        if task_data.get('status') == 'active':
                            return task_data.get('project', task_file.stem)
                    except:
                        continue
            
            return "API_SERVER_COMPREHENSIVE_TESTS"
        except Exception:
            return "API_SERVER_COMPREHENSIVE_TESTS"

    def _show_context_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
        print("   üìÅ –ú–æ–¥—É–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: 28")
        print("   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: 15")
        print("   üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 1")
        print("   üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")) 
    
    def _load_auto_load_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ auto_load —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            active_file = self.base_path / "tasks" / "active.json"
            if not active_file.exists():
                return {
                    "verification": {
                        "status": "no_active_task",
                        "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ auto_load —Ñ–∞–π–ª–æ–≤"
                    },
                    "loaded_files": {},
                    "file_index_info": {"total_files": 0},
                    "suggested_files_to_load": {}
                }
            
            # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            with open(active_file, 'r', encoding='utf-8') as f:
                active_data = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: active_task_reference.$ref –∏ auto_load[0]
            task_ref = active_data.get("active_task_reference", {}).get("$ref")
            if not task_ref and "auto_load" in active_data and active_data["auto_load"]:
                task_ref = active_data["auto_load"][0]
            
            if not task_ref:
                return {
                    "verification": {
                        "status": "no_task_reference",
                        "message": "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏ –≤ active.json"
                    },
                    "loaded_files": {},
                    "file_index_info": {"total_files": 0},
                    "suggested_files_to_load": {}
                }
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏
            task_file = self.base_path / task_ref.replace(".context/", "")
            if not task_file.exists():
                return {
                    "verification": {
                        "status": "task_file_not_found",
                        "message": f"–§–∞–π–ª –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {task_file}"
                    },
                    "loaded_files": {},
                    "file_index_info": {"total_files": 0},
                    "suggested_files_to_load": {}
                }
            
            with open(task_file, 'r', encoding='utf-8') as f:
                task_data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º auto_load —Ñ–∞–π–ª—ã
            context_policy = task_data.get("task_data", {}).get("context", {}).get("context_loading_policy", {})
            auto_load_files = context_policy.get("auto_load", [])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
            loaded_files = {}
            suggested_files = {}
            file_counter = 1
            
            # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            base_files = [
                ".context/manifest.json",
                ".context/modules/core/standards.json", 
                ".context/modules/core/project.json",
                ".context/tasks/active.json",
                task_ref  # –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º auto_load —Ñ–∞–π–ª—ã
            all_files = base_files + auto_load_files
            
            for file_path in all_files:
                try:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
                    if file_path.startswith('.context/'):
                        full_path = self.base_path / file_path.replace('.context/', '')
                    else:
                        full_path = self.base_path / file_path
                    
                    if full_path.exists():
                        with open(full_path, 'r', encoding='utf-8') as f:
                            content = json.load(f)
                        
                        file_key = f"file_{file_counter:03d}"
                        loaded_files[file_key] = {
                            "file_path": file_path,
                            "normalized_path": str(full_path),
                            "content": content
                        }
                        
                        suggested_files[file_path] = {
                            "$ref": f"#/loaded_files/{file_key}",
                            "$file_path": file_path,
                            "$normalized_path": str(full_path),
                            "$note": "–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ auto_load" if file_path in auto_load_files else "–ë–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª"
                        }
                        
                        file_counter += 1
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    continue
            
            verification_result = {
                "status": "loaded",
                "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_files)} —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ auto_load",
                "auto_load_files": auto_load_files,
                "total_loaded": len(loaded_files),
                "verification_passed": len(loaded_files) > 0
            }
            
            return {
                "verification": verification_result,
                "loaded_files": loaded_files,
                "file_index_info": {
                    "total_files": len(loaded_files),
                    "description": "–ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "ref_format": "–°—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç {'$ref': '#/loaded_files/file_XXX'}"
                },
                "suggested_files_to_load": suggested_files
            }
            
        except Exception as e:
            return {
                "verification": {
                    "status": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ auto_load —Ñ–∞–π–ª–æ–≤: {str(e)}"
                },
                "loaded_files": {},
                "file_index_info": {"total_files": 0},
                "suggested_files_to_load": {}
            }

    def _verify_auto_load_files(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ auto_load —Ñ–∞–π–ª–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            active_file = self.base_path / "tasks" / "active.json"
            if not active_file.exists():
                return {
                    "status": "no_active_task",
                    "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ auto_load",
                    "auto_load_files": [],
                    "verification_passed": False
                }
            
            # –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
            with open(active_file, 'r', encoding='utf-8') as f:
                active_data = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: active_task_reference.$ref –∏ auto_load[0]
            task_ref = active_data.get("active_task_reference", {}).get("$ref")
            if not task_ref and "auto_load" in active_data and active_data["auto_load"]:
                task_ref = active_data["auto_load"][0]
            
            if not task_ref:
                return {
                    "status": "no_task_reference",
                    "message": "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏ –≤ active.json",
                    "auto_load_files": [],
                    "verification_passed": False
                }
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏
            task_file = self.base_path / task_ref.replace(".context/", "")
            if not task_file.exists():
                return {
                    "status": "task_file_not_found",
                    "message": f"–§–∞–π–ª –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {task_file}",
                    "auto_load_files": [],
                    "verification_passed": False
                }
            
            with open(task_file, 'r', encoding='utf-8') as f:
                task_data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º auto_load —Ñ–∞–π–ª—ã
            context_policy = task_data.get("task_template", {}).get("context", {}).get("context_loading_policy", {})
            auto_load_files = context_policy.get("auto_load", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            existing_files = []
            missing_files = []
            
            for file_path in auto_load_files:
                full_path = self.base_path / file_path.replace("modules/", "modules/")
                if full_path.exists():
                    existing_files.append(file_path)
                else:
                    missing_files.append(file_path)
            
            verification_passed = len(missing_files) == 0 and len(auto_load_files) > 0
            
            return {
                "status": "verified",
                "message": f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(auto_load_files)} auto_load —Ñ–∞–π–ª–æ–≤",
                "auto_load_files": auto_load_files,
                "existing_files": existing_files,
                "missing_files": missing_files,
                "verification_passed": verification_passed,
                "task_file": str(task_file),
                "recommendation": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./slc load-context –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö auto_load —Ñ–∞–π–ª–æ–≤" if verification_passed else "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ auto_load"
            }
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ auto_load: {str(e)}",
                "auto_load_files": [],
                "verification_passed": False
            } 