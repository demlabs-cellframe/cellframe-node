#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã Template Intelligence

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- intelligent-recommend: –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
- generate-adaptive: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
- record-usage: –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
- intelligence-stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
- template-evolution: –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞

–í–µ—Ä—Å–∏—è: 1.1.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand, ContextAwareCommand

try:
    from tools.cli_modules.core.advanced_template_intelligence import (
        AdvancedTemplateIntelligence, ProjectContext, TemplateUsagePattern
    )
except ImportError:
    AdvancedTemplateIntelligence = None
    ProjectContext = None


class IntelligentRecommendCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    @property
    def name(self) -> str:
        return "intelligent-recommend"
    
    @property
    def description(self) -> str:
        return "üß† –ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument("query", help="–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤")
        parser.add_argument("--domain", help="–î–æ–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞ (ai_ml, python, web)")
        parser.add_argument("--technologies", nargs="+", help="–°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
        parser.add_argument("--project-size", choices=["small", "medium", "large"], 
                           default="medium", help="–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--complexity", choices=["simple", "moderate", "complex"],
                           default="moderate", help="–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--team-size", type=int, default=1, help="–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã")
        parser.add_argument("--max-results", type=int, default=5, help="–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    def execute(self, args) -> int:
        if not AdvancedTemplateIntelligence:
            print("‚ùå Advanced Template Intelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return 1
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            project_context = None
            if args.domain:
                project_context = ProjectContext(
                    domain=args.domain,
                    technologies=args.technologies or [],
                    project_size=args.project_size,
                    complexity=args.complexity,
                    team_size=args.team_size,
                    existing_files=[],
                    git_history=None,
                    dependencies=[]
                )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            ati = AdvancedTemplateIntelligence()
            
            print(f"üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è: '{args.query}'")
            if project_context:
                print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: {project_context.domain}, {project_context.project_size}, –∫–æ–º–∞–Ω–¥–∞ {project_context.team_size}")
            print()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
            recommendations = ati.get_intelligent_recommendations(
                args.query, project_context, args.max_results
            )
            
            if not recommendations:
                print("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            for i, rec in enumerate(recommendations, 1):
                template_path = rec["template"]
                score = rec["score"]
                base_score = rec.get("base_score", 0)
                success_prediction = rec.get("success_prediction", 0)
                features = rec.get("intelligence_features", {})
                
                print(f"{i}. üéØ {template_path}")
                print(f"   üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {score:.3f}")
                
                if args.verbose:
                    print(f"   üìà –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {base_score:.3f}")
                    print(f"   üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—Ö–∞: {success_prediction:.3f}")
                    print(f"   üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏:")
                    for feature, enabled in features.items():
                        status = "‚úÖ" if enabled else "‚ùå"
                        print(f"      {status} {feature}")
                
                print()
            
            print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"   slc_cli.py generate-adaptive '{args.query}' --domain {args.domain or 'auto'}")
            print(f"   slc_cli.py create TEMPLATE_PATH PROJECT_NAME")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return 1


class GenerateAdaptiveCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    
    @property
    def name(self) -> str:
        return "generate-adaptive"
    
    @property
    def description(self) -> str:
        return "üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument("query", help="–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
        parser.add_argument("--domain", required=True, help="–î–æ–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--technologies", nargs="+", help="–°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")
        parser.add_argument("--project-size", choices=["small", "medium", "large"],
                           default="medium", help="–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--complexity", choices=["simple", "moderate", "complex"],
                           default="moderate", help="–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--team-size", type=int, default=1, help="–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã")
        parser.add_argument("--base-templates", nargs="+", help="–ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
        parser.add_argument("--save-to", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –≤ —Ñ–∞–π–ª")
        parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    def execute(self, args) -> int:
        if not AdvancedTemplateIntelligence:
            print("‚ùå Advanced Template Intelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return 1
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            project_context = ProjectContext(
                domain=args.domain,
                technologies=args.technologies or [],
                project_size=args.project_size,
                complexity=args.complexity,
                team_size=args.team_size,
                existing_files=[],
                git_history=None,
                dependencies=[]
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            ati = AdvancedTemplateIntelligence()
            
            print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
            print(f"   –ó–∞–ø—Ä–æ—Å: {args.query}")
            print(f"   –î–æ–º–µ–Ω: {args.domain}")
            print(f"   –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {args.technologies}")
            print(f"   –†–∞–∑–º–µ—Ä: {args.project_size}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {args.complexity}")
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {args.team_size}")
            print()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω
            generated_template = ati.generate_adaptive_template(
                args.query, project_context, args.base_templates
            )
            
            print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {generated_template.name}")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {generated_template.confidence_score:.3f}")
            print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {generated_template.usage_prediction:.3f}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {generated_template.description}")
            print(f"üß© –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(generated_template.source_templates)}")
            print()
            
            if args.dry_run:
                print("üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (dry-run):")
                print(json.dumps(generated_template.content, indent=2, ensure_ascii=False))
                return 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
            if args.save_to:
                save_path = Path(args.save_to)
                save_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(save_path, 'w', encoding='utf-8') as f:
                    json.dump(generated_template.content, f, indent=2, ensure_ascii=False)
                
                print(f"üíæ –®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return 1


class TemplateEvolutionCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–≤–æ–ª—é—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    
    @property
    def name(self) -> str:
        return "template-evolution"
    
    @property
    def description(self) -> str:
        return "üìà –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument("template_path", help="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        parser.add_argument("--detailed", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    def execute(self, args) -> int:
        if not AdvancedTemplateIntelligence:
            print("‚ùå Advanced Template Intelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return 1
        
        try:
            ati = AdvancedTemplateIntelligence()
            
            print(f"üìà –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {args.template_path}")
            print()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–≤–æ–ª—é—Ü–∏—é
            evolution = ati.analyze_template_evolution(args.template_path)
            
            if "error" in evolution:
                print(f"‚ùå {evolution['error']}")
                return 1
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print(f"   –¢—Ä–µ–Ω–¥: {evolution['usage_trend']}")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {evolution['success_rate']:.2%}")
            print(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: {evolution['adaptability_score']:.3f}")
            print(f"   –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {evolution['context_diversity']}")
            print()
            
            if evolution['recommendations']:
                print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                for i, rec in enumerate(evolution['recommendations'], 1):
                    print(f"   {i}. {rec}")
                print()
            
            if args.detailed:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
                pattern = ati.pattern_analyzer.patterns.get(args.template_path)
                if pattern:
                    print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pattern.usage_count}")  
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {pattern.last_used.strftime('%Y-%m-%d %H:%M')}")
                    print(f"   –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {pattern.user_feedback_score:.1f}/5.0")
                    print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã: {', '.join(pattern.contexts_used_in)}")
                    
                    if pattern.common_modifications:
                        print(f"   –ß–∞—Å—Ç—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                        for mod in pattern.common_modifications:
                            print(f"      ‚Ä¢ {mod}")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return 1


class IntelligenceStatsCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã Template Intelligence"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        
    @property
    def name(self) -> str:
        return "intelligence-stats"
    
    @property
    def description(self) -> str:
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã Template Intelligence"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        super().add_arguments(parser)  # –î–æ–±–∞–≤–ª—è–µ—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç
        parser.add_argument("--detailed", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        parser.add_argument("--recent", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è intelligence-stats"""
        return [
            ".slc_usage_stats.json",
            "modules/ai_ml/machine_learning.json",
            "tools/template_intelligence/"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        system_stats = execution_result.get("system_stats", {})
        patterns_stats = execution_result.get("patterns_stats", {})
        
        return f"""
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Template Intelligence —Å–∏—Å—Ç–µ–º—ã:
        - –®–∞–±–ª–æ–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {system_stats.get('templates_generated', 0)}
        - –£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {system_stats.get('successful_recommendations', 0)}
        - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_stats.get('active_patterns', 0)}
        - –°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {patterns_stats.get('avg_success_rate', 0):.1%}
        """
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        actions = []
        
        system_stats = execution_result.get("system_stats", {})
        patterns_stats = execution_result.get("patterns_stats", {})
        
        if system_stats.get('successful_recommendations', 0) == 0:
            actions.append("–ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        if patterns_stats.get('active_patterns', 0) < 5:
            actions.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        success_rate = patterns_stats.get('avg_success_rate', 0)
        if success_rate < 0.8:
            actions.append("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        actions.extend([
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö",
            "–°–æ–∑–¥–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"
        ])
        
        return actions
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        return [
            "—Å–ª–∫ record-usage [—à–∞–±–ª–æ–Ω] --domain [–¥–æ–º–µ–Ω]",
            "—Å–ª–∫ generate-adaptive [–æ–ø–∏—Å–∞–Ω–∏–µ] --domain [–¥–æ–º–µ–Ω]",
            "—Å–ª–∫ template-evolution [—à–∞–±–ª–æ–Ω]",
            "—Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
        ]
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not AdvancedTemplateIntelligence:
            print("‚ùå Advanced Template Intelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return {"error": "AdvancedTemplateIntelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        try:
            ati = AdvancedTemplateIntelligence()
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Template Intelligence System")
            print()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = ati.get_system_intelligence_stats()
            
            if "error" in stats:
                print(f"‚ùå {stats['error']}")
                return stats
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            system_stats = stats.get("system_stats", {})
            print(f"üèóÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –®–∞–±–ª–æ–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {system_stats.get('templates_generated', 0)}")
            print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {system_stats.get('successful_recommendations', 0)}")
            print(f"   –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {system_stats.get('user_satisfaction', 0):.1%}")
            print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            patterns_stats = stats.get("patterns_stats", {})
            print(f"üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
            print(f"   –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_stats.get('total_patterns', 0)}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {patterns_stats.get('active_patterns', 0)}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {patterns_stats.get('avg_success_rate', 0):.2%}")
            print()
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            recent_activity = stats.get("recent_activity", [])
            if recent_activity:
                print(f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(args.recent, len(recent_activity))}):")
                for activity in recent_activity[-args.recent:]:
                    timestamp = activity.get("timestamp", "")[:19].replace("T", " ")
                    action = activity.get("action", "unknown")
                    print(f"   {timestamp} - {action}")
                    
                    if args.detailed:
                        for key, value in activity.items():
                            if key not in ["timestamp", "action"]:
                                print(f"      {key}: {value}")
                print()
            
            # –¢–æ–ø —à–∞–±–ª–æ–Ω—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
            if args.detailed:
                patterns = ati.pattern_analyzer.get_usage_patterns(min_usage=1)
                if patterns:
                    print(f"üèÜ –¢–æ–ø —à–∞–±–ª–æ–Ω—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
                    sorted_patterns = sorted(patterns, key=lambda p: p.usage_count, reverse=True)
                    for i, pattern in enumerate(sorted_patterns[:5], 1):
                        print(f"   {i}. {pattern.template_path}")
                        print(f"      –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pattern.usage_count}, –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {pattern.success_rate:.2%}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø —à–∞–±–ª–æ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    stats["top_templates"] = [
                        {
                            "template_path": p.template_path,
                            "usage_count": p.usage_count,
                            "success_rate": p.success_rate
                        }
                        for p in sorted_patterns[:5]
                    ]
            
            return stats
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞: {e}"
            print(f"‚ùå {error_message}")
            return {"error": error_message}


class RecordUsageCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    
    @property
    def name(self) -> str:
        return "record-usage"
    
    @property
    def description(self) -> str:
        return "üìù –ó–∞–ø–∏—Å–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument("template_path", help="–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É")
        parser.add_argument("--domain", required=True, help="–î–æ–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞")
        parser.add_argument("--success", type=bool, default=True, help="–£—Å–ø–µ—à–Ω–æ–µ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
        parser.add_argument("--modifications", nargs="+", help="–í–Ω–µ—Å—ë–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        parser.add_argument("--feedback-score", type=float, default=5.0, 
                           help="–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)")
        parser.add_argument("--technologies", nargs="+", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        parser.add_argument("--project-size", choices=["small", "medium", "large"],
                           default="medium", help="–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
    
    def execute(self, args) -> int:
        if not AdvancedTemplateIntelligence:
            print("‚ùå Advanced Template Intelligence –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
            return 1
        
        try:
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            project_context = ProjectContext(
                domain=args.domain,
                technologies=args.technologies or [],
                project_size=args.project_size,
                complexity="moderate",  # default
                team_size=1,  # default
                existing_files=[],
                git_history=None,
                dependencies=[]
            )
            
            ati = AdvancedTemplateIntelligence()
            
            print(f"üìù –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {args.template_path}")
            print(f"   –î–æ–º–µ–Ω: {args.domain}")
            print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if args.success else '‚ùå'}")
            print(f"   –û—Ü–µ–Ω–∫–∞: {args.feedback_score}/5.0")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            ati.pattern_analyzer.record_template_usage(
                args.template_path,
                project_context,
                args.success,
                args.modifications
            )
            
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print("üß† –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return 1


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å base_path
def get_template_intelligence_commands(base_path: str = "."):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Template Intelligence —Å base_path"""
    return [
        IntelligentRecommendCommand(),
        GenerateAdaptiveCommand(),
        TemplateEvolutionCommand(),
        IntelligenceStatsCommand(base_path),  # –°–æ–∑–¥–∞–µ–º —Å base_path
        RecordUsageCommand()
    ]

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
TEMPLATE_INTELLIGENCE_COMMANDS = get_template_intelligence_commands() 