#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–ª—è Smart Layered Context CLI
–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å —Å—É–±—Ñ–∞–∑–∞–º–∏ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ

–í–µ—Ä—Å–∏—è: 2.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import os
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import argparse

from tools.cli_modules.common.base_command import BaseCommand


class ReflectionCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å —Å—É–±—Ñ–∞–∑–∞–º–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = Path(base_path)
        self.tasks_dir = self.base_path / 'tasks'
        
    @property
    def name(self) -> str:
        return "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
    
    @property
    def description(self) -> str:
        return "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ —Å —Å—É–±—Ñ–∞–∑–∞–º–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--project-name", 
            type=str,
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç)"
        )
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∑—ã"
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω —Ñ–∞–∑—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        print("üîß –°–û–ó–î–ê–ù–ò–ï –§–ê–ó–´ –†–ï–§–õ–ï–ö–°–ò–ò")
        print("=" * 50)
        
        try:
            # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
            project_name = args.project_name or self._detect_current_project()
            
            # 2. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            reflection_phase = self._create_reflection_phase(project_name, args.verbose)
            
            # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω
            self._display_phase_plan(reflection_phase, args.verbose)
            
            # 4. –°–æ–∑–¥–∞–µ–º —Ñ–∞–∑—É (–µ—Å–ª–∏ –Ω–µ dry-run)
            if not args.dry_run:
                task_id = self._create_phase_task(reflection_phase, args.verbose)
                self._update_active_tasks(task_id, reflection_phase, args.verbose)
                self._reload_context(args.verbose)
                
                print(f"\n‚úÖ –§–ê–ó–ê –†–ï–§–õ–ï–ö–°–ò–ò –°–û–ó–î–ê–ù–ê!")
                print(f"üìã ID –∑–∞–¥–∞—á–∏: {task_id}")
                print(f"üîß –°—É–±—Ñ–∞–∑ —Å–æ–∑–¥–∞–Ω–æ: {len(reflection_phase['subphases'])}")
                print("üöÄ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
                
            else:
                print("\nüîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê (--dry-run)")
                print("–§–∞–∑–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            return 0
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return 1
    
    def _detect_current_project(self) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ò—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        active_tasks_file = self.tasks_dir / 'active.json'
        if active_tasks_file.exists():
            try:
                with open(active_tasks_file, 'r', encoding='utf-8') as f:
                    active_data = json.load(f)
                    tasks = active_data.get('tasks', [])
                    if tasks:
                        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
                        latest_task = max(tasks, key=lambda t: t.get('created_at', 0))
                        return latest_task.get('project', 'unknown_project')
            except:
                pass
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = Path.cwd().name
        return current_dir if current_dir else 'current_project'
    
    def _create_reflection_phase(self, project_name: str, verbose: bool) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...")
        
        timestamp = time.time()
        
        reflection_phase = {
            'project': project_name,
            'phase_name': '—Ä–µ—Ñ–ª–µ–∫—Å–∏—è',
            'created_at': timestamp,
            'description': '–ù–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–ª–≥–æ–≤',
            'priority': 'high',
            'estimated_duration': '4-8 —á–∞—Å–æ–≤',
            'subphases': [
                {
                    'id': 'cleanup_fallbacks',
                    'name': '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–ª–ª–±—ç–∫–æ–≤',
                    'description': '–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ fallback –∫–æ–¥–∞',
                    'tasks': [
                        '–ù–∞–π—Ç–∏ –≤—Å–µ TODO, FIXME, HACK –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
                        '–£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ fallback —Ñ—É–Ω–∫—Ü–∏–∏',
                        '–ó–∞–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ',
                        '–û—á–∏—Å—Ç–∏—Ç—å —É—Å–ª–æ–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π'
                    ],
                    'priority': 'high',
                    'estimated_time': '1-2 —á–∞—Å–∞'
                },
                {
                    'id': 'complete_todos',
                    'name': '–î–æ–¥–µ–ª–∫–∞ TODO –ø—É–Ω–∫—Ç–æ–≤',
                    'description': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ TODO —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                    'tasks': [
                        '–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö TODO –≤ –∫–æ–¥–µ',
                        '–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å TODO –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏',
                        '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ TODO',
                        '–£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ TODO',
                        '–ó–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ TODO'
                    ],
                    'priority': 'high',
                    'estimated_time': '2-3 —á–∞—Å–∞'
                },
                {
                    'id': 'fix_weakened_functionality',
                    'name': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
                    'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                    'tasks': [
                        '–ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —É—Ä–µ–∑–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º',
                        '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É',
                        '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö'
                    ],
                    'priority': 'high',
                    'estimated_time': '1-2 —á–∞—Å–∞'
                },
                {
                    'id': 'fix_disconnected_functionality',
                    'name': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–≤–∞–ª–∏–≤—à–µ–≥–æ—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
                    'description': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≥–¥–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—Å—Ç—å –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è',
                    'tasks': [
                        '–ù–∞–π—Ç–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã',
                        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–æ–≤ API',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä —Ñ—É–Ω–∫—Ü–∏–π',
                        '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π'
                    ],
                    'priority': 'critical',
                    'estimated_time': '1-2 —á–∞—Å–∞'
                },
                {
                    'id': 'fix_weak_tests',
                    'name': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤',
                    'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'tasks': [
                        '–ù–∞–π—Ç–∏ –∑–∞–≥–ª—É—à–µ–Ω–Ω—ã–µ/–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
                        '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö',
                        '–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏'
                    ],
                    'priority': 'medium',
                    'estimated_time': '1 —á–∞—Å'
                },
                {
                    'id': 'organize_tests',
                    'name': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤',
                    'description': '–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∫ –ø—Ä–∏–Ω—è—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞',
                    'tasks': [
                        '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ –ø–∞–ø–∫—É tests/',
                        '–ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∏–ª—é –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è',
                        '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º',
                        '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ—Å—Ç—ã',
                        '–°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã'
                    ],
                    'priority': 'medium',
                    'estimated_time': '30-60 –º–∏–Ω—É—Ç'
                },
                {
                    'id': 'fix_development_issues',
                    'name': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                    'description': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∞–∫—Ç–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                    'tasks': [
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è code style',
                        '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                        '–ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤'
                    ],
                    'priority': 'medium',
                    'estimated_time': '1 —á–∞—Å'
                },
                {
                    'id': 'organize_files',
                    'name': '–ù–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ —Ñ–∞–π–ª–∞—Ö',
                    'description': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞',
                    'tasks': [
                        '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏',
                        '–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ñ–∞–π–ª—ã',
                        '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                        '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤',
                        '–ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–¥–∏–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞'
                    ],
                    'priority': 'low',
                    'estimated_time': '30 –º–∏–Ω—É—Ç'
                },
                {
                    'id': 'update_progress',
                    'name': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
                    'description': '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                    'tasks': [
                        '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö',
                        '–ó–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                        '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –°–õ–ö —Å–∏—Å—Ç–µ–º—ã',
                        '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏',
                        '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏'
                    ],
                    'priority': 'high',
                    'estimated_time': '30 –º–∏–Ω—É—Ç'
                }
            ],
            'success_criteria': [
                '–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ fallback —Ä–µ—à–µ–Ω–∏—è',
                '–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ TODO',
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
                '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ç–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Å–≤—è–∑–∏',
                '–¢–µ—Å—Ç—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–æ–∫',
                '–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞',
                '–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω'
            ]
        }
        
        if verbose:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–∞–∑–∞ —Å {len(reflection_phase['subphases'])} —Å—É–±—Ñ–∞–∑–∞–º–∏")
        
        return reflection_phase
    
    def _display_phase_plan(self, phase: Dict[str, Any], verbose: bool):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        print(f"\nüìã –ü–õ–ê–ù –§–ê–ó–´ –†–ï–§–õ–ï–ö–°–ò–ò: {phase['project']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {phase['description']}")
        print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {phase['estimated_duration']}")
        print(f"üéØ –°—É–±—Ñ–∞–∑: {len(phase['subphases'])}")
        
        print("\nüîß –°–£–ë–§–ê–ó–´:")
        for i, subphase in enumerate(phase['subphases'], 1):
            priority_icon = {
                'critical': 'üî•',
                'high': 'üî¥', 
                'medium': 'üü°',
                'low': 'üü¢'
            }.get(subphase['priority'], '‚ö™')
            
            print(f"\n{i:2d}. {priority_icon} {subphase['name']}")
            print(f"     üìù {subphase['description']}")
            print(f"     ‚è±Ô∏è  {subphase['estimated_time']}")
            
            if verbose:
                print(f"     üìã –ó–∞–¥–∞—á–∏ ({len(subphase['tasks'])}):")
                for task in subphase['tasks']:
                    print(f"        ‚Ä¢ {task}")
        
        print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
        for criterion in phase['success_criteria']:
            print(f"   ‚úÖ {criterion}")
    
    def _create_phase_task(self, phase: Dict[str, Any], verbose: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if verbose:
            print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á–∏...")
        
        timestamp = time.time()
        task_id = f"reflection_phase_{int(timestamp)}"
        
        task_data = {
            'id': task_id,
            'project': phase['project'],
            'type': 'reflection_phase',
            'title': f"–§–∞–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {phase['project']}",
            'description': phase['description'],
            'status': 'active',
            'priority': phase['priority'],
            'created_at': timestamp,
            'estimated_duration': phase['estimated_duration'],
            'phase_data': phase,
            'current_subphase': 0,
            'completed_subphases': [],
            'notes': []
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏
        task_file = self.tasks_dir / f"{task_id}.json"
        self.tasks_dir.mkdir(exist_ok=True)
        
        with open(task_file, 'w', encoding='utf-8') as f:
            json.dump(task_data, f, ensure_ascii=False, indent=2, default=str)
        
        if verbose:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏: {task_file}")
        
        return task_id
    
    def _update_active_tasks(self, task_id: str, phase: Dict[str, Any], verbose: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if verbose:
            print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        active_tasks_file = self.tasks_dir / 'active.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_data = {}
        if active_tasks_file.exists():
            try:
                with open(active_tasks_file, 'r', encoding='utf-8') as f:
                    active_data = json.load(f)
            except:
                pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ–∞–∑—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        reflection_task = {
            "active_task_reference": {
                "$ref": f".context/tasks/{task_id}.json",
                "task_type": "reflection_phase",
                "priority": "HIGH",
                "status": "ACTIVE",
                "activated_at": datetime.now().isoformat()
            },
            "metadata": {
                "title": f"–†–µ—Ñ–ª–µ–∫—Å–∏—è: {phase['project']}",
                "task_id": task_id,
                "category": "maintenance",
                "description": phase['description'],
                "estimated_duration": phase['estimated_duration'],
                "current_focus": "–§–∞–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞"
            },
            "execution_status": {
                "phase": "–†–ï–§–õ–ï–ö–°–ò–Ø",
                "current_task": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Å—É–±—Ñ–∞–∑",
                "progress": "0%",
                "subphases_total": len(phase['subphases']),
                "subphases_completed": 0,
                "current_subphase": 1,
                "next_action": phase['subphases'][0]['name']
            },
            "reflection_data": {
                "project_name": phase['project'],
                "total_subphases": len(phase['subphases']),
                "priority_subphases": [s['name'] for s in phase['subphases'] if s['priority'] in ['critical', 'high']],
                "estimated_completion": datetime.now().isoformat()
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(active_tasks_file, 'w', encoding='utf-8') as f:
            json.dump(reflection_task, f, ensure_ascii=False, indent=2, default=str)
        
        if verbose:
            print(f"   ‚úÖ –§–∞–∑–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {active_tasks_file}")
            print(f"   üìã –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å: {reflection_task['metadata']['current_focus']}")
            print(f"   üéØ –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {reflection_task['execution_status']['next_action']}")
    
    def _reload_context(self, verbose: bool):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –°–õ–ö"""
        if verbose:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            root_path = self.base_path.parent
            slc_path = root_path / 'slc'
            
            if slc_path.exists():
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ CLI
                import subprocess
                result = subprocess.run(
                    [str(slc_path), 'reload-context'],
                    capture_output=True,
                    text=True,
                    cwd=str(root_path)
                )
                
                if result.returncode == 0:
                    if verbose:
                        print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
                else:
                    if verbose:
                        print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            else:
                if verbose:
                    print("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
                    
        except Exception as e:
            if verbose:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                print("   ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏") 