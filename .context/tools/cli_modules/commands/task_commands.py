"""
–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã: list, create

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-16
"""

import json
import argparse
from typing import Dict, List, Any
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand, ContextAwareCommand


class ListCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ —Å JSON –≤—ã–≤–æ–¥–æ–º –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, base_path: str):
        super().__init__()
        # –ï—Å–ª–∏ base_path —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç .context, —Ç–æ tasks –ø—Ä—è–º–æ –≤ –Ω–µ–º
        # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º .context
        base = Path(base_path)
        if base.name == ".context":
            self.tasks_path = base / "tasks"
        else:
            self.tasks_path = base / ".context" / "tasks"
    
    @property
    def name(self) -> str:
        return "list"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--status", "-s",
            choices=["active", "completed", "all"],
            default="active",
            help="–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∫–∞–∑–∞"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json", "summary"],
            default="summary",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
        parser.add_argument(
            "--detailed", "-d",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã list"""
        print("üìã –ó–∞–¥–∞—á–∏ Smart Layered Context")
        print("=" * 50)
        
        if not self.tasks_path.exists():
            self.print_warning("–ü–∞–ø–∫–∞ –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 1
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        all_tasks = self._get_all_tasks_data()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        status = getattr(args, 'status', 'active')
        detailed = getattr(args, 'detailed', False)
        format_type = getattr(args, 'format', 'summary')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if status in ["active", "all"]:
            self._show_tasks_by_status(all_tasks["active"], "üöÄ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò", format_type, detailed)
        
        if status in ["active", "all"] and all_tasks["pending"]:
            self._show_tasks_by_status(all_tasks["pending"], "üìã –û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–î–ê–ß–ò", format_type, detailed)
        
        if status in ["deferred", "all"] and all_tasks["deferred"]:
            self._show_tasks_by_status(all_tasks["deferred"], "‚è≥ –û–¢–õ–û–ñ–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò", format_type, detailed)
        
        if status in ["completed", "all"]:
            completed_count = len(all_tasks["completed"])
            if completed_count > 0:
                if detailed:
                    self._show_tasks_by_status(all_tasks["completed"], "‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò", format_type, detailed)
                else:
                    print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò: {completed_count} –∑–∞–¥–∞—á")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if status == "all":
            self._show_tasks_summary(all_tasks)
        
        # JSON –≤—ã–≤–æ–¥ –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        list_result = self._prepare_json_context_v2(all_tasks, status)
        self._output_json_context(list_result)
        
        return 0
    
    def _output_json_context(self, data: dict):
        """–í—ã–≤–æ–¥–∏—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 60)
        print("ü§ñ JSON –ö–û–ù–¢–ï–ö–°–¢ –î–õ–Ø AI:")
        print("=" * 60)
        print(json.dumps(data, ensure_ascii=False, indent=2))
        print("=" * 60)
    
    def _prepare_json_context(self, args: argparse.Namespace) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI"""
        active_tasks = self._get_active_tasks_data()
        completed_tasks = self._get_completed_tasks_data()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
        recommendations = []
        if active_tasks:
            completion = active_tasks.get('completion', '0%')
            if completion == '0%':
                recommendations.append("–ï—Å—Ç—å –Ω–µ–Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ - —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ")
            elif '100%' in completion:
                recommendations.append("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É")
            else:
                recommendations.append("–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É")
                
            current_focus = active_tasks.get('current_focus', {})
            if current_focus:
                title = current_focus.get('title', '')
                if title:
                    recommendations.append(f"–¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å: {title}")
        else:
            recommendations.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —à–∞–±–ª–æ–Ω—ã' –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        
        next_commands = []
        if active_tasks:
            if active_tasks.get('completion', '0%') == '0%':
                next_commands = ["templates", "intelligent-recommend", "load-context"]
            else:
                next_commands = ["status", "templates", "help"]
        else:
            next_commands = ["templates", "create", "intelligent-recommend"]
        
        # –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç
        suggested_files = []
        if active_tasks:
            suggested_files.append("tasks/active.json")
        if completed_tasks:
            suggested_files.append("tasks/completed/")
        suggested_files.extend(["manifest.json", "modules/core/project.json"])
        
        return {
            "command": "list",
            "status": "completed",
            "tasks_summary": {
                "active_count": 1 if active_tasks else 0,
                "completed_count": len(completed_tasks),
                "total_count": (1 if active_tasks else 0) + len(completed_tasks)
            },
            "active_project": active_tasks.get('project', None) if active_tasks else None,
            "current_focus": active_tasks.get('current_focus', {}).get('title', None) if active_tasks else None,
            "project_phase": active_tasks.get('phase', None) if active_tasks else None,
            "completion": active_tasks.get('completion', None) if active_tasks else None,
            "ai_recommendations": recommendations,
            "next_commands": next_commands,
            "suggested_files_to_load": suggested_files
        }
    
    def _get_active_tasks_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        active_file = self.tasks_path / "active.json"
        if not active_file.exists():
            return {}
        
        try:
            with open(active_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return {}
    
    def _get_completed_tasks_data(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        completed_path = self.tasks_path / "completed"
        if not completed_path.exists():
            return []
        
        completed_files = list(completed_path.glob("*.json"))
        completed_data = []
        
        for task_file in completed_files:
            try:
                with open(task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    completed_data.append({
                        "file": task_file.name,
                        "title": data.get('task', {}).get('title', task_file.stem),
                        "status": data.get('task', {}).get('status', 'completed')
                    })
            except Exception:
                continue
        
        return completed_data
    
    def _show_active_tasks(self, args: argparse.Namespace):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        active_file = self.tasks_path / "active.json"
        
        if not active_file.exists():
            print("\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        try:
            with open(active_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if args.format == "json":
                print(json.dumps(data, indent=2, ensure_ascii=False))
                return
            
            print(f"\nüéØ –ê–ö–¢–ò–í–ù–´–ô –ü–†–û–ï–ö–¢: {data.get('project', 'Unknown')}")
            print(f"üìä –í–µ—Ä—Å–∏—è: {data.get('version', 'Unknown')}")
            print(f"üèóÔ∏è –§–∞–∑–∞: {data.get('phase', 'Unknown')}")
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {data.get('completion', '0%')}")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status', 'Unknown')}")
            
            # –¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å
            current_focus = data.get('current_focus', {})
            if current_focus:
                print(f"\nüéØ –¢–ï–ö–£–©–ò–ô –§–û–ö–£–°:")
                print(f"   üìã {current_focus.get('title', 'Unknown')}")
                
                if args.detailed:
                    objectives = current_focus.get('completed_objectives', [])
                    if objectives:
                        print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏:")
                        for obj in objectives:
                            print(f"   {obj}")
                    
                    new_tasks = current_focus.get('new_tasks_created', [])
                    if new_tasks:
                        print(f"\nüìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
                        for task in new_tasks:
                            print(f"   {task}")
            
            # –§–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
            phases = data.get('phases_completed', [])
            if phases and (args.detailed or args.format == "table"):
                print(f"\nüìä –§–ê–ó–´ –ü–†–û–ï–ö–¢–ê:")
                for phase in phases:
                    print(f"   {phase}")
            
        except json.JSONDecodeError:
            self.print_error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞: {e}")
    
    def _show_completed_tasks(self, args: argparse.Namespace):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        completed_path = self.tasks_path / "completed"
        
        if not completed_path.exists():
            print("\nüìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        completed_files = list(completed_path.glob("*.json"))
        if not completed_files:
            print("\nüìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
            return
        
        print(f"\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò ({len(completed_files)}):")
        
        for task_file in sorted(completed_files):
            try:
                with open(task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                task_name = task_file.stem.replace('_completed', '').replace('_', ' ')
                task_title = data.get('task', {}).get('title', task_name)
                status = data.get('task', {}).get('status', 'Unknown')
                
                print(f"   üìÑ {task_title}")
                
                if args.detailed:
                    completion = data.get('task', {}).get('completion', 'Unknown')
                    print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"      ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {completion}")
                    
                    objectives = data.get('task', {}).get('objectives', [])
                    if objectives:
                        completed_count = sum(1 for obj in objectives if obj.startswith('‚úÖ'))
                        print(f"      üéØ –¶–µ–ª–∏: {completed_count}/{len(objectives)}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {task_file.name}: {e}")
    
    def _show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É"""
        active_count = 1 if (self.tasks_path / "active.json").exists() else 0
        
        completed_path = self.tasks_path / "completed"
        completed_count = len(list(completed_path.glob("*.json"))) if completed_path.exists() else 0
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê:")
        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_count}")
        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {completed_count}")
        print(f"   üìÅ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {active_count + completed_count}")
        
        print(f"\nüí° –ö–æ–º–∞–Ω–¥—ã:")
        print(f"   ./slc list --detailed - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print(f"   ./slc list --status completed - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ")
        print(f"   ./slc list --status all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
    
    def _get_all_tasks_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –ø–∞–ø–∫–∏ tasks"""
        all_tasks = {
            "active": [],
            "pending": [],
            "completed": [],
            "deferred": []
        }
        
        if not self.tasks_path.exists():
            return all_tasks
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ tasks/
        for task_file in self.tasks_path.glob("*.json"):
            if task_file.name in ["active.json", "history.json"]:
                continue
                
            try:
                with open(task_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: task_info –∏ task_data
                task_info = data.get('task_info', {}) or data.get('task_data', {})
                status = task_info.get('status', '–ù–û–í–ê–Ø').upper()
                priority = task_info.get('priority', '–°–†–ï–î–ù–ò–ô')
                completion = task_info.get('completion', str(task_info.get('progress', 0)) + '%')
                
                task_data = {
                    "file": task_file.name,
                    "title": task_info.get('title', task_file.stem),
                    "status": status,
                    "priority": priority,
                    "completion": completion,
                    "category": task_info.get('category', 'general'),
                    "created": task_info.get('created', data.get('created', '')),
                    "estimated_time": task_info.get('estimated_time', task_info.get('metadata', {}).get('estimated_duration', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                }
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
                if status in ['–ó–ê–í–ï–†–®–ï–ù–ê', 'COMPLETED', '–£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê']:
                    all_tasks["completed"].append(task_data)
                elif status in ['–í_–ü–†–û–¶–ï–°–°–ï', '–ê–ö–¢–ò–í–ù–ê–Ø', 'ACTIVE', 'IN_PROGRESS']:
                    all_tasks["active"].append(task_data)
                elif status in ['–û–¢–õ–û–ñ–ï–ù–ê', 'DEFERRED']:
                    all_tasks["deferred"].append(task_data)
                else:
                    all_tasks["pending"].append(task_data)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {task_file.name}: {e}")
                continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ completed/
        completed_path = self.tasks_path / "completed"
        if completed_path.exists():
            for task_file in completed_path.glob("*.json"):
                try:
                    with open(task_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    task_info = data.get('task', {}) or data.get('task_info', {})
                    task_data = {
                        "file": f"completed/{task_file.name}",
                        "title": task_info.get('title', task_file.stem),
                        "status": "–ó–ê–í–ï–†–®–ï–ù–ê",
                        "priority": task_info.get('priority', '–°–†–ï–î–ù–ò–ô'),
                        "completion": "100%",
                        "category": task_info.get('category', 'completed'),
                        "created": task_info.get('created', ''),
                        "estimated_time": task_info.get('estimated_time', '')
                    }
                    all_tasks["completed"].append(task_data)
                except Exception:
                    continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ deferred/
        deferred_path = self.tasks_path / "deferred"
        if deferred_path.exists():
            for task_file in deferred_path.glob("*.json"):
                try:
                    with open(task_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    task_info = data.get('task_info', {})
                    task_data = {
                        "file": f"deferred/{task_file.name}",
                        "title": task_info.get('title', task_file.stem),
                        "status": "–û–¢–õ–û–ñ–ï–ù–ê",
                        "priority": task_info.get('priority', '–ù–ò–ó–ö–ò–ô'),
                        "completion": task_info.get('completion', '0%'),
                        "category": task_info.get('category', 'deferred'),
                        "created": task_info.get('created', ''),
                        "estimated_time": task_info.get('estimated_time', '')
                    }
                    all_tasks["deferred"].append(task_data)
                except Exception:
                    continue
        
        return all_tasks 
    
    def _show_tasks_by_status(self, tasks: list, title: str, format_type: str, detailed: bool):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        if not tasks:
            return
        
        print(f"\n{title} ({len(tasks)})")
        print("-" * 50)
        
        if format_type == "json":
            print(json.dumps(tasks, indent=2, ensure_ascii=False))
            return
        
        for task in tasks:
            priority_emoji = {
                '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô': 'üî¥',
                '–í–´–°–û–ö–ò–ô': 'üü†', 
                '–°–†–ï–î–ù–ò–ô': 'üü°',
                '–ù–ò–ó–ö–ò–ô': 'üü¢'
            }.get(task['priority'], '‚ö™')
            
            completion = task['completion']
            completion_emoji = '‚úÖ' if completion == '100%' else 'üîÑ' if '0%' not in completion else '‚è∏Ô∏è'
            
            print(f"  {priority_emoji} {completion_emoji} {task['title']}")
            
            if detailed:
                print(f"     üìÅ {task['file']}")
                print(f"     üìä {task['completion']} | üè∑Ô∏è {task['category']}")
                if task['estimated_time'] != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    print(f"     ‚è±Ô∏è {task['estimated_time']}")
                print()
    
    def _show_tasks_summary(self, all_tasks: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á"""
        active_count = len(all_tasks["active"])
        pending_count = len(all_tasks["pending"]) 
        deferred_count = len(all_tasks["deferred"])
        completed_count = len(all_tasks["completed"])
        total_count = active_count + pending_count + deferred_count + completed_count
        
        print("\n" + "=" * 50)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß")
        print("=" * 50)
        print(f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ:     {active_count}")
        print(f"üìã –û–∂–∏–¥–∞—é—â–∏–µ:    {pending_count}")
        print(f"‚è≥ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ:   {deferred_count}")
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:  {completed_count}")
        print(f"üìä –í—Å–µ–≥–æ:        {total_count}")
        
        if total_count > 0:
            completion_rate = (completed_count / total_count) * 100
            print(f"üìà –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {completion_rate:.1f}%")
    
    def _prepare_json_context_v2(self, all_tasks: dict, status: str) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI"""
        active_count = len(all_tasks["active"])
        pending_count = len(all_tasks["pending"])
        deferred_count = len(all_tasks["deferred"])
        completed_count = len(all_tasks["completed"])
        total_count = active_count + pending_count + deferred_count + completed_count
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á
        recommendations = []
        current_focus = None
        
        if active_count > 0:
            active_task = all_tasks["active"][0]
            recommendations.append(f"–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {active_task['title']}")
            current_focus = active_task['title']
            
            if active_task['completion'] == '0%':
                recommendations.append("–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–µ")
            elif active_task['completion'] == '100%':
                recommendations.append("–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å")
        
        if pending_count > 0:
            recommendations.append(f"–ï—Å—Ç—å {pending_count} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        
        if active_count == 0 and pending_count == 0:
            recommendations.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —à–∞–±–ª–æ–Ω—ã' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π")
        
        # –°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        next_commands = []
        if active_count > 0:
            next_commands = ["load-context", "status", "templates"]
        elif pending_count > 0:
            next_commands = ["load-context", "templates", "intelligent-recommend"]
        else:
            next_commands = ["templates", "create", "help"]
        
        # –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        suggested_files = ["tasks/active.json", "manifest.json", "modules/core/project.json"]
        if active_count > 0:
            active_file = all_tasks["active"][0]["file"]
            suggested_files.insert(0, f"tasks/{active_file}")
        
        return {
            "command": "list",
            "status": "completed",
            "tasks_summary": {
                "active_count": active_count,
                "pending_count": pending_count,
                "deferred_count": deferred_count,
                "completed_count": completed_count,
                "total_count": total_count
            },
            "current_focus": current_focus,
            "top_priority_tasks": [
                task["title"] for task in (all_tasks["active"] + all_tasks["pending"])[:3]
            ],
            "ai_recommendations": recommendations,
            "next_commands": next_commands,
            "suggested_files_to_load": suggested_files,
            "task_details": {
                "active": all_tasks["active"][:3],  # –¢–æ–ø 3 –∞–∫—Ç–∏–≤–Ω—ã–µ
                "pending": all_tasks["pending"][:5]  # –¢–æ–ø 5 –æ–∂–∏–¥–∞—é—â–∏–µ
            }
        }


class CreateCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ create - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        # –ï—Å–ª–∏ base_path —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç .context, —Ç–æ tasks –ø—Ä—è–º–æ –≤ –Ω–µ–º
        # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º .context
        base = Path(base_path)
        if base.name == ".context":
            self.tasks_path = base / "tasks"
        else:
            self.tasks_path = base / ".context" / "tasks"
        self.template_path = self.tasks_path / "templates" / "task_template.json"
        self.active_file = self.tasks_path / "active.json"
    
    @property
    def name(self) -> str:
        return "create"
    
    @property
    def description(self) -> str:
        return "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "title",
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        )
        parser.add_argument(
            "--category", "-c",
            choices=["ai_development", "refactoring", "optimization", "testing", "documentation", "infrastructure"],
            default="ai_development",
            help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–¥–∞—á–∏"
        )
        parser.add_argument(
            "--priority", "-p",
            choices=["LOW", "MEDIUM", "HIGH", "CRITICAL"],
            default="MEDIUM",
            help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏"
        )
        parser.add_argument(
            "--archive", "-a",
            action="store_true",
            default=True,
            help="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: True)"
        )
        parser.add_argument(
            "--no-archive",
            action="store_true",
            help="–ù–ï –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É"
        )
        parser.add_argument(
            "--force", "-f",
            action="store_true",
            help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–≤ –∞–∫—Ç–∏–≤–Ω—É—é"
        )
        parser.add_argument(
            "--description", "-d",
            help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        )
        parser.add_argument(
            "--estimated-time", "-t",
            help="–û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 –Ω–µ–¥–µ–ª–∏', '3 –¥–Ω—è')"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã create"""
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {args.title}")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        if not self.template_path.exists():
            self.print_error(f"–®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.template_path}")
            return 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --no-archive)
        should_archive = not getattr(args, 'no_archive', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
        if self.active_file.exists() and not args.force and not should_archive:
            self.print_error("–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
            print("   --archive (-a) –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏")
            print("   --force (-f) –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏")
            print("   --no-archive –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
            return 1
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if should_archive and self.active_file.exists():
            if not self._archive_current_task():
                return 1
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        return self._create_new_task(args)
    
    def _archive_current_task(self) -> bool:
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É"""
        try:
            print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏...")
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            with open(self.active_file, 'r', encoding='utf-8') as f:
                current_task = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            from datetime import datetime
            current_task["completion_date"] = datetime.now().isoformat()
            current_task["status"] = "ARCHIVED"
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            completed_dir = self.tasks_path / "completed"
            completed_dir.mkdir(exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            task_ref = current_task.get("active_task_reference", {})
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            task_title = "unknown_task"
            if task_ref and isinstance(task_ref, dict):
                metadata = task_ref.get("metadata", {})
                if metadata and isinstance(metadata, dict):
                    task_title = metadata.get("title", "unknown_task")
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in str(task_title) if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title.replace(' ', '_').lower()[:30] if safe_title else "unknown_task"
            
            archive_file = completed_dir / f"{safe_title}_{timestamp}.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
            with open(archive_file, 'w', encoding='utf-8') as f:
                json.dump(current_task, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {archive_file.name}")
            return True
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _create_new_task(self, args: argparse.Namespace) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
            with open(self.template_path, 'r', encoding='utf-8') as f:
                template = json.load(f)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            from datetime import datetime
            timestamp = datetime.now()
            task_id = f"TASK_{timestamp.strftime('%Y%m%d_%H%M%S')}"
            iso_timestamp = timestamp.isoformat()
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            safe_title = "".join(c for c in args.title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_title = safe_title.replace(' ', '_').lower()[:40]
            task_filename = f"{safe_title}_{timestamp.strftime('%Y%m%d_%H%M%S')}.json"
            task_file_path = self.tasks_path / task_filename
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω –¥–∞–Ω–Ω—ã–º–∏
            task_data = template.copy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            if "task_template" in task_data:
                task_info = task_data["task_template"]
                task_info["id"] = task_id
                task_info["title"] = args.title
                task_info["category"] = args.category
                task_info["priority"] = args.priority
                task_info["status"] = "ACTIVE"
                task_info["progress"] = 0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if "metadata" in task_info:
                    task_info["metadata"]["created"] = iso_timestamp
                    task_info["metadata"]["updated"] = iso_timestamp
                    task_info["metadata"]["estimated_duration"] = args.estimated_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
                if args.description:
                    task_info["description"] = args.description
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                if "navigation_system" in task_data:
                    task_data["navigation_system"]["current_file"] = f".context/tasks/{task_filename}"
                    task_data["navigation_system"]["purpose"] = f"–ó–∞–¥–∞—á–∞: {args.title}"
                    task_data["navigation_system"]["ai_context"] = f"–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –°–õ–ö: {args.title}"
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º context_loading_policy.auto_load –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if "context" in task_info and "context_loading_policy" in task_info["context"]:
                    base_files = [
                        "modules/core/manifest.json",
                        "modules/core/standards.json", 
                        "modules/core/development_standards.json",
                        "modules/core/project.json"
                    ]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª—ã
                    category_files = {
                        "ai_development": [
                            "modules/ai_ml/prompt_engineering.json",
                            "modules/ai_ml/ai_agent_development.json"
                        ],
                        "refactoring": [
                            "modules/languages/python/python_development.json",
                            "modules/core/development_standards.json"
                        ],
                        "testing": [
                            "modules/languages/python/python_development.json",
                            "modules/core/development_standards.json"
                        ],
                        "documentation": [
                            "modules/methodologies/documentation_systems.json",
                            "modules/methodologies/obsidian_workflow.json"
                        ],
                        "infrastructure": [
                            "modules/core/development_standards.json"
                        ],
                        "optimization": [
                            "modules/languages/python/python_development.json"
                        ]
                    }
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Python/DAP –∑–∞–¥–∞—á –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    title_lower = args.title.lower()
                    if any(keyword in title_lower for keyword in ["python", "dap", "–±–∏–Ω–¥–∏–Ω–≥", "binding"]):
                        category_files["python_dap"] = [
                            "modules/projects/dap_sdk_project.json",
                            "modules/languages/python/python_development.json",
                            "modules/languages/python/knowledge_base/dap_sdk_binding_standards.json"
                        ]
                        args.category = "python_dap"  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ —Ñ–∞–π–ª—ã
                    auto_load_files = base_files[:]
                    if args.category in category_files:
                        auto_load_files.extend(category_files[args.category])
                    
                    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    auto_load_files = list(dict.fromkeys(auto_load_files))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º auto_load –≤ –∑–∞–¥–∞—á–µ
                    task_info["context"]["context_loading_policy"]["auto_load"] = auto_load_files
                    
                    print(f"üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(auto_load_files)} —Ñ–∞–π–ª–æ–≤ –≤ auto_load –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{args.category}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∑–∞–¥–∞—á–∏
            with open(task_file_path, 'w', encoding='utf-8') as f:
                json.dump(task_data, f, indent=2, ensure_ascii=False)
            
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º active.json —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            active_data = {
                "active_task_reference": {
                    "$ref": f".context/tasks/{task_filename}",
                    "task_type": "custom_task",
                    "priority": args.priority,
                    "status": "ACTIVE",
                    "activated_at": iso_timestamp
                },
                "metadata": {
                    "title": args.title,
                    "task_id": task_id,
                    "category": args.category,
                    "description": args.description or "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                    "estimated_duration": args.estimated_time or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    "current_focus": args.title
                },
                "execution_status": {
                    "phase": "–ù–ê–ß–ê–õ–¨–ù–ê–Ø",
                    "current_task": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "progress": "0%",
                    "next_action": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
                    "last_update": iso_timestamp,
                    "completed_steps": [
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {args.title}",
                        f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {args.priority}",
                        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {args.category}"
                    ]
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º active.json
            with open(self.active_file, 'w', encoding='utf-8') as f:
                json.dump(active_data, f, indent=2, ensure_ascii=False)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {args.title}")
            print(f"üÜî ID: {task_id}")
            print(f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {args.category}")
            print(f"üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {args.priority}")
            print(f"üìÅ –§–∞–π–ª –∑–∞–¥–∞—á–∏: {task_filename}")
            
            if args.description:
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {args.description}")
            
            if args.estimated_time:
                print(f"‚è±Ô∏è –û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {args.estimated_time}")
            
            print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print(f"   ./slc load-context \"{args.title}\" - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
            print(f"   ./slc list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")
            print(f"   ./slc status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
            
            # JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            create_result = {
                "command": "create",
                "status": "completed",
                "task_created": {
                    "id": task_id,
                    "title": args.title,
                    "category": args.category,
                    "priority": args.priority,
                    "file": task_filename,
                    "created_at": iso_timestamp
                },
                "ai_recommendations": [
                    f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{args.title}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏",
                    "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
                ],
                "next_commands": ["load-context", "list", "status"],
                "suggested_files_to_load": [
                    f"tasks/{task_filename}",
                    "tasks/active.json",
                    "manifest.json"
                ]
            }
            
            self.output_json_context(create_result)
            
            return 0
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return 1 