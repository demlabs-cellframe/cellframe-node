#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã —ç–≤–æ–ª—é—Ü–∏–∏ –°–õ–ö

–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
- export: –≠–∫—Å–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ .slc-update –ø–∞–∫–µ—Ç
- import: –ò–º–ø–æ—Ä—Ç .slc-update –ø–∞–∫–µ—Ç–∞
- evolution-validate: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞

–í–µ—Ä—Å–∏—è: 1.1.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import argparse
import json
import os
import sys
import time
import shutil
import hashlib
from pathlib import Path
from typing import Dict, List, Any, Optional, Union
import zipfile
import tempfile
import uuid
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent.parent))

from ..base_command import BaseCommand, ContextAwareCommand


class ExportEvolutionCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ SLC –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ .slc-update –ø–∞–∫–µ—Ç"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.evolution_state_file = Path(base_path) / ".slc" / "evolution_state.json"
    
    @property
    def name(self) -> str:
        return "export"
    
    @property  
    def description(self) -> str:
        return "üì¶ –≠–∫—Å–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π SLC –≤ .slc-update –ø–∞–∫–µ—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--output", "-o",
            help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É .slc-update —Ñ–∞–π–ª—É"
        )
        parser.add_argument(
            "--since", "-s",
            help="–≠–∫—Å–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (YYYY-MM-DD)"
        )
        parser.add_argument(
            "--modules", "-m",
            nargs="*",
            help="–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"
        )
        parser.add_argument(
            "--type", "-t",
            choices=["new_module", "enhancement", "core_update", "cli_improvement", "docs", "all"],
            default="all",
            help="–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
        )
        parser.add_argument(
            "--preview", "-p",
            action="store_true",
            help="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞"
        )
        parser.add_argument(
            "--description", "-d",
            help="–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
        parser.add_argument(
            "--create-baseline",
            action="store_true",
            help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π baseline –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã export-evolution"""
        print("üì¶ –≠–∫—Å–ø–æ—Ä—Ç SLC Evolution")
        print("=" * 40)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º baseline
            baseline = self._load_or_create_baseline()
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes = self._detect_changes(baseline, args)
            
            if not changes["changed_files"] and not changes["new_files"] and not changes["deleted_files"]:
                print("‚ÑπÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                result = {
                    "command": "export",
                    "status": "no_changes",
                    "changes_count": 0
                }
            else:
                print(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
                print(f"   üìÑ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(changes['new_files'])}")
                print(f"   ‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(changes['changed_files'])}")
                print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(changes['deleted_files'])}")
                
                if args.preview:
                    self._show_preview(changes)
                    result = {
                        "command": "export",
                        "status": "preview_completed",
                        "changes_count": len(changes['new_files']) + len(changes['changed_files']) + len(changes['deleted_files'])
                    }
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
                    package_path = self._create_update_package(changes, args)
                    print(f"‚úÖ –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: {package_path}")
                    
                    if args.create_baseline:
                        self._create_baseline()
                        print("üìù –ù–æ–≤—ã–π baseline —Å–æ–∑–¥–∞–Ω")
                    
                    result = {
                        "command": "export",
                        "status": "completed",
                        "package_path": str(package_path),
                        "changes_count": len(changes['new_files']) + len(changes['changed_files']) + len(changes['deleted_files'])
                    }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if result["changes_count"] > 0:
                recommendations.append("–ü–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ —ç–≤–æ–ª—é—Ü–∏—è-–≤–∞–ª–∏–¥–∞—Ü–∏—è' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞")
                if not args.create_baseline:
                    recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ baseline: --create-baseline")
            else:
                recommendations.append("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                recommendations.append("–í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥—É–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ")
            
            result["ai_recommendations"] = recommendations
            result["next_commands"] = ["evolution-validate", "list", "templates"]
            
            self.output_json_context(result)
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return 1
    
    def _load_or_create_baseline(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å baseline"""
        if self.evolution_state_file.exists():
            try:
                with open(self.evolution_state_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        
        return self._create_baseline()
    
    def _create_baseline(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π baseline"""
        baseline = {
            "version": "4.0.0",
            "timestamp": datetime.now().isoformat(),
            "files_registry": {}
        }
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        tracked_patterns = [
            "modules/**/*.json",
            "tasks/**/*.json", 
            "tools/scripts/*.py",
            "docs/*.md",
            "*.md",
            "VERSION"
        ]
        
        base_path = Path(self.base_path)
        for pattern in tracked_patterns:
            for file_path in base_path.glob(pattern):
                if file_path.is_file():
                    rel_path = str(file_path.relative_to(base_path))
                    baseline["files_registry"][rel_path] = self._get_file_info(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º baseline
        self.evolution_state_file.parent.mkdir(parents=True, exist_ok=True)
        with open(self.evolution_state_file, 'w', encoding='utf-8') as f:
            json.dump(baseline, f, indent=2, ensure_ascii=False)
        
        return baseline
    
    def _get_file_info(self, file_path: Path) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        stat = file_path.stat()
        
        with open(file_path, 'rb') as f:
            content = f.read()
            file_hash = hashlib.sha256(content).hexdigest()
        
        return {
            "hash": file_hash,
            "size": stat.st_size,
            "modified": stat.st_mtime,
            "type": file_path.suffix.lower()
        }
    
    def _detect_changes(self, baseline: Dict[str, Any], args: argparse.Namespace) -> Dict[str, List]:
        """–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseline"""
        current_files = {}
        base_path = Path(self.base_path)
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã
        tracked_patterns = [
            "modules/**/*.json",
            "tasks/**/*.json",
            "tools/scripts/*.py", 
            "docs/*.md",
            "*.md",
            "VERSION"
        ]
        
        for pattern in tracked_patterns:
            for file_path in base_path.glob(pattern):
                if file_path.is_file():
                    rel_path = str(file_path.relative_to(base_path))
                    current_files[rel_path] = self._get_file_info(file_path)
        
        baseline_files = baseline.get("files_registry", {})
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_files = []
        changed_files = []
        deleted_files = []
        
        # –ù–æ–≤—ã–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path, file_info in current_files.items():
            if file_path not in baseline_files:
                new_files.append(file_path)
            elif file_info["hash"] != baseline_files[file_path]["hash"]:
                changed_files.append(file_path)
        
        # –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path in baseline_files:
            if file_path not in current_files:
                deleted_files.append(file_path)
        
        return {
            "new_files": new_files,
            "changed_files": changed_files,
            "deleted_files": deleted_files
        }
    
    def _show_preview(self, changes: Dict[str, List]):
        """–ü–æ–∫–∞–∑–∞—Ç—å preview –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print("\nüìã PREVIEW –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
        print("-" * 30)
        
        if changes["new_files"]:
            print(f"\nüìÑ –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã ({len(changes['new_files'])}):")
            for file_path in changes["new_files"][:10]:
                print(f"   + {file_path}")
            if len(changes["new_files"]) > 10:
                print(f"   ... –∏ –µ—â–µ {len(changes['new_files']) - 10} —Ñ–∞–π–ª–æ–≤")
        
        if changes["changed_files"]:
            print(f"\n‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(changes['changed_files'])}):")
            for file_path in changes["changed_files"][:10]:
                print(f"   ~ {file_path}")
            if len(changes["changed_files"]) > 10:
                print(f"   ... –∏ –µ—â–µ {len(changes['changed_files']) - 10} —Ñ–∞–π–ª–æ–≤")
        
        if changes["deleted_files"]:
            print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(changes['deleted_files'])}):")
            for file_path in changes["deleted_files"][:10]:
                print(f"   - {file_path}")
            if len(changes["deleted_files"]) > 10:
                print(f"   ... –∏ –µ—â–µ {len(changes['deleted_files']) - 10} —Ñ–∞–π–ª–æ–≤")
    
    def _create_update_package(self, changes: Dict[str, List], args: argparse.Namespace) -> Path:
        """–°–æ–∑–¥–∞—Ç—å .slc-update –ø–∞–∫–µ—Ç"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if args.output:
            output_path = Path(args.output)
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = Path(f"slc_evolution_{timestamp}.slc-update")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç
        package = {
            "header": {
                "update_id": str(uuid.uuid4()),
                "version": "4.0.0",
                "timestamp": datetime.now().isoformat(),
                "author": "SLC Evolution System",
                "description": args.description or "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            },
            "metadata": {
                "change_summary": f"{len(changes['new_files'])} –Ω–æ–≤—ã—Ö, {len(changes['changed_files'])} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö, {len(changes['deleted_files'])} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
                "impact_assessment": "minor",
                "dependencies": [],
                "compatibility": "4.0.0+",
                "rollback_info": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –æ—Ç–∫–∞—Ç"
            },
            "changes": {
                "new_files": {},
                "modified_files": {},
                "deleted_files": changes["deleted_files"]
            }
        }
        
        base_path = Path(self.base_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in changes["new_files"]:
            full_path = base_path / file_path
            if full_path.exists():
                with open(full_path, 'r', encoding='utf-8') as f:
                    package["changes"]["new_files"][file_path] = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in changes["changed_files"]:
            full_path = base_path / file_path
            if full_path.exists():
                with open(full_path, 'r', encoding='utf-8') as f:
                    package["changes"]["modified_files"][file_path] = f.read()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞–∫–µ—Ç
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(package, f, indent=2, ensure_ascii=False)
        
        return output_path


class ImportEvolutionCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∞ .slc-update –ø–∞–∫–µ—Ç–∞"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
    
    @property
    def name(self) -> str:
        return "import"
    
    @property  
    def description(self) -> str:
        return "üì• –ò–º–ø–æ—Ä—Ç .slc-update –ø–∞–∫–µ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "package",
            help="–ü—É—Ç—å –∫ .slc-update —Ñ–∞–π–ª—É"
        )
        parser.add_argument(
            "--preview", "-p",
            action="store_true",
            help="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
        parser.add_argument(
            "--backup", "-b",
            help="–ò–º—è backup —Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ)"
        )
        parser.add_argument(
            "--selective", "-s",
            action="store_true",
            help="–í—ã–±–æ—Ä–æ—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
        parser.add_argument(
            "--force", "-f",
            action="store_true",
            help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã import-evolution"""
        print("üì• –ò–º–ø–æ—Ä—Ç SLC Evolution")
        print("=" * 40)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç
            package = self._load_and_validate_package(args.package)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            conflicts = self._analyze_conflicts(package)
            
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–∞–∫–µ—Ç–∞:")
            print(f"   üìÑ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(package['changes'].get('new_files', {}))}")
            print(f"   ‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(package['changes'].get('modified_files', {}))}")
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(package['changes'].get('deleted_files', []))}")
            print(f"   ‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {len(conflicts)}")
            
            if conflicts:
                print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã:")
                for conflict in conflicts[:5]:
                    print(f"   ‚Ä¢ {conflict}")
                if len(conflicts) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(conflicts) - 5} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
            
            if args.preview:
                self._show_import_preview(package, conflicts)
                result = {
                    "command": "import",
                    "status": "preview_completed",
                    "conflicts_count": len(conflicts)
                }
            else:
                # –°–æ–∑–¥–∞–µ–º backup
                backup_name = self._create_backup(args.backup)
                print(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {backup_name}")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                applied_changes = self._apply_changes(package, conflicts, args)
                print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {applied_changes}")
                
                result = {
                    "command": "import",
                    "status": "completed",
                    "applied_changes": applied_changes,
                    "backup_name": backup_name,
                    "conflicts_count": len(conflicts)
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if len(conflicts) > 0:
                recommendations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                recommendations.append("–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ rollback' –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            else:
                recommendations.append("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: '—Å–ª–∫ —Å—Ç–∞—Ç—É—Å'")
            
            result["ai_recommendations"] = recommendations
            result["next_commands"] = ["status", "validate"] if len(conflicts) > 0 else ["status", "list"]
            
            self.output_json_context(result)
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return 1
    
    def _load_and_validate_package(self, package_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç"""
        package_file = Path(package_path)
        if not package_file.exists():
            raise FileNotFoundError(f"–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {package_path}")
        
        with open(package_file, 'r', encoding='utf-8') as f:
            package = json.load(f)
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        required_sections = ["header", "metadata", "changes"]
        for section in required_sections:
            if section not in package:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}")
        
        return package
    
    def _analyze_conflicts(self, package: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        conflicts = []
        base_path = Path(self.base_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        for file_path in package["changes"].get("modified_files", {}):
            full_path = base_path / file_path
            if full_path.exists():
                conflicts.append(f"–§–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: {file_path}")
        
        for file_path in package["changes"].get("new_files", {}):
            full_path = base_path / file_path
            if full_path.exists():
                conflicts.append(f"–ù–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º: {file_path}")
        
        return conflicts
    
    def _show_import_preview(self, package: Dict[str, Any], conflicts: List[str]):
        """–ü–æ–∫–∞–∑–∞—Ç—å preview –∏–º–ø–æ—Ä—Ç–∞"""
        print("\nüìã PREVIEW –ò–ú–ü–û–†–¢–ê:")
        print("-" * 30)
        
        header = package.get("header", {})
        print(f"üì¶ –ü–∞–∫–µ—Ç: {header.get('description', 'N/A')}")
        print(f"üîñ –í–µ—Ä—Å–∏—è: {header.get('version', 'N/A')}")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {header.get('author', 'N/A')}")
        print(f"üìÖ –î–∞—Ç–∞: {header.get('timestamp', 'N/A')}")
        
        changes = package.get("changes", {})
        
        if changes.get("new_files"):
            print(f"\nüìÑ –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã:")
            for file_path in list(changes["new_files"].keys())[:10]:
                print(f"   + {file_path}")
        
        if changes.get("modified_files"):
            print(f"\n‚úèÔ∏è  –§–∞–π–ª—ã –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã:")
            for file_path in list(changes["modified_files"].keys())[:10]:
                print(f"   ~ {file_path}")
        
        if changes.get("deleted_files"):
            print(f"\nüóëÔ∏è  –§–∞–π–ª—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
            for file_path in changes["deleted_files"][:10]:
                print(f"   - {file_path}")
    
    def _create_backup(self, backup_name: Optional[str]) -> str:
        """–°–æ–∑–¥–∞—Ç—å backup"""
        if not backup_name:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"pre_import_{timestamp}"
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–ª–Ω—ã–π backup
        print(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ backup: {backup_name}")
        return backup_name
    
    def _apply_changes(self, package: Dict[str, Any], conflicts: List[str], args: argparse.Namespace) -> int:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        changes_applied = 0
        base_path = Path(self.base_path)
        changes = package.get("changes", {})
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for file_path, content in changes.get("new_files", {}).items():
            full_path = base_path / file_path
            full_path.parent.mkdir(parents=True, exist_ok=True)
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            changes_applied += 1
            print(f"   + –°–æ–∑–¥–∞–Ω: {file_path}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path, content in changes.get("modified_files", {}).items():
            full_path = base_path / file_path
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            changes_applied += 1
            print(f"   ~ –ò–∑–º–µ–Ω–µ–Ω: {file_path}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file_path in changes.get("deleted_files", []):
            full_path = base_path / file_path
            if full_path.exists():
                full_path.unlink()
                changes_applied += 1
                print(f"   - –£–¥–∞–ª–µ–Ω: {file_path}")
        
        return changes_applied


class ValidateEvolutionCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ .slc-update –ø–∞–∫–µ—Ç–∞"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
    
    @property
    def name(self) -> str:
        return "evolution-validate"
    
    @property  
    def description(self) -> str:
        return "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è .slc-update –ø–∞–∫–µ—Ç–∞ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "package",
            help="–ü—É—Ç—å –∫ .slc-update —Ñ–∞–π–ª—É"
        )
        parser.add_argument(
            "--detailed", "-d",
            action="store_true",
            help="–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã validate-evolution"""
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è SLC Evolution –ø–∞–∫–µ—Ç–∞")
        print("=" * 40)
        
        try:
            package_file = Path(args.package)
            if not package_file.exists():
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.package}")
                return 1
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç
            with open(package_file, 'r', encoding='utf-8') as f:
                package = json.load(f)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            issues = self._validate_package_structure(package)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if args.detailed:
                content_issues = self._validate_content(package)
                issues.extend(content_issues)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if issues:
                print(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
                for issue in issues:
                    print(f"   ‚Ä¢ {issue}")
                
                result = {
                    "command": "evolution-validate",
                    "status": "invalid",
                    "issues": issues,
                    "valid": False
                }
            else:
                print("‚úÖ –ü–∞–∫–µ—Ç –≤–∞–ª–∏–¥–µ–Ω")
                
                result = {
                    "command": "evolution-validate", 
                    "status": "valid",
                    "issues": [],
                    "valid": True
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []
            if issues:
                recommendations.append("–ü–∞–∫–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º")
                recommendations.append("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            else:
                recommendations.append("–ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É - –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å")
                recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–ª–∫ –∏–º–ø–æ—Ä—Ç' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
            result["ai_recommendations"] = recommendations
            result["next_commands"] = ["help"] if issues else ["import"]
            
            self.output_json_context(result)
            
            return 0 if not issues else 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return 1
    
    def _validate_package_structure(self, package: Dict[str, Any]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–∫–µ—Ç–∞"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = ["header", "metadata", "changes"]
        for section in required_sections:
            if section not in package:
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è: {section}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º header
        if "header" in package:
            header = package["header"]
            required_header_fields = ["update_id", "version", "timestamp"]
            for field in required_header_fields:
                if field not in header:
                    issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ header.{field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º changes
        if "changes" in package:
            changes = package["changes"]
            if not any([
                changes.get("new_files"),
                changes.get("modified_files"), 
                changes.get("deleted_files")
            ]):
                issues.append("–ü–∞–∫–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        return issues
    
    def _validate_content(self, package: Dict[str, Any]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        issues = []
        changes = package.get("changes", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–∞–π–ª—ã
        for file_path, content in changes.get("new_files", {}).items():
            if file_path.endswith('.json'):
                try:
                    json.loads(content)
                except json.JSONDecodeError as e:
                    issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ {file_path}: {e}")
        
        for file_path, content in changes.get("modified_files", {}).items():
            if file_path.endswith('.json'):
                try:
                    json.loads(content)
                except json.JSONDecodeError as e:
                    issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ {file_path}: {e}")
        
        return issues