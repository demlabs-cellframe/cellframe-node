"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –°–õ–ö
"""

import argparse
import json
import os
from pathlib import Path
from typing import Dict, Any, List

from ..base_command import BaseCommand, ContextAwareCommand
from ..core.system_validator import SystemValidator
from .evolution_commands import ExportEvolutionCommand, ImportEvolutionCommand, ValidateEvolutionCommand


class ValidateCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ validate - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –°–õ–ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.system_validator = SystemValidator(base_path)
    
    @property
    def name(self) -> str:
        return "validate"
    
    @property
    def description(self) -> str:
        return "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        super().add_arguments(parser)  # –î–æ–±–∞–≤–ª—è–µ—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç
        parser.add_argument(
            "--fix", 
            action="store_true",
            help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        )
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
        parser.add_argument(
            "--verbose", "-v",
            action="store_true",
            help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
        )
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è validate"""
        return [
            "VERSION",
            "manifest.json",
            "modules/**/*.json",
            "modules/core/standards.json",
            "tasks/active.json"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        is_valid = execution_result.get("is_valid", False)
        issues_count = len(execution_result.get("issues", []))
        components_checked = execution_result.get("components_checked", 0)
        files_checked = execution_result.get("files_checked", 0)
        
        status = "‚úÖ –í–ê–õ–ò–î–ù–ê" if is_valid else f"‚ùå –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {issues_count}"
        
        return f"""
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –°–õ–ö:
        - –°—Ç–∞—Ç—É—Å: {status}
        - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {components_checked}
        - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_checked}
        - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {len([i for i in execution_result.get("issues", []) if i.get("severity") == "high"])}
        """
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        actions = []
        
        if execution_result.get("is_valid", True):
            actions.extend([
                "–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - —Å–ª–∫ status",
                "–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é - —Å–ª–∫ optimize"
            ])
        else:
            issues = execution_result.get("issues", [])
            high_severity = [i for i in issues if i.get("severity") == "high"]
            medium_severity = [i for i in issues if i.get("severity") == "medium"]
            
            if high_severity:
                actions.extend([
                    f"–ö–†–ò–¢–ò–ß–ù–û: {len(high_severity)} —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–ª–∫ validate --fix",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–ª–∫ status"
                ])
            
            if medium_severity:
                actions.append(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å {len(medium_severity)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
            missing_files = [i for i in issues if "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in i.get("description", "").lower()]
            if missing_files:
                actions.append("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤")
                
        return actions
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        if execution_result.get("is_valid", True):
            return [
                "—Å–ª–∫ optimize",
                "—Å–ª–∫ status", 
                "—Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è",
                "—Å–ª–∫ intelligence-stats"
            ]
        else:
            issues = execution_result.get("issues", [])
            high_severity = [i for i in issues if i.get("severity") == "high"]
            
            if high_severity:
                return [
                    "—Å–ª–∫ validate --fix",
                    "—Å–ª–∫ status",
                    "—Å–ª–∫ optimize --clean-cache"
                ]
            else:
                return [
                    "—Å–ª–∫ validate --fix",
                    "—Å–ª–∫ optimize",
                    "—Å–ª–∫ status"
                ]
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –°–õ–ö...")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation_result = self.system_validator.validate_system()
        
        if args.format == "json":
            print(json.dumps(validation_result, indent=2, ensure_ascii=False))
            return validation_result
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_validation_results(validation_result, args.verbose)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if args.fix and not validation_result["is_valid"]:
            print("\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            fix_result = self.system_validator.fix_issues(validation_result["issues"])
            self._print_fix_results(fix_result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            validation_result = {
                **validation_result,
                "fix_attempted": True,
                "fix_result": fix_result
            }
        
        return validation_result
    
    def _print_validation_results(self, result: Dict[str, Any], verbose: bool):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if result["is_valid"]:
            self.print_success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –°–õ–ö –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            print(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {result['components_checked']}")
            print(f"üìÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {result['files_checked']}")
            return
        
        self.print_error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(result['issues'])}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
        issues_by_type = {}
        for issue in result["issues"]:
            issue_type = issue.get("type", "unknown")
            if issue_type not in issues_by_type:
                issues_by_type[issue_type] = []
            issues_by_type[issue_type].append(issue)
        
        for issue_type, issues in issues_by_type.items():
            print(f"\nüìã {issue_type.upper()} ({len(issues)} –ø—Ä–æ–±–ª–µ–º):")
            for issue in issues:
                severity = issue.get("severity", "medium")
                icon = "üî¥" if severity == "high" else "üü°" if severity == "medium" else "üü¢"
                print(f"   {icon} {issue['description']}")
                
                if verbose and issue.get("details"):
                    print(f"      üí° {issue['details']}")
                
                if issue.get("fix_suggestion"):
                    print(f"      üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {issue['fix_suggestion']}")
    
    def _print_fix_results(self, fix_result: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        if fix_result["success"]:
            self.print_success(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {fix_result['fixed_count']}")
        else:
            self.print_warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fix_result['fixed_count']}/{fix_result['total_count']}")
        
        if fix_result.get("remaining_issues"):
            print("\nüîç –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞:")
            for issue in fix_result["remaining_issues"]:
                print(f"   ‚Ä¢ {issue['description']}")


class StatusCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.base_path = Path(base_path)
    
    @property
    def name(self) -> str:
        return "status"
    
    @property
    def description(self) -> str:
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        super().add_arguments(parser)  # –î–æ–±–∞–≤–ª—è–µ—Ç JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç
        parser.add_argument(
            "--format", "-f",
            choices=["table", "json"],
            default="table",
            help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"
        )
    
    def get_default_context_files(self) -> List[str]:
        """–§–∞–π–ª—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è status"""
        return [
            "VERSION",
            "manifest.json",
            ".slc_usage_stats.json",
            "tasks/active.json"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞—Ç—É—Å–∞"""
        health = execution_result.get("health", {})
        templates = execution_result.get("templates", {})
        version = execution_result.get("version", "unknown")
        
        health_status = health.get("status", "unknown")
        templates_count = templates.get("total", 0)
        
        return f"""
        –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö:
        - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {health_status.upper()}
        - –í–µ—Ä—Å–∏—è: {version}
        - –î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}
        - –ö–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤: {len(templates.get("categories", {}))}
        """
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞"""
        actions = []
        
        health = execution_result.get("health", {})
        health_status = health.get("status", "unknown")
        issues = health.get("issues", [])
        
        if health_status == "critical":
            actions.extend([
                "–°–†–û–ß–ù–û: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã - —Å–ª–∫ validate",
                "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - —Å–ª–∫ validate --fix",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
            ])
        elif health_status == "warning":
            actions.extend([
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - —Å–ª–∫ validate", 
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º - —Å–ª–∫ validate --fix"
            ])
        elif health_status == "healthy":
            actions.extend([
                "–°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏",
                "–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é - —Å–ª–∫ optimize",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π - —Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        templates = execution_result.get("templates", {})
        if templates.get("total", 0) < 10:
            actions.append("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        return actions
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        health = execution_result.get("health", {})
        health_status = health.get("status", "unknown")
        
        if health_status == "critical":
            return [
                "—Å–ª–∫ validate --fix",
                "—Å–ª–∫ optimize --clean-cache",
                "—Å–ª–∫ –ø–æ–º–æ—â—å validate"
            ]
        elif health_status == "warning":
            return [
                "—Å–ª–∫ validate",
                "—Å–ª–∫ optimize",
                "—Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"
            ]
        else:
            return [
                "—Å–ª–∫ optimize",
                "—Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è", 
                "—Å–ª–∫ intelligence-stats",
                "—Å–ª–∫ templates"
            ]
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        status_info = self._collect_status_info()
        
        if args.format == "json":
            print(json.dumps(status_info, indent=2, ensure_ascii=False))
            return status_info
        
        print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö")
        print("=" * 40)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üè† –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.base_path}")
        print(f"üì¶ –í–µ—Ä—Å–∏—è: {status_info['version']}")
        print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status_info['last_updated']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        templates_stats = status_info['templates']
        print(f"\nüìã –®–∞–±–ª–æ–Ω—ã:")
        print(f"   üìÑ –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_stats['total']}")
        print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(templates_stats['categories'])}")
        
        for category, count in templates_stats['categories'].items():
            print(f"      ‚Ä¢ {category}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        projects_stats = status_info.get('projects', {})
        if projects_stats.get('total', 0) > 0:
            print(f"\nüöÄ –ü—Ä–æ–µ–∫—Ç—ã:")
            print(f"   üìÅ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_stats['total']}")
            print(f"   ‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {projects_stats.get('active', 0)}")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        health = status_info['health']
        health_icon = "üü¢" if health['status'] == 'healthy' else "üü°" if health['status'] == 'warning' else "üî¥"
        print(f"\nüíó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health_icon} {health['status'].upper()}")
        
        if health.get('issues'):
            print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:")
            for issue in health['issues']:
                print(f"      ‚Ä¢ {issue}")
        
        return status_info
    
    def _collect_status_info(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "version": self._get_version(),
            "last_updated": self._get_last_updated(),
            "templates": self._get_templates_stats(),
            "projects": self._get_projects_stats(),
            "health": self._get_health_status()
        }
        return status
    
    def _get_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        version_file = self.base_path / "VERSION"
        if version_file.exists():
            try:
                return version_file.read_text().strip()
            except:
                pass
        return "unknown"
    
    def _get_last_updated(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            import time
            mtime = os.path.getmtime(self.base_path)
            return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mtime))
        except:
            return "unknown"
    
    def _get_templates_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        templates_path = self.base_path / "modules"
        if not templates_path.exists():
            return {"total": 0, "categories": {}}
        
        categories = {}
        total = 0
        
        for root, dirs, files in os.walk(templates_path):
            for file in files:
                if file.endswith('.json'):
                    rel_path = Path(root).relative_to(templates_path)
                    category = str(rel_path) if str(rel_path) != '.' else 'root'
                    categories[category] = categories.get(category, 0) + 1
                    total += 1
        
        return {"total": total, "categories": categories}
    
    def _get_projects_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—â–µ–º .slc_project.json —Ñ–∞–π–ª—ã
        projects = 0
        active = 0
        
        for root, dirs, files in os.walk(self.base_path):
            if '.slc_project.json' in files:
                projects += 1
                # –ü—Ä–æ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω—è–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ
                try:
                    import time
                    mtime = os.path.getmtime(os.path.join(root, '.slc_project.json'))
                    if time.time() - mtime < 30 * 24 * 60 * 60:  # 30 –¥–Ω–µ–π
                        active += 1
                except:
                    pass
        
        return {"total": projects, "active": active}
    
    def _get_health_status(self) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = ["modules", "tools"]
        for dir_name in required_dirs:
            if not (self.base_path / dir_name).exists():
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        critical_files = ["VERSION", "README.md"]
        for file_name in critical_files:
            if not (self.base_path / file_name).exists():
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_name}")
        
        if not issues:
            return {"status": "healthy"}
        elif len(issues) <= 2:
            return {"status": "warning", "issues": issues}
        else:
            return {"status": "critical", "issues": issues}


class OptimizeCommand(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ optimize - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –°–õ–ö"""
    
    def __init__(self, base_path: str):
        super().__init__()
        self.base_path = Path(base_path)
    
    @property
    def name(self) -> str:
        return "optimize"
    
    @property
    def description(self) -> str:
        return "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –°–õ–ö"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        )
        parser.add_argument(
            "--clean-cache",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"
        )
        parser.add_argument(
            "--compress",
            action="store_true",
            help="–°–∂–∞—Ç—å —Ñ–∞–π–ª—ã"
        )
    
    def execute(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã optimize"""
        print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –°–õ–ö...")
        print("=" * 40)
        
        optimizations = []
        
        if args.clean_cache:
            optimizations.append(self._clean_cache)
        
        if args.compress:
            optimizations.append(self._compress_files)
        
        if not optimizations:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimizations = [self._clean_cache, self._compress_files]
        
        total_saved = 0
        for optimization in optimizations:
            result = optimization(args.dry_run)
            if result:
                print(f"‚úÖ {result['name']}: {result['description']}")
                if result.get('saved_space'):
                    total_saved += result['saved_space']
                    print(f"   üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {self._format_size(result['saved_space'])}")
        
        if total_saved > 0:
            print(f"\nüéâ –û–±—â–µ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {self._format_size(total_saved)}")
        
        return 0
    
    def _clean_cache(self, dry_run: bool) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        cache_dirs = [
            self.base_path / ".cache",
            self.base_path / "tools" / ".cache",
            self.base_path / "__pycache__"
        ]
        
        total_size = 0
        for cache_dir in cache_dirs:
            if cache_dir.exists():
                total_size += self._get_dir_size(cache_dir)
                if not dry_run:
                    import shutil
                    shutil.rmtree(cache_dir)
        
        return {
            "name": "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
            "description": "–£–¥–∞–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
            "saved_space": total_size
        }
    
    def _compress_files(self, dry_run: bool) -> Dict[str, Any]:
        """–°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–æ–≤"""
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∂–∞—Ç–∏–µ JSON —Ñ–∞–π–ª–æ–≤
        return {
            "name": "–°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–æ–≤", 
            "description": "–§–∞–π–ª—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è",
            "saved_space": 0
        }
    
    def _get_dir_size(self, path: Path) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        total_size = 0
        try:
            for dirpath, dirnames, filenames in os.walk(path):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    total_size += os.path.getsize(filepath)
        except:
            pass
        return total_size
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"


class CreateArchiveCommand(ContextAwareCommand):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    
    def __init__(self, base_path: str):
        super().__init__(base_path)
        self.base_path = Path(base_path)
    
    @property
    def name(self) -> str:
        return "create-archive"
    
    @property
    def description(self) -> str:
        return "–°–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    
    def add_arguments(self, parser: argparse.ArgumentParser):
        parser.add_argument(
            "--output-dir",
            type=str,
            default="../releases",
            help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
        )
    
    def get_default_context_files(self) -> List[str]:
        return [
            ".context/manifest.json",
            ".context/modules/core/standards.json",
            "VERSION"
        ]
    
    def get_context_summary(self, execution_result: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"""
        if execution_result.get("success"):
            return f"–ê—Ä—Ö–∏–≤ v{execution_result.get('version', 'unknown')} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        return "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
    
    def get_recommended_actions(self, execution_result: Dict[str, Any]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"""
        if execution_result.get("success"):
            return [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –≤ –ø–∞–ø–∫–µ releases/",
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ",
                "–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ manifest.json –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ",
                "–°–æ–∑–¥–∞—Ç—å git tag –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏"
            ]
        return [
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–∞–Ω–¥–æ–π: ./slc status",
            "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ–π: ./slc validate",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"
        ]
    
    def get_next_commands(self, execution_result: Dict[str, Any]) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if execution_result.get("success"):
            return [
                "./slc status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
                "./slc validate - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É",
                "git tag v{version} - –°–æ–∑–¥–∞—Ç—å git tag".format(
                    version=execution_result.get('version', '0.0.0')
                )
            ]
        return [
            "./slc status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            "./slc validate - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å"
        ]
    
    def execute_with_context(self, args: argparse.Namespace) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            script_path = self.base_path / "tools" / "deployment" / "create_deployment_archive.sh"
            
            if not script_path.exists():
                return {
                    "success": False,
                    "error": f"–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}",
                    "version": "unknown"
                }
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
            import subprocess
            result = subprocess.run(
                [str(script_path)], 
                capture_output=True, 
                text=True, 
                cwd=self.base_path.parent
            )
            
            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –≤–µ—Ä—Å–∏—é –∏–∑ –≤—ã–≤–æ–¥–∞
                version = self._parse_version_from_output(result.stdout)
                
                return {
                    "success": True,
                    "message": "–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                    "version": version,
                    "output": result.stdout,
                    "archives_created": self._find_created_archives(args.output_dir),
                    "stats": self._get_archive_stats(result.stdout)
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {result.stderr}",
                    "version": "unknown"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}",
                "version": "unknown"
            }
    
    def _parse_version_from_output(self, output: str) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ—Ä—Å–∏–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
        import re
        match = re.search(r'v(\d+\.\d+\.\d+)', output)
        return match.group(1) if match else "unknown"
    
    def _find_created_archives(self, output_dir: str) -> List[str]:
        """–ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤"""
        archives = []
        output_path = Path(output_dir)
        if output_path.exists():
            for archive in output_path.glob("smart-layered-context-v*.tar.gz"):
                archives.append(str(archive))
            for archive in output_path.glob("smart-layered-context-v*.zip"):
                archives.append(str(archive))
        return archives
    
    def _get_archive_stats(self, output: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –≤—ã–≤–æ–¥–∞"""
        import re
        stats = {}
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
        files_match = re.search(r'–§–∞–π–ª–æ–≤:\s*(\d+)', output)
        if files_match:
            stats['files'] = int(files_match.group(1))
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞
        size_match = re.search(r'–†–∞–∑–º–µ—Ä:\s*([0-9.]+[A-Z]+)', output)
        if size_match:
            stats['size'] = size_match.group(1)
        
        return stats 