#!/usr/bin/env python3
"""
File Organization Engine - –î–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –°–õ–ö

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- Smart file placement - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
- Real-time monitoring - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- Automatic cleanup - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
- Rule-based organization - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-15
"""

import os
import shutil
import json
import time
import hashlib
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Set, Any
from dataclasses import dataclass
from enum import Enum
from datetime import datetime
import re
import mimetypes


class FileType(Enum):
    """–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    DOCUMENTATION = "documentation"
    CODE = "code"
    TEMPLATE = "template"
    CONFIGURATION = "configuration"
    TEMPORARY = "temporary"
    ARCHIVE = "archive"
    SYSTEM = "system"
    MEDIA = "media"
    UNKNOWN = "unknown"


class OrganizationAction(Enum):
    """–î–µ–π—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    MOVE = "move"
    COPY = "copy"
    DELETE = "delete"
    RENAME = "rename"
    IGNORE = "ignore"
    ARCHIVE = "archive"


@dataclass
class FileInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    path: Path
    name: str
    extension: str
    size: int
    created_time: float
    modified_time: float
    file_type: FileType
    mime_type: Optional[str]
    content_hash: Optional[str]
    is_temporary: bool
    is_backup: bool
    parent_directory: str


@dataclass
class OrganizationRule:
    """–ü—Ä–∞–≤–∏–ª–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    name: str
    pattern: str
    file_types: List[FileType]
    target_directory: str
    action: OrganizationAction
    conditions: Dict[str, Any]
    priority: int
    enabled: bool


@dataclass
class OrganizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    processed_files: int
    moved_files: int
    deleted_files: int
    archived_files: int
    errors: List[str]
    warnings: List[str]
    execution_time: float
    rules_applied: List[str]
    space_freed: int


class FileOrganizationEngine:
    """–î–≤–∏–∂–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, base_path: str = "."):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
        
        Args:
            base_path: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –°–õ–ö
        """
        self.base_path = Path(base_path)
        self.config_file = self.base_path / ".slc" / "organization_config.json"
        self.log_file = self.base_path / ".slc" / "organization_log.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∏–ª–∞
        self.config = self._load_config()
        self.rules = self._load_organization_rules()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
        self.file_monitor = FileSystemMonitor(self.base_path)
        self.cleanup_system = AutoCleanupSystem(self.base_path)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_operations": 0,
            "files_organized": 0,
            "space_freed": 0,
            "last_cleanup": None
        }
    
    def organize_files(self, target_paths: List[str] = None, dry_run: bool = False) -> OrganizationResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
        
        Args:
            target_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (None = –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç)
            dry_run: –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        """
        start_time = time.time()
        result = OrganizationResult(
            processed_files=0,
            moved_files=0,
            deleted_files=0,
            archived_files=0,
            errors=[],
            warnings=[],
            execution_time=0,
            rules_applied=[],
            space_freed=0
        )
        
        try:
            print("üóÇÔ∏è  –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if target_paths is None:
                target_paths = [str(self.base_path)]
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            files_to_process = self._scan_files(target_paths)
            result.processed_files = len(files_to_process)
            
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            for file_info in files_to_process:
                try:
                    action_result = self._apply_organization_rules(file_info, dry_run)
                    
                    if action_result:
                        rule_name, action, target_path = action_result
                        result.rules_applied.append(rule_name)
                        
                        if not dry_run:
                            success = self._execute_action(file_info, action, target_path)
                            if success:
                                self._update_counters(result, action, file_info.size)
                        else:
                            print(f"[DRY RUN] {action.value}: {file_info.path} -> {target_path}")
                            
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_info.path}: {str(e)}"
                    result.errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            cleanup_result = self.cleanup_system.perform_cleanup(dry_run=dry_run)
            result.deleted_files += cleanup_result.deleted_files
            result.space_freed += cleanup_result.space_freed
            
            result.execution_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._log_operation(result, dry_run)
            
            print(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.execution_time:.2f}—Å")
            print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.processed_files} —Ñ–∞–π–ª–æ–≤")
            print(f"   üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {result.moved_files} —Ñ–∞–π–ª–æ–≤")
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {result.deleted_files} —Ñ–∞–π–ª–æ–≤")
            print(f"   üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {self._format_size(result.space_freed)}")
            
            return result
            
        except Exception as e:
            result.errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            result.execution_time = time.time() - start_time
            return result
    
    def _scan_files(self, target_paths: List[str]) -> List[FileInfo]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É—Ç—è—Ö"""
        files = []
        
        for path_str in target_paths:
            path = Path(path_str)
            
            if path.is_file():
                file_info = self._analyze_file(path)
                if file_info:
                    files.append(file_info)
            elif path.is_dir():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                for file_path in path.rglob("*"):
                    if file_path.is_file() and not self._should_ignore_file(file_path):
                        file_info = self._analyze_file(file_path)
                        if file_info:
                            files.append(file_info)
        
        return files
    
    def _analyze_file(self, file_path: Path) -> Optional[FileInfo]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            stat = file_path.stat()
            mime_type = mimetypes.guess_type(str(file_path))[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_type = self._classify_file_type(file_path, mime_type)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            content_hash = None
            if stat.st_size < 1024 * 1024:  # –§–∞–π–ª—ã –º–µ–Ω–µ–µ 1MB
                try:
                    with open(file_path, 'rb') as f:
                        content_hash = hashlib.md5(f.read()).hexdigest()
                except Exception:
                    pass
            
            return FileInfo(
                path=file_path,
                name=file_path.name,
                extension=file_path.suffix.lower(),
                size=stat.st_size,
                created_time=stat.st_ctime,
                modified_time=stat.st_mtime,
                file_type=file_type,
                mime_type=mime_type,
                content_hash=content_hash,
                is_temporary=self._is_temporary_file(file_path),
                is_backup=self._is_backup_file(file_path),
                parent_directory=str(file_path.parent.relative_to(self.base_path))
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
    
    def _classify_file_type(self, file_path: Path, mime_type: Optional[str]) -> FileType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞"""
        name = file_path.name.lower()
        extension = file_path.suffix.lower()
        
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        if extension in ['.md', '.txt', '.rst', '.textile'] or 'readme' in name:
            return FileType.DOCUMENTATION
        
        # –ö–æ–¥
        if extension in ['.py', '.js', '.ts', '.json', '.yaml', '.yml', '.sh', '.bash']:
            return FileType.CODE
        
        # –®–∞–±–ª–æ–Ω—ã
        if 'template' in name or file_path.parent.name == 'templates':
            return FileType.TEMPLATE
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if extension in ['.conf', '.cfg', '.ini', '.env'] or name.startswith('.'):
            return FileType.CONFIGURATION
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if self._is_temporary_file(file_path):
            return FileType.TEMPORARY
        
        # –ê—Ä—Ö–∏–≤—ã
        if extension in ['.tar', '.gz', '.zip', '.rar', '.7z']:
            return FileType.ARCHIVE
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        if name.startswith('.') or extension in ['.log', '.pid', '.lock']:
            return FileType.SYSTEM
        
        # –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        if mime_type and mime_type.startswith(('image/', 'video/', 'audio/')):
            return FileType.MEDIA
        
        return FileType.UNKNOWN
    
    def _is_temporary_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º"""
        name = file_path.name.lower()
        
        temporary_patterns = [
            r'^temp_.*',
            r'^tmp_.*',
            r'^test_.*',
            r'.*\.tmp$',
            r'.*\.temp$',
            r'.*~$',
            r'^\.#.*',
            r'.*\.bak$',
            r'.*\.backup$'
        ]
        
        for pattern in temporary_patterns:
            if re.match(pattern, name):
                return True
        
        return False
    
    def _is_backup_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª backup'–æ–º"""
        name = file_path.name.lower()
        
        backup_patterns = [
            r'^backup_.*',
            r'.*\.backup$',
            r'.*\.bak$',
            r'.*_backup\.',
            r'.*\.old$',
            r'.*\.orig$'
        ]
        
        for pattern in backup_patterns:
            if re.match(pattern, name):
                return True
        
        return False
    
    def _should_ignore_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ .git, __pycache__, node_modules –∏ —Ç.–¥.
        ignore_dirs = {'.git', '__pycache__', 'node_modules', '.vscode', '.idea'}
        
        for parent in file_path.parents:
            if parent.name in ignore_dirs:
                return True
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–∂–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if str(file_path).startswith('.slc/'):
            return True
        
        return False
    
    def _apply_organization_rules(self, file_info: FileInfo, dry_run: bool) -> Optional[Tuple[str, OrganizationAction, str]]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫ —Ñ–∞–π–ª—É"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_rules = sorted(self.rules, key=lambda r: r.priority, reverse=True)
        
        for rule in sorted_rules:
            if not rule.enabled:
                continue
            
            if self._rule_matches(rule, file_info):
                target_path = self._resolve_target_path(rule.target_directory, file_info)
                return rule.name, rule.action, target_path
        
        return None
    
    def _rule_matches(self, rule: OrganizationRule, file_info: FileInfo) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª—É"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if file_info.file_type not in rule.file_types:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–µ–Ω–∏
        if not re.match(rule.pattern, file_info.name):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        for condition, value in rule.conditions.items():
            if condition == "min_size" and file_info.size < value:
                return False
            elif condition == "max_size" and file_info.size > value:
                return False
            elif condition == "extension" and file_info.extension not in value:
                return False
            elif condition == "max_age_days":
                age_days = (time.time() - file_info.modified_time) / (24 * 3600)
                if age_days < value:
                    return False
        
        return True
    
    def _resolve_target_path(self, target_template: str, file_info: FileInfo) -> str:
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞"""
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        replacements = {
            "{extension}": file_info.extension.lstrip('.'),
            "{file_type}": file_info.file_type.value,
            "{parent_dir}": file_info.parent_directory,
            "{year}": str(datetime.now().year),
            "{month}": str(datetime.now().month).zfill(2),
            "{day}": str(datetime.now().day).zfill(2)
        }
        
        target_path = target_template
        for placeholder, value in replacements.items():
            target_path = target_path.replace(placeholder, value)
        
        return target_path
    
    def _execute_action(self, file_info: FileInfo, action: OrganizationAction, target_path: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            source_path = file_info.path
            target_full_path = self.base_path / target_path / file_info.name
            
            # –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            target_full_path.parent.mkdir(parents=True, exist_ok=True)
            
            if action == OrganizationAction.MOVE:
                shutil.move(str(source_path), str(target_full_path))
                print(f"üìÇ –ü–µ—Ä–µ–º–µ—â—ë–Ω: {source_path} -> {target_full_path}")
                
            elif action == OrganizationAction.COPY:
                shutil.copy2(str(source_path), str(target_full_path))
                print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path} -> {target_full_path}")
                
            elif action == OrganizationAction.DELETE:
                source_path.unlink()
                print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω: {source_path}")
                
            elif action == OrganizationAction.ARCHIVE:
                archive_path = self.base_path / "archives" / f"{datetime.now().strftime('%Y-%m')}"
                archive_path.mkdir(parents=True, exist_ok=True)
                shutil.move(str(source_path), str(archive_path / file_info.name))
                print(f"üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {source_path} -> {archive_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {action.value} –¥–ª—è {file_info.path}: {e}")
            return False
    
    def _update_counters(self, result: OrganizationResult, action: OrganizationAction, file_size: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if action == OrganizationAction.MOVE:
            result.moved_files += 1
        elif action == OrganizationAction.DELETE:
            result.deleted_files += 1
            result.space_freed += file_size
        elif action == OrganizationAction.ARCHIVE:
            result.archived_files += 1
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        default_config = {
            "auto_cleanup_enabled": True,
            "cleanup_interval_hours": 24,
            "backup_before_delete": True,
            "max_file_age_days": 30,
            "verbose_logging": True
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return {**default_config, **json.load(f)}
            except Exception:
                pass
        
        return default_config
    
    def _load_organization_rules(self) -> List[OrganizationRule]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –°–õ–ö
        default_rules = [
            OrganizationRule(
                name="Move Documentation to docs/",
                pattern=r".*\.(md|txt|rst|textile)$",
                file_types=[FileType.DOCUMENTATION],
                target_directory="docs",
                action=OrganizationAction.MOVE,
                conditions={"extension": [".md", ".txt", ".rst", ".textile"]},
                priority=80,
                enabled=True
            ),
            OrganizationRule(
                name="Move temporary files to .slc/temp/",
                pattern=r"(temp_|tmp_|test_).*",
                file_types=[FileType.TEMPORARY],
                target_directory=".slc/temp",
                action=OrganizationAction.MOVE,
                conditions={},
                priority=90,
                enabled=True
            ),
            OrganizationRule(
                name="Archive old backup files",
                pattern=r".*(backup|\.bak|\.old).*",
                file_types=[FileType.ARCHIVE],
                target_directory="archives/backups",
                action=OrganizationAction.ARCHIVE,
                conditions={"max_age_days": 7},
                priority=85,
                enabled=True
            ),
            OrganizationRule(
                name="Delete ancient temporary files",
                pattern=r".*\.(tmp|temp)$",
                file_types=[FileType.TEMPORARY],
                target_directory="",
                action=OrganizationAction.DELETE,
                conditions={"max_age_days": 1},
                priority=95,
                enabled=True
            ),
            OrganizationRule(
                name="Move scripts to tools/scripts/",
                pattern=r".*\.(sh|bash|py)$",
                file_types=[FileType.CODE],
                target_directory="tools/scripts",
                action=OrganizationAction.MOVE,
                conditions={"extension": [".sh", ".bash", ".py"]},
                priority=70,
                enabled=False  # Disabled by default to avoid moving core files
            )
        ]
        
        return default_rules
    
    def _log_operation(self, result: OrganizationResult, dry_run: bool):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "dry_run": dry_run,
            "result": {
                "processed_files": result.processed_files,
                "moved_files": result.moved_files,
                "deleted_files": result.deleted_files,
                "archived_files": result.archived_files,
                "space_freed": result.space_freed,
                "execution_time": result.execution_time,
                "rules_applied": result.rules_applied,
                "errors": result.errors,
                "warnings": result.warnings
            }
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
        log_entries = []
        if self.log_file.exists():
            try:
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    log_entries = json.load(f)
            except Exception:
                pass
        
        log_entries.append(log_entry)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        log_entries = log_entries[-100:]
        
        try:
            self.log_file.parent.mkdir(parents=True, exist_ok=True)
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(log_entries, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
    
    def _format_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024
        return f"{size_bytes:.1f} TB"
    
    def get_organization_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            "total_operations": self.stats["total_operations"],
            "files_organized": self.stats["files_organized"],
            "space_freed": self._format_size(self.stats["space_freed"]),
            "last_cleanup": self.stats["last_cleanup"],
            "rules_count": len(self.rules),
            "enabled_rules": len([r for r in self.rules if r.enabled])
        }


class FileSystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, base_path: Path):
        self.base_path = base_path
        self.watched_paths = set()
        self.callbacks = []
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (placeholder –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)"""
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class AutoCleanupSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    
    def __init__(self, base_path):
        self.base_path = Path(base_path) if isinstance(base_path, str) else base_path
    
    def perform_cleanup(self, dry_run: bool = False) -> OrganizationResult:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É"""
        
        result = OrganizationResult(
            processed_files=0,
            moved_files=0,
            deleted_files=0,
            archived_files=0,
            errors=[],
            warnings=[],
            execution_time=0,
            rules_applied=["auto_cleanup"],
            space_freed=0
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        temp_files = []
        for pattern in ["*.tmp", "*.temp", ".*~", "test_*", "temp_*"]:
            temp_files.extend(self.base_path.glob(pattern))
        
        for temp_file in temp_files:
            if temp_file.is_file():
                try:
                    file_size = temp_file.stat().st_size
                    if not dry_run:
                        temp_file.unlink()
                        print(f"üßπ –£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                    else:
                        print(f"[DRY RUN] –£–¥–∞–ª–∏—Ç—å: {temp_file}")
                    
                    result.deleted_files += 1
                    result.space_freed += file_size
                    
                except Exception as e:
                    result.errors.append(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_file}: {str(e)}")
        
        result.processed_files = len(temp_files)
        return result


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def quick_organize(target_paths: List[str] = None, dry_run: bool = False) -> OrganizationResult:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤"""
    engine = FileOrganizationEngine()
    return engine.organize_files(target_paths, dry_run)


def cleanup_project(dry_run: bool = False) -> OrganizationResult:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    engine = FileOrganizationEngine()
    cleanup = AutoCleanupSystem(engine.base_path)
    return cleanup.perform_cleanup(dry_run)


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        dry_run = "--dry-run" in sys.argv
        
        if command == "organize":
            result = quick_organize(dry_run=dry_run)
            print(f"\n‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.moved_files} —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ")
            
        elif command == "cleanup":
            result = cleanup_project(dry_run=dry_run)
            print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.deleted_files} —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
            
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python file_organization_engine.py [organize|cleanup] [--dry-run]")
    else:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        result = quick_organize(dry_run=True)
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {result.processed_files} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ") 