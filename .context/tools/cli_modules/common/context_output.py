#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
Smart Context Switching –¥–ª—è –°–õ–ö –∫–æ–º–∞–Ω–¥

–í–µ—Ä—Å–∏—è: 1.0.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-20
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional


class ContextOutputManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JSON –≤—ã–≤–æ–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        
    def create_context_output(
        self,
        command_name: str,
        execution_result: Dict[str, Any],
        context_files: List[str] = None,
        context_summary: str = None,
        recommended_actions: List[str] = None,
        next_commands: List[str] = None,
        load_content: bool = False
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –≤—ã–≤–æ–¥ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            command_name: –ò–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            execution_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            context_files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ AI
            context_summary: –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è AI
            recommended_actions: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            next_commands: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            load_content: –ó–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        """
        
        output = {
            "slc_context_output": True,
            "timestamp": datetime.now().isoformat(),
            "command": command_name,
            "execution_result": execution_result,
            "context_data": {
                "files_to_load": context_files or [],
                "context_summary": context_summary or f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command_name}",
                "recommended_actions": recommended_actions or [],
                "next_commands": next_commands or []
            }
        }
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        if load_content and context_files:
            output["context_data"]["files_content"] = self._load_files_content(context_files)
            
        return output
    
    def _load_files_content(self, file_paths: List[str]) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files_content = {}
        
        for file_path in file_paths:
            try:
                full_path = self.base_path / file_path.lstrip('/')
                if full_path.exists():
                    with open(full_path, 'r', encoding='utf-8') as f:
                        if file_path.endswith('.json'):
                            files_content[file_path] = json.load(f)
                        else:
                            files_content[file_path] = f.read()
                else:
                    files_content[file_path] = {"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            except Exception as e:
                files_content[file_path] = {"error": str(e)}
                
        return files_content
    
    def print_context_output(self, context_output: Dict[str, Any]):
        """–í—ã–≤–µ—Å—Ç–∏ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*80)
        print("üìä SLC CONTEXT OUTPUT (JSON)")
        print("="*80)
        print(json.dumps(context_output, ensure_ascii=False, indent=2))
        print("="*80)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def with_context_output(context_files: List[str] = None, 
                       context_summary: str = None,
                       recommended_actions: List[str] = None,
                       next_commands: List[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    @with_context_output(
        context_files=[".slc_reflection_log.json"],
        context_summary="–†–µ—Ñ–ª–µ–∫—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        next_commands=["—Å–ª–∫ –∞–Ω–∞–ª–∏–∑", "—Å–ª–∫ —Å—Ç–∞—Ç—É—Å"]
    )
    def reflection_command(self, args):
        ...
    """
    def decorator(func):
        def wrapper(self, args):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            result = func(self, args)
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω JSON –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if hasattr(args, 'json_context') and args.json_context:
                if hasattr(self, 'base_path'):
                    manager = ContextOutputManager(str(self.base_path))
                    context_output = manager.create_context_output(
                        command_name=getattr(self, 'name', func.__name__),
                        execution_result={"status": "success", "return_code": result},
                        context_files=context_files,
                        context_summary=context_summary,
                        recommended_actions=recommended_actions,
                        next_commands=next_commands,
                        load_content=getattr(args, 'load_content', False)
                    )
                    manager.print_context_output(context_output)
            
            return result
        return wrapper
    return decorator


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥

def create_reflection_context(reflection_results: Dict[str, Any], base_path: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
    manager = ContextOutputManager(base_path)
    
    context_files = [
        ".slc_reflection_log.json",
        "tasks/active.json"
    ]
    
    insights_count = len(reflection_results.get('insights', []))
    tasks_count = len(reflection_results.get('analyzed_tasks', []))
    
    context_summary = f"""
    –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –°–õ–ö —Å–∏—Å—Ç–µ–º—ã:
    - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_count}
    - –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Å–∞–π—Ç–æ–≤: {insights_count}
    - –í—ã—è–≤–ª–µ–Ω—ã –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    recommended_actions = [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
        "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤",
        "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º",
        "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"
    ]
    
    next_commands = [
        "—Å–ª–∫ –∞–Ω–∞–ª–∏–∑",
        "—Å–ª–∫ intelligence-stats", 
        "—Å–ª–∫ —Å—Ç–∞—Ç—É—Å",
        "—Å–ª–∫ –ø–æ–¥—É–º–∞–π [–ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π]"
    ]
    
    return manager.create_context_output(
        command_name="reflection",
        execution_result=reflection_results,
        context_files=context_files,
        context_summary=context_summary.strip(),
        recommended_actions=recommended_actions,
        next_commands=next_commands
    )


def create_intelligence_context(stats: Dict[str, Any], base_path: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã intelligence-stats"""
    manager = ContextOutputManager(base_path)
    
    context_files = [
        ".slc_usage_stats.json",
        "modules/ai_ml/machine_learning.json",
        "tools/template_intelligence/"
    ]
    
    context_summary = f"""
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Template Intelligence —Å–∏—Å—Ç–µ–º—ã:
    - –£—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {stats.get('successful_recommendations', 0)}
    - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('active_patterns', 0)}
    - –°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('average_success_rate', 0):.1f}%
    """
    
    return manager.create_context_output(
        command_name="intelligence-stats",
        execution_result=stats,
        context_files=context_files,
        context_summary=context_summary.strip(),
        recommended_actions=[
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö",
            "–û–±—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        ],
        next_commands=[
            "—Å–ª–∫ record-usage [—à–∞–±–ª–æ–Ω]",
            "—Å–ª–∫ generate-adaptive",
            "—Å–ª–∫ template-evolution [—à–∞–±–ª–æ–Ω]"
        ]
    )


def create_status_context(status_data: Dict[str, Any], base_path: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã status"""
    manager = ContextOutputManager(base_path)
    
    context_files = [
        "VERSION",
        "manifest.json",
        ".slc_usage_stats.json"
    ]
    
    system_health = status_data.get('health', 'unknown')
    templates_count = status_data.get('templates_count', 0)
    
    context_summary = f"""
    –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –°–õ–ö:
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {system_health}
    - –î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {templates_count}
    - –í–µ—Ä—Å–∏—è: {status_data.get('version', 'unknown')}
    """
    
    next_actions = []
    if system_health != 'HEALTHY':
        next_actions.extend([
            "—Å–ª–∫ –≤–∞–ª–∏–¥–∞—Ü–∏—è",
            "—Å–ª–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        ])
    else:
        next_actions.extend([
            "—Å–ª–∫ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è",
            "—Å–ª–∫ –∞–Ω–∞–ª–∏–∑"
        ])
    
    return manager.create_context_output(
        command_name="status",
        execution_result=status_data,
        context_files=context_files,
        context_summary=context_summary.strip(),
        next_commands=next_actions
    ) 