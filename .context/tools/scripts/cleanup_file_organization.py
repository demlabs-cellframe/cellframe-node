#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –°–õ–ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
"""

import os
import shutil
from pathlib import Path
import re
from typing import List, Dict
import json
from datetime import datetime

class FileOrganizer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, root_path: str = "."):
        self.root = Path(root_path).resolve()
        self.dry_run = False
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ
        self.allowed_in_root = {
            '.git', '.context', 'slc-agent', '.cursorrules', 
            'README.md', 'slc', '.cursor', '.pytest_cache', 
            '.benchmarks', '.slc', '.gitignore'
        }
        
        # –ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        self.move_rules = {
            'reports': {
                'patterns': [r'.*_REPORT\.md$', r'.*_ANALYSIS\.md$', r'.*_COMPLETION\.md$'],
                'destination': '.context/docs/reports/'
            },
            'plans': {
                'patterns': [r'.*_PLAN\.md$', r'.*_STRATEGY\.md$'],
                'destination': '.context/docs/plans/'
            },
            'archives': {
                'patterns': [r'.*\.slc-update$', r'backup_.*\.tar\.gz$'],
                'destination': '.context/archives/'
            },
            'temp': {
                'patterns': [r'test_.*\.py$', r'fix_.*\.py$', r'.*_temp\..*$', r'\..*_stats\.json$'],
                'destination': '.context/temp/'
            },
            'tasks': {
                'patterns': [r'–ó–ê–î–ê–ß–ê_.*\.md$', r'TASK_.*\.md$'],
                'destination': '.context/docs/reports/'
            }
        }
    
    def analyze_root_directory(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        analysis = {
            'total_items': 0,
            'allowed_items': [],
            'violations': [],
            'recommendations': []
        }
        
        for item in self.root.iterdir():
            analysis['total_items'] += 1
            
            if item.name in self.allowed_in_root:
                analysis['allowed_items'].append(item.name)
            else:
                analysis['violations'].append({
                    'name': item.name,
                    'type': 'directory' if item.is_dir() else 'file',
                    'size': item.stat().st_size if item.is_file() else None,
                    'recommended_action': self._get_recommended_action(item)
                })
        
        return analysis
    
    def _get_recommended_action(self, item: Path) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        for rule_name, rule in self.move_rules.items():
            for pattern in rule['patterns']:
                if re.match(pattern, item.name, re.IGNORECASE):
                    return {
                        'action': 'move',
                        'destination': rule['destination'],
                        'rule': rule_name
                    }
        
        if item.is_dir():
            return {
                'action': 'move',
                'destination': '.context/',
                'rule': 'project_directories'
            }
        else:
            return {
                'action': 'review',
                'destination': '.context/temp/',
                'rule': 'manual_review'
            }
    
    def create_required_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        required_dirs = [
            '.context/docs/reports',
            '.context/docs/plans', 
            '.context/archives',
            '.context/temp'
        ]
        
        for dir_path in required_dirs:
            full_path = self.root / dir_path
            if not full_path.exists():
                if not self.dry_run:
                    full_path.mkdir(parents=True, exist_ok=True)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                else:
                    print(f"üîç [DRY RUN] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: {dir_path}")
    
    def organize_files(self, auto_approve: bool = False) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        print("üóÇÔ∏è –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        
        analysis = self.analyze_root_directory()
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –î–ò–†–ï–ö–¢–û–†–ò–ò:")
        print(f"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {analysis['total_items']}")
        print(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö: {len(analysis['allowed_items'])}")
        print(f"–ù–∞—Ä—É—à–µ–Ω–∏–π: {len(analysis['violations'])}")
        
        if not analysis['violations']:
            print("‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º!")
            return analysis
        
        print(f"\nüö® –ù–ê–ô–î–ï–ù–´ –ù–ê–†–£–®–ï–ù–ò–Ø:")
        for violation in analysis['violations']:
            action = violation['recommended_action']
            print(f"  üìÅ {violation['name']} ‚Üí {action['destination']} ({action['rule']})")
        
        if not auto_approve and not self.dry_run:
            response = input(f"\n‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return analysis
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.create_required_directories()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        moved_count = 0
        for violation in analysis['violations']:
            item_path = self.root / violation['name']
            action = violation['recommended_action']
            dest_path = self.root / action['destination'] / violation['name']
            
            try:
                if not self.dry_run:
                    if dest_path.exists():
                        print(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dest_path}")
                        continue
                    
                    shutil.move(str(item_path), str(dest_path))
                    print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {violation['name']} ‚Üí {action['destination']}")
                else:
                    print(f"üîç [DRY RUN] {violation['name']} ‚Üí {action['destination']}")
                
                moved_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {violation['name']}: {e}")
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved_count}")
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        final_analysis = self.analyze_root_directory()
        print(f"üìä –ò–¢–û–ì: {final_analysis['total_items']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ")
        
        return final_analysis
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        analysis = self.analyze_root_directory()
        
        report = f"""
# üìä –û—Ç—á–µ—Ç –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
**–î–∞—Ç–∞**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ**: {analysis['total_items']}
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º**: {len(analysis['allowed_items'])}
- **–ù–∞—Ä—É—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤**: {len(analysis['violations'])}

## –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
{chr(10).join(f'- {item}' for item in analysis['allowed_items'])}

## –ù–∞—Ä—É—à–µ–Ω–∏—è
{chr(10).join(f'- **{v["name"]}** ‚Üí {v["recommended_action"]["destination"]}' for v in analysis['violations'])}

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
{'‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º!' if not analysis['violations'] else 'üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤: python .context/tools/scripts/cleanup_file_organization.py'}
"""
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--dry-run', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è')
    parser.add_argument('--auto', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    parser.add_argument('--report', action='store_true', help='–¢–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç')
    
    args = parser.parse_args()
    
    organizer = FileOrganizer()
    organizer.dry_run = args.dry_run
    
    if args.report:
        print(organizer.generate_report())
    else:
        organizer.organize_files(auto_approve=args.auto)

if __name__ == "__main__":
    main() 