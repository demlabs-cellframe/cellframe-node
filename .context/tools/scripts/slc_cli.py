#!/usr/bin/env python3
"""
SLC CLI - Smart Layered Context Command Line Interface

–ì–ª–∞–≤–Ω—ã–π CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –°–õ–ö.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 31 –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤.

–í–µ—Ä—Å–∏—è: 4.1.0
–°–æ–∑–¥–∞–Ω–æ: 2025-01-14
"""

import os
import sys
import argparse
import importlib
import time
from pathlib import Path
from typing import Dict, List, Type

# –î–æ–±–∞–≤–ª—è–µ–º .context –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
context_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(context_root))

try:
    from tools.cli_modules.base_command import BaseCommand, CommandRegistry
except ImportError as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –°–õ–ö")
    sys.exit(1)


class ModularCLI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å CLI —Å–∏—Å—Ç–µ–º—ã –°–õ–ö"""
    
    def __init__(self, base_path: str):
        self.base_path = Path(base_path)
        self.registry = CommandRegistry()
        self.version = "2.0.0"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ CLI –º–æ–¥—É–ª—è–º
        self.cli_modules_path = self.base_path / "tools" / "cli_modules"
        
        if not self.cli_modules_path.exists():
            print(f"‚ùå CLI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {self.cli_modules_path}")
            sys.exit(1)
    
    def discover_and_register_commands(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        commands_path = self.cli_modules_path / "commands"
        
        if not commands_path.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {commands_path}")
            return
        
        # –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        command_modules = [
            "template_intelligence_commands",
            "organization_commands", 
            "context_commands",
            "ai_commands",
            "template_commands",
            "task_commands",
            "management_commands",
            "evolution_commands",
            "help_commands",
            "reflection_commands",
            "self_development_commands",
            "deployment_commands"
        ]
        
        print("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...")
        registered_count = 0
        
        for module_name in command_modules:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module_path = f"tools.cli_modules.commands.{module_name}"
                module = importlib.import_module(module_path)
                
                # –ò—â–µ–º –∫–ª–∞—Å—Å—ã –∫–æ–º–∞–Ω–¥ –≤ –º–æ–¥—É–ª–µ
                command_classes = self._find_command_classes(module)
                
                for command_class in command_classes:
                    try:
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–∞–Ω–¥—ã
                        if command_class.__name__ == 'HelpCommand':
                            # –î–ª—è HelpCommand –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
                            command_instance = command_class(str(self.base_path), self.registry)
                        elif self._requires_base_path(command_class):
                            command_instance = command_class(str(self.base_path))
                        else:
                            command_instance = command_class()
                        
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
                        self.registry.register(command_instance)
                        registered_count += 1
                        
                        print(f"   ‚úÖ {command_instance.name}: {command_instance.description}")
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {command_class.__name__}: {e}")
                        
            except ImportError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {module_name}: {e}")
        
        print(f"üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {registered_count}")
        return registered_count > 0
    
    def _find_command_classes(self, module) -> List[Type[BaseCommand]]:
        """–ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ –∫–æ–º–∞–Ω–¥ –≤ –º–æ–¥—É–ª–µ"""
        command_classes = []
        
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã (–ø–æ –∏–º–µ–Ω–∏ –∏ –Ω–∞–ª–∏—á–∏—é –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)
            if (isinstance(attr, type) and 
                attr_name.endswith('Command') and
                not attr_name.startswith('Base') and
                attr_name != 'ContextAwareCommand' and
                hasattr(attr, 'name') and
                hasattr(attr, 'description') and
                hasattr(attr, 'execute')):
                
                command_classes.append(attr)
        
        return command_classes
    
    def _requires_base_path(self, command_class: Type[BaseCommand]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ base_path –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"""
        try:
            import inspect
            sig = inspect.signature(command_class.__init__)
            params = list(sig.parameters.keys())
            return 'base_path' in params
        except:
            return False
    
    def setup_argument_parser(self) -> argparse.ArgumentParser:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        parser = argparse.ArgumentParser(
            description="üß† Smart Layered Context - CLI v2.0\n"
                       "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s list                              # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
  %(prog)s intelligent-recommend "python"    # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  %(prog)s organize --dry-run               # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ (–∞–Ω–∞–ª–∏–∑)
  %(prog)s load-context "—Å–æ–∑–¥–∞—Ç—å API"       # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
  %(prog)s create template.json my-project  # –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ:
  %(prog)s –ö–û–ú–ê–ù–î–ê --help

üåê –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/your-repo/slc
        """
        )
        
        parser.add_argument(
            "--version", "-v",
            action="version",
            version=f"Smart Layered Context CLI {self.version}"
        )
        
        parser.add_argument(
            "--debug",
            action="store_true",
            help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥"
        )
        
        # –°–æ–∑–¥–∞–µ–º subparsers –¥–ª—è –∫–æ–º–∞–Ω–¥
        subparsers = parser.add_subparsers(
            dest="command",
            help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            metavar="–ö–û–ú–ê–ù–î–ê"
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ subparsers
        for command_name, command in self.registry.get_all_commands().items():
            cmd_parser = subparsers.add_parser(
                command_name,
                help=command.description,
                description=command.description,
                formatter_class=argparse.RawDescriptionHelpFormatter
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            try:
                command.add_arguments(cmd_parser)
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è {command_name}: {e}")
        
        return parser
    
    def execute_command(self, args: argparse.Namespace) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        if not args.command:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            return 1
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è "help command_name"
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –≤ sys.argv –µ—Å—Ç—å "help" –ø–µ—Ä–µ–¥ –Ω–µ–π
        command = self.registry.get_command(args.command)
        if not command and len(sys.argv) >= 3 and sys.argv[1] == 'help':
            # –≠—Ç–æ —Å–ª—É—á–∞–π "help command_name" - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É help
            help_command = self.registry.get_command('help')
            if help_command:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ args –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
                help_args = argparse.Namespace()
                help_args.command = args.command  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                help_args.interactive = False
                help_args.verbose = False
                return help_command.execute(help_args)
        
        if not command:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(self.registry.list_commands())}")
            return 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not command.validate_args(args):
            return 1
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        try:
            start_time = time.time()
            result = command.execute(args)
            execution_time = time.time() - start_time
            
            if args.debug:
                print(f"\nüêõ Debug: –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {execution_time:.3f}—Å")
            
            return result
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 130
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            if args.debug:
                import traceback
                traceback.print_exc()
            return 1
    
    def run(self, argv: List[str] = None) -> int:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ CLI"""
        try:
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            if not self.discover_and_register_commands():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
                return 1
            

            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
            if argv is None:
                argv = sys.argv[1:]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –∫–æ–º–∞–Ω–¥
            if argv and argv[0] in ['start', '—Å—Ç–∞—Ä—Ç']:
                # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ load-context "–±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ä—Ç"
                argv = ['load-context', '–±–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ä—Ç'] + argv[1:]
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç "help" –∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
            if len(argv) >= 2 and argv[0] == 'help':
                help_command = self.registry.get_command('help')
                if help_command:
                    # –°–æ–∑–¥–∞–µ–º args –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
                    help_args = argparse.Namespace()
                    help_args.command = argv[1]  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã
                    help_args.interactive = False
                    help_args.verbose = False
                    return help_command.execute(help_args)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
            parser = self.setup_argument_parser()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            args = parser.parse_args(argv)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if hasattr(args, 'debug') and args.debug:
                print(f"üêõ Debug: parsed command = '{args.command}'")
                print(f"üêõ Debug: args = {args}")
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É help
            if not args.command:
                # –°–æ–∑–¥–∞–µ–º args –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
                help_args = argparse.Namespace()
                help_args.command = None  # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è help
                help_args.interactive = False
                help_args.verbose = False
                
                help_command = self.registry.get_command('help')
                if help_command:
                    return help_command.execute(help_args)
                else:
                    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
                    parser.print_help()
                    print(f"\nüöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ: {sys.argv[0]} list")
                    print(f"üß† –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {sys.argv[0]} intelligent-recommend '–≤–∞—à –∑–∞–ø—Ä–æ—Å'")
                    return 0
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            return self.execute_command(args)
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return 1


def find_slc_root() -> Path:
    """–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –°–õ–ö"""
    current = Path.cwd()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (current / ".context" / "modules" / "core" / "manifest.json").exists():
        return current / ".context"
    elif (current / "modules" / "core" / "manifest.json").exists():
        return current
    
    # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    for parent in current.parents:
        if (parent / ".context" / "modules" / "core" / "manifest.json").exists():
            return parent / ".context"
        elif (parent / "modules" / "core" / "manifest.json").exists():
            return parent
    
    # Fallback –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    return current


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ CLI"""
    try:
        # –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –°–õ–ö
        slc_root = find_slc_root()
        
        if not slc_root.exists():
            print("‚ùå –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –°–õ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ–µ–∫—Ç–µ –°–õ–ö")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ CLI
        cli = ModularCLI(str(slc_root))
        exit_code = cli.run()
        
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 