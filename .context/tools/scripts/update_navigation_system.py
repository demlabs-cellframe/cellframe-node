#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ navigation_system –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –°–õ–ö
–ü—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ navigation_system_standard.json
"""

import os
import json
import argparse
from pathlib import Path
from typing import Dict, List, Any, Optional
import re

class NavigationSystemUpdater:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç navigation_system –≤–æ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–∞—Ö –°–õ–ö"""
    
    def __init__(self, root_path: str = ".context"):
        self.root = Path(root_path).resolve()
        self.dry_run = False
        self.updated_files = []
        self.errors = []
        
        # –ï–¥–∏–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç navigation_system
        self.standard_template = {
            "purpose": "",
            "recovery_path": ".context/manifest.json",
            "current_file": "",
            "file_role": "",
            "related_files": [],
            "quick_navigation": {
                "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                "üìã –ó–∞–¥–∞—á–∏": ".context/tasks/ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
                "üõ†Ô∏è CLI": ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
            },
            "usage_hint": "",
            "ai_context": ""
        }
        
        # –†–æ–ª–∏ —Ñ–∞–π–ª–æ–≤
        self.file_roles = {
            "manifest.json": "MASTER_MANIFEST",
            "core/manifest.json": "CORE_MANIFEST", 
            "core/standards.json": "CORE_STANDARDS",
            "core/project.json": "CORE_PROJECT",
            "ai_ml/": "AI_ML_TEMPLATE",
            "languages/": "LANGUAGE_TEMPLATE",
            "methodologies/": "METHODOLOGY_TEMPLATE",
            "tools/": "TOOLS_TEMPLATE",
            "projects/": "PROJECT_TEMPLATE",
            "tasks/": "TASK_DEFINITION"
        }
    
    def determine_file_role(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª—å —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏"""
        relative_path = file_path.relative_to(self.root)
        path_str = str(relative_path)
        
        # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for pattern, role in self.file_roles.items():
            if pattern in path_str:
                return role
                
        return "UNKNOWN"
    
    def generate_purpose(self, file_path: Path) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        relative_path = file_path.relative_to(self.root)
        path_str = str(relative_path)
        
        if "manifest.json" in path_str and "core" not in path_str:
            return "–ì–ª–∞–≤–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç Smart Layered Context —Å–∏—Å—Ç–µ–º—ã"
        elif "core/manifest.json" in path_str:
            return "–ú–∞–Ω–∏—Ñ–µ—Å—Ç core –º–æ–¥—É–ª–µ–π –°–õ–ö —Å–∏—Å—Ç–µ–º—ã"
        elif "core/standards.json" in path_str:
            return "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ coding guidelines"
        elif "core/project.json" in path_str:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –°–õ–ö"
        elif "ai_ml/" in path_str:
            return "–®–∞–±–ª–æ–Ω –¥–ª—è AI/ML —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        elif "languages/" in path_str:
            return "–®–∞–±–ª–æ–Ω —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        elif "methodologies/" in path_str:
            return "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        elif "tools/" in path_str:
            return "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        elif "projects/" in path_str:
            return "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
        elif "tasks/" in path_str:
            if "completed/" in path_str:
                return "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞"
            else:
                return "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        else:
            return f"–§–∞–π–ª –°–õ–ö: {relative_path.name}"
    
    def generate_related_files(self, file_path: Path) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        relative_path = file_path.relative_to(self.root)
        related = []
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–Ω —Å–∞–º
        if str(relative_path) != "manifest.json":
            related.append(".context/manifest.json")
            
        # Core —Ñ–∞–π–ª—ã —Å–≤—è–∑–∞–Ω—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
        if "core/" in str(relative_path):
            core_files = [
                ".context/modules/core/manifest.json",
                ".context/modules/core/standards.json", 
                ".context/modules/core/project.json"
            ]
            for cf in core_files:
                if cf not in str(file_path):
                    related.append(cf)
        
        return related
    
    def generate_quick_navigation(self, file_path: Path) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é"""
        navigation = {
            "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
        }
        
        relative_path = file_path.relative_to(self.root)
        
        # –î–ª—è core —Ñ–∞–π–ª–æ–≤
        if "core/" in str(relative_path):
            navigation.update({
                "üìã Core": ".context/modules/core/manifest.json - –º–∞–Ω–∏—Ñ–µ—Å—Ç core –º–æ–¥—É–ª–µ–π",
                "üìê –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã": ".context/modules/core/standards.json - —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç": ".context/modules/core/project.json - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
            })
        
        # –î–ª—è –∑–∞–¥–∞—á
        if "tasks/" in str(relative_path):
            navigation["üìã –ó–∞–¥–∞—á–∏"] = ".context/tasks/ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"
            
        # CLI –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        navigation["üõ†Ô∏è CLI"] = ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
        
        return navigation
    
    def generate_usage_hint(self, file_path: Path) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        relative_path = file_path.relative_to(self.root)
        path_str = str(relative_path)
        
        if "manifest.json" in path_str and "core" not in path_str:
            return "./slc load-context '–≤–∞—à –∑–∞–ø—Ä–æ—Å' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        elif "core/manifest.json" in path_str:
            return "./slc templates –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"
        elif "core/standards.json" in path_str:
            return "–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ best practices"
        elif "ai_ml/" in path_str:
            return "./slc create ai_ml/[—à–∞–±–ª–æ–Ω].json [–ø—Ä–æ–µ–∫—Ç] –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI/ML –ø—Ä–æ–µ–∫—Ç–∞"
        elif "tasks/" in path_str:
            return "./slc list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞"
        else:
            return f"./slc info {relative_path} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    def create_standard_navigation_system(self, file_path: Path) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é navigation_system —Å–µ–∫—Ü–∏—é"""
        relative_path = file_path.relative_to(self.root)
        
        navigation_system = {
            "purpose": self.generate_purpose(file_path),
            "recovery_path": ".context/manifest.json",
            "current_file": f".context/{relative_path}",
            "file_role": self.determine_file_role(file_path),
            "related_files": self.generate_related_files(file_path),
            "quick_navigation": self.generate_quick_navigation(file_path),
            "usage_hint": self.generate_usage_hint(file_path),
            "ai_context": f"–§–∞–π–ª –°–õ–ö —Å–∏—Å—Ç–µ–º—ã: {relative_path.name}"
        }
        
        return navigation_system
    
    def find_json_files(self) -> List[Path]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ –°–õ–ö"""
        json_files = []
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        exclude_dirs = {'.git', '__pycache__', 'node_modules', '.pytest_cache'}
        
        for file_path in self.root.rglob("*.json"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            if not any(excluded in file_path.parts for excluded in exclude_dirs):
                json_files.append(file_path)
        
        return sorted(json_files)
    
    def update_file(self, file_path: Path) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å navigation_system –≤ —Ñ–∞–π–ª–µ"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é navigation_system
            new_navigation = self.create_standard_navigation_system(file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if "navigation_system" in data:
                old_nav = data["navigation_system"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º custom purpose –µ—Å–ª–∏ –æ–Ω –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω
                if "purpose" in old_nav and len(old_nav["purpose"]) > len(new_navigation["purpose"]):
                    new_navigation["purpose"] = old_nav["purpose"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ related_files
                if "related_files" in old_nav:
                    existing_related = set(new_navigation["related_files"])
                    for rf in old_nav["related_files"]:
                        if rf not in existing_related:
                            new_navigation["related_files"].append(rf)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º navigation_system
            data["navigation_system"] = new_navigation
            
            if not self.dry_run:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            
            self.updated_files.append(str(file_path))
            return True
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}"
            self.errors.append(error_msg)
            return False
    
    def run(self, dry_run: bool = False) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        self.dry_run = dry_run
        self.updated_files = []
        self.errors = []
        
        json_files = self.find_json_files()
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
        if dry_run:
            print("üß™ –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        success_count = 0
        for file_path in json_files:
            if self.update_file(file_path):
                success_count += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path.relative_to(self.root)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {file_path.relative_to(self.root)}")
        
        result = {
            "total_files": len(json_files),
            "updated_files": success_count,
            "errors": len(self.errors),
            "updated_list": self.updated_files,
            "error_list": self.errors,
            "dry_run": dry_run
        }
        
        return result

def main():
    parser = argparse.ArgumentParser(description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ navigation_system –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö –°–õ–ö")
    parser.add_argument("--dry-run", action="store_true", help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--root", default=".context", help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –°–õ–ö")
    
    args = parser.parse_args()
    
    updater = NavigationSystemUpdater(args.root)
    result = updater.run(dry_run=args.dry_run)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {result['total_files']}")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result['updated_files']}")
    print(f"   –û—à–∏–±–æ–∫: {result['errors']}")
    
    if result['errors'] > 0:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for error in result['error_list']:
            print(f"   {error}")
    
    if not args.dry_run and result['updated_files'] > 0:
        print(f"\n‚úÖ Navigation system —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    elif args.dry_run:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

if __name__ == "__main__":
    main() 