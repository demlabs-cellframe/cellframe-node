{
  "task_id": "stage_env_snapshot_system_20251024",
  "type": "infrastructure",
  "domain": "testing_infrastructure",
  "priority": "critical",
  "status": "active",
  "created": "2025-10-24T16:40:00Z",
  "updated": "2025-10-26T01:40:00Z",
  
  "auto_load": [
    ".context/modules/testing/stage_env_system.json",
    ".context/modules/testing/stage_env_scenario_language.json",
    ".context/modules/projects/cellframe_sdk.json",
    ".context/modules/languages/python/python_development.json",
    ".context/modules/core/development_standards.json",
    ".context/modules/core/standards.json"
  ],
  
  "title": "Stage-Env Snapshot System - Ускорение тестов через снапшоты состояния",
  "description": "Реализация системы снапшотов для быстрого восстановления чистого состояния stagenet между сьютами вместо медленной пересборки",
  
  "workflow_rules": {
    "git_commits": "НЕ КОММИТИТЬ БЕЗ ЯВНОГО РАСПОРЯЖЕНИЯ ПОЛЬЗОВАТЕЛЯ",
    "reasoning": "Пользователь хочет контролировать каждый коммит самостоятельно",
    "enforcement": "mandatory"
  },
  
  "context": {
    "current_problem": "Очистка данных между сьютами через docker exec работает, но медленная и ненадёжная (сертификаты, конфликты файлов)",
    "goal": "Мгновенное восстановление чистого состояния сети для каждого сьюта",
    "constraints": [
      "Система должна быть отключаемой через конфиг",
      "Три режима работы на выбор",
      "Обратная совместимость с текущими тестами"
    ]
  },
  
  "objectives": [
    "Реализовать 3 режима изоляции сьютов",
    "Система снапшотов через SquashFS (опционально без сжатия)",
    "Система снапшотов через копирование файлов",
    "Режим пересоздания топологии для каждого сьюта",
    "Конфигурация режимов через stage-env.cfg",
    "Оптимизация скорости восстановления"
  ],
  
  "phases": [
    {
      "id": "phase_1_analysis",
      "name": "Анализ и проектирование",
      "status": "completed",
      "completed_at": "2025-10-25T11:00:00Z",
      "tasks": [
        {
          "id": "1.1",
          "description": "Анализ текущей системы очистки данных",
          "status": "completed",
          "findings": [
            "clean_test_data() через docker exec работает",
            "Медленно (~40s) и не гарантирует полную изоляцию",
            "Проблемы с сертификатами (lib/ca/)",
            "Проблемы с временными файлами",
            "Bind-mounted volumes требуют docker exec для очистки"
          ]
        },
        {
          "id": "1.2",
          "description": "Определить требования к системе",
          "status": "completed",
          "requirements": {
            "speed": "Восстановление < 3 секунд",
            "isolation": "100% изоляция между сьютами",
            "flexibility": "3 режима работы + disabled",
            "config": "Управление через stage-env.cfg",
            "fallback": "Graceful degradation при ошибках"
          }
        }
      ]
    },
    {
      "id": "phase_2_snapshot_modes",
      "name": "Реализация трёх режимов снапшотов",
      "status": "completed",
      "completed_at": "2025-10-25T11:30:00Z",
      "description": "Три взаимозаменяемых режима изоляции сьютов",
      
      "subphases": [
        {
          "id": "2.1_mode_recreate",
          "name": "Режим 1: Полное пересоздание (recreate)",
          "status": "completed",
          "file": "src/snapshots/recreate.py",
          "implementation": "Создаёт marker файл, при restore вызывает clean_test_data()",
          "performance": "~40s восстановление (baseline)"
        },
        {
          "id": "2.2_mode_filesystem",
          "name": "Режим 2: Снапшот через копирование файлов (filesystem)",
          "status": "completed",
          "file": "src/snapshots/filesystem.py",
          "implementation": "rsync или shutil.copytree для copy/restore",
          "performance": "~3s создание, ~3s восстановление"
        },
        {
          "id": "2.3_mode_squashfs",
          "name": "Режим 3: SquashFS read-only снапшоты (squashfs)",
          "status": "completed",
          "file": "src/snapshots/squashfs.py",
          "implementation": "mksquashfs/unsquashfs с опциональным сжатием",
          "performance": "~5s создание, ~2s восстановление"
        }
      ]
    },
    {
      "id": "phase_3_configuration",
      "name": "Конфигурация системы",
      "status": "completed",
      "completed_at": "2025-10-25T11:15:00Z",
      "description": "stage-env.cfg секция для управления снапшотами",
      
      "implementation": {
        "file": "config/stage-env.cfg",
        "section": "[suite_isolation]",
        "options_implemented": [
          "mode = filesystem|squashfs|recreate|disabled",
          "squashfs_compression = none|gzip|lzo|xz",
          "auto_create_on_startup = true",
          "snapshot_name = clean_state",
          "auto_cleanup = true",
          "keep_snapshot_count = 5",
          "snapshots_dir = ../testing/snapshots"
        ]
      }
    },
    {
      "id": "phase_4_implementation",
      "name": "Реализация snapshot manager",
      "status": "completed",
      "completed_at": "2025-10-25T11:25:00Z",
      "description": "Модуль для управления снапшотами",
      
      "components_created": [
        {
          "file": "src/snapshots/__init__.py",
          "exports": "SnapshotManager, SnapshotMode, all implementations"
        },
        {
          "file": "src/snapshots/manager.py",
          "class": "SnapshotManager",
          "methods": [
            "create_snapshot(name)",
            "restore_snapshot(name)",
            "delete_snapshot(name)",
            "list_snapshots()",
            "cleanup_old_snapshots(keep_count)",
            "get_snapshot_info(name)"
          ]
        },
        {
          "file": "src/snapshots/base.py",
          "class": "BaseSnapshot (ABC)",
          "purpose": "Abstract interface for all snapshot implementations"
        }
      ]
    },
    {
      "id": "phase_5_integration",
      "name": "Интеграция с NetworkManager и test runner",
      "status": "completed",
      "completed_at": "2025-10-25T11:35:00Z",
      "description": "Интеграция snapshot system во все компоненты",
      
      "integration_points": [
        {
          "file": "src/config/loader.py",
          "method": "get_suite_isolation_config()",
          "purpose": "Загрузка конфигурации снапшотов"
        },
        {
          "file": "src/network/manager.py",
          "changes": [
            "Добавлен SnapshotManager в __init__",
            "create_clean_snapshot() - создание после genesis init",
            "restore_clean_state() - восстановление снапшота",
            "clean_test_data() - fallback метод",
            "auto_create_on_startup integration"
          ]
        },
        {
          "file": "src/cli/test_commands.py",
          "changes": [
            "Заменён clean_test_data() на restore_clean_state()",
            "Вызов перед каждым test suite"
          ]
        }
      ]
    },
    {
      "id": "phase_6_testing",
      "name": "Тестирование и оптимизация",
      "status": "completed",
      "completed_at": "2025-10-26T02:00:00Z",
      "description": "Проверка всех режимов и оптимизация",
      
      "test_scenarios": [
        "Режим recreate: полная изоляция",
        "Режим filesystem: скорость восстановления",
        "Режим squashfs: разные уровни сжатия",
        "Переключение между режимами",
        "Совместимость с существующими тестами",
        "Fallback при ошибках",
        "Auto cleanup работает корректно"
      ],
      
      "benchmarks_completed": [
        "Filesystem snapshot: ~3s создание, ~3s восстановление",
        "Squashfs snapshot: ~5s создание, ~2s восстановление",
        "Baseline (recreate): ~40s",
        "Оптимизация: first suite reuses pristine network (no restore)"
      ]
    },
    {
      "id": "phase_7_native_token_genesis",
      "name": "Генерация нативного токена TCELL и динамический genesis",
      "status": "in_progress",
      "description": "Автоматическая генерация TCELL токена и статических genesis блоков для zerochain и main",
      
      "context": {
        "problem": "static_genesis_block и fee_addr захардкожены в конфигах",
        "goal": "Динамическая генерация genesis состояния с правильным разделением chain типов",
        "chain_separation": {
          "zerochain": {
            "datum_types": ["token", "emission", "ca", "decree"],
            "default_types": ["token", "emission", "ca", "decree"],
            "load_priority": 0,
            "consensus": "dag_poa",
            "purpose": "Декларация токенов, эмиссия, сертификаты, декреты"
          },
          "main": {
            "datum_types": ["transaction", "anchor"],
            "default_types": ["transaction", "anchor"],
            "load_priority": -1,
            "consensus": "esbocs",
            "purpose": "Транзакции токенов и анкоры"
          }
        }
      },
      
      "subphases": [
        {
          "id": "7.1_fee_wallet_generation",
          "name": "Генерация кошелька для сбора комиссий",
          "status": "pending",
          "description": "Создание fee wallet на node1 перед поднятием сети",
          
          "tasks": [
            {
              "id": "7.1.1",
              "description": "Создать метод GenesisInitializer.generate_fee_wallet()",
              "details": [
                "Выполнить: cellframe-node-cli wallet new -w fee_collector -net stagenet",
                "Выполнить на node1 (первая нода)",
                "Извлечь адрес кошелька",
                "Сохранить адрес для использования в конфиге"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.1.2",
              "description": "Обновить ConfigGenerator для использования динамического fee_addr",
              "details": [
                "Добавить FEE_ADDR_PLACEHOLDER в main.cfg template",
                "Заменить хардкодный fee_addr на placeholder",
                "В generate_network_configs заменить placeholder на реальный адрес"
              ],
              "file": "tests/stage-env/config/templates/chains/main.cfg",
              "related_file": "tests/stage-env/src/config/generator.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.2_tcell_token_generation",
          "name": "Генерация нативного токена TCELL",
          "status": "pending",
          "description": "Создание TCELL токена на zerochain после поднятия сети",
          
          "tasks": [
            {
              "id": "7.2.1",
              "description": "Создать метод GenesisInitializer.create_native_token()",
              "details": [
                "Выполнить: token_decl -token TCELL -total_supply 1000000000 -decimals 18 -signs_total 1 -signs_emission 1 -certs <root_cert> -net stagenet -chain zerochain",
                "Выполнить на root node (node1, node2, node3)",
                "Дождаться финализации в zerochain через новый хелпер",
                "Вернуть hash объявления токена"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.2.2",
              "description": "Создать метод GenesisInitializer.emit_native_token()",
              "details": [
                "Выполнить: token_emit -token TCELL -value 1000000000 -addr <fee_wallet_addr> -certs <root_cert> -net stagenet -chain zerochain",
                "Выполнить на root node",
                "Дождаться финализации эмиссии через хелпер",
                "Вернуть hash эмиссии"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.2.3",
              "description": "Создать первую транзакцию TCELL на main chain",
              "details": [
                "Выполнить: tx_create -token TCELL -from_emission <emission_hash> -value 100000000 -fee 0.1 -chain main",
                "Это первая транзакция на main chain",
                "Дождаться финализации через хелпер",
                "Вернуть hash транзакции"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.3_zerochain_datum_helper",
          "name": "Хелпер проведения датумов через zerochain",
          "status": "pending",
          "description": "Специальный хелпер для финализации датумов на zerochain через root ноды",
          
          "tasks": [
            {
              "id": "7.3.1",
              "description": "Создать метод GenesisInitializer.process_zerochain_datum()",
              "details": [
                "Параметры: datum_hash, root_nodes[]",
                "1. Дождаться появления датума на первой root node (node1)",
                "2. Последовательно вызвать mempool_proc на остальных root nodes (node2, node3)",
                "3. Дождаться финализации датума в zerochain",
                "4. Проверить что датум попал в блок",
                "Использует DAG-PoA консенсус"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.3.2",
              "description": "Добавить логирование процесса обработки датума",
              "details": [
                "Логировать: ожидание на node1",
                "Логировать: mempool_proc на каждой root node",
                "Логировать: финализацию в блоке",
                "Логировать таймауты и ошибки"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.4_sync_helper",
          "name": "Хелпер синхронизации сети",
          "status": "pending",
          "description": "Хелпер для синхронизации всех нод и ожидания окончания",
          
          "tasks": [
            {
              "id": "7.4.1",
              "description": "Создать метод GenesisInitializer.sync_network()",
              "details": [
                "Вызвать sync команду на всех нодах в сети",
                "Дождаться окончания синхронизации (проверка статуса)",
                "Проверить что все ноды синхронизированы",
                "Вернуть статус синхронизации"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.4.2",
              "description": "Добавить мониторинг прогресса синхронизации",
              "details": [
                "Проверять: net status на каждой ноде",
                "Отслеживать: количество синхронизированных блоков",
                "Логировать прогресс каждые N секунд",
                "Таймаут синхронизации: 120 секунд"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.5_wait_datum_with_sync",
          "name": "Улучшенный хелпер ожидания датума с синхронизацией",
          "status": "pending",
          "description": "Наследовать WaitForDatumStep от sync helper для полной финализации",
          
          "tasks": [
            {
              "id": "7.5.1",
              "description": "Рефакторить WaitForDatumStep для использования sync_network()",
              "details": [
                "После обнаружения датума в блоке вызвать sync_network()",
                "Дождаться полной синхронизации всех нод",
                "Проверить что датум присутствует на всех нодах",
                "Только после этого считать датум финализированным"
              ],
              "file": "tests/stage-env/src/scenarios/executor.py",
              "status": "pending"
            },
            {
              "id": "7.5.2",
              "description": "Обновить DatumMonitor для проверки синхронизации",
              "details": [
                "После stage \"in_block\" добавить stage \"synchronized\"",
                "Проверять наличие датума на N нодах",
                "Таймаут синхронизации: 60 секунд",
                "Логировать процесс распространения"
              ],
              "file": "tests/stage-env/src/monitoring/datum.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.6_genesis_block_capture",
          "name": "Захват и сохранение genesis блоков",
          "status": "pending",
          "description": "После генерации TCELL токена получить genesis блоки обоих chains",
          
          "tasks": [
            {
              "id": "7.6.1",
              "description": "Создать метод GenesisInitializer.get_genesis_block_hash()",
              "details": [
                "Выполнить: block list -net stagenet -chain <chain_name> -first 1",
                "Извлечь hash первого блока",
                "Вызвать для zerochain и main",
                "Вернуть словарь {chain_name: genesis_hash}"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            },
            {
              "id": "7.6.2",
              "description": "Обновить chain конфиги с genesis блоками",
              "details": [
                "Прочитать main.cfg и zerochain.cfg",
                "Заменить static_genesis_block на реальный hash",
                "Если static_genesis_block отсутствует - добавить",
                "Сохранить обновлённые конфиги"
              ],
              "file": "tests/stage-env/src/config/generator.py",
              "status": "pending"
            },
            {
              "id": "7.6.3",
              "description": "Логировать genesis блоки для отладки",
              "details": [
                "Вывести в лог: zerochain genesis hash",
                "Вывести в лог: main genesis hash",
                "Вывести в лог: fee_addr",
                "Сохранить в artifacts для анализа"
              ],
              "file": "tests/stage-env/src/network/genesis.py",
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.7_chain_types_separation",
          "name": "Разделение типов датумов между chains",
          "status": "pending",
          "description": "Обновить конфиги chains для правильного разделения типов",
          
          "tasks": [
            {
              "id": "7.7.1",
              "description": "Обновить zerochain.cfg template",
              "details": [
                "datum_types=[token, emission, ca, decree]",
                "default_datum_types=[token, emission, ca, decree]",
                "load_priority=0 (загружается вторым)",
                "Убрать типы которые теперь в main"
              ],
              "file": "tests/stage-env/config/templates/chains/zerochain.cfg",
              "status": "pending"
            },
            {
              "id": "7.7.2",
              "description": "Обновить main.cfg template",
              "details": [
                "datum_types=[transaction, anchor, sign, custom]",
                "default_datum_types=[transaction, anchor]",
                "load_priority=-1 (загружается первым для transaction)",
                "Убрать token, emission, decree - они в zerochain"
              ],
              "file": "tests/stage-env/config/templates/chains/main.cfg",
              "status": "pending"
            },
            {
              "id": "7.7.3",
              "description": "Убрать explicit -chain из тестов где возможно",
              "details": [
                "token_decl, token_emit, decree - автоматически zerochain",
                "tx_create, tx_transfer - автоматически main",
                "Оставить -chain только где нужна явная перегрузка",
                "Обновить документацию по умолчаниям"
              ],
              "files": [
                "tests/e2e/**/*.yml",
                "tests/functional/**/*.yml",
                "tests/stage-env/docs/en/scenarios/Glossary.md",
                "tests/stage-env/docs/ru/scenarios/Glossary.md"
              ],
              "status": "pending"
            }
          ]
        },
        {
          "id": "7.8_integration_flow",
          "name": "Интеграция genesis flow в NetworkManager",
          "status": "pending",
          "description": "Обновить NetworkManager.start() для новой последовательности",
          
          "tasks": [
            {
              "id": "7.8.1",
              "description": "Обновить NetworkManager.start() порядок операций",
              "details": [
                "1. down() - остановить старую сеть",
                "2. _clean_node_data() - очистить данные",
                "3. config_generator.generate_all() БЕЗ static_genesis_block и fee_addr",
                "4. up() - поднять сеть",
                "5. _wait_for_network_ready() - дождаться готовности",
                "6. genesis.generate_fee_wallet() - создать fee wallet",
                "7. Обновить main.cfg с fee_addr",
                "8. Перезапустить main chain конфиг (reload)",
                "9. genesis.create_native_token() - создать TCELL",
                "10. genesis.emit_native_token() - эмиссия на fee wallet",
                "11. genesis.create_first_transaction() - первая tx на main",
                "12. genesis.get_genesis_block_hash() - получить genesis",
                "13. Обновить chain конфиги с genesis блоками",
                "14. genesis.register_node_aliases() - алиасы нод",
                "15. genesis.register_all_nodes_via_cli() - CLI регистрация",
                "16. NetworkConsensusMonitor.wait_for_network_ready() - консенсус",
                "17. pause() - заморозить контейнеры",
                "18. create_clean_snapshot() - снапшот",
                "19. unpause() - разморозить"
              ],
              "file": "tests/stage-env/src/network/manager.py",
              "status": "pending"
            },
            {
              "id": "7.8.2",
              "description": "Добавить error handling для genesis операций",
              "details": [
                "Try-catch для каждого genesis шага",
                "Логировать ошибки с контекстом",
                "Останавливать сеть при критических ошибках",
                "Откат к чистому состоянию при фейле"
              ],
              "file": "tests/stage-env/src/network/manager.py",
              "status": "pending"
            }
          ]
        }
      ],
      
      "validation_criteria": [
        "Fee wallet создаётся и адрес сохраняется в main.cfg",
        "TCELL токен декларируется на zerochain",
        "TCELL эмиссия проходит на zerochain",
        "Первая транзакция TCELL создаётся на main chain",
        "Genesis блоки обоих chains сохраняются в конфиги",
        "Разделение типов датумов работает корректно",
        "Snapshot содержит корректное genesis состояние",
        "Тесты работают без explicit -chain где применимо"
      ]
    }
  ],
  
  "progress_log": [
    {
      "timestamp": "2025-10-25T10:56:00Z",
      "phase": "phase_1_analysis",
      "status": "completed",
      "summary": "Анализ завершён, определены требования"
    },
    {
      "timestamp": "2025-10-25T11:30:00Z",
      "phase": "phase_2_snapshot_modes",
      "status": "completed",
      "summary": "Реализованы все 3 режима снапшотов",
      "files_created": [
        "src/snapshots/__init__.py",
        "src/snapshots/manager.py",
        "src/snapshots/base.py",
        "src/snapshots/recreate.py",
        "src/snapshots/filesystem.py",
        "src/snapshots/squashfs.py"
      ]
    },
    {
      "timestamp": "2025-10-25T11:35:00Z",
      "phase": "phase_3_configuration",
      "status": "completed",
      "summary": "Добавлена секция [suite_isolation] в stage-env.cfg"
    },
    {
      "timestamp": "2025-10-25T11:40:00Z",
      "phase": "phase_4_implementation",
      "status": "completed",
      "summary": "SnapshotManager полностью реализован"
    },
    {
      "timestamp": "2025-10-25T11:45:00Z",
      "phase": "phase_5_integration",
      "status": "completed",
      "summary": "Интеграция в NetworkManager и test_commands.py завершена",
      "files_modified": [
        "src/config/loader.py - get_suite_isolation_config()",
        "src/network/manager.py - snapshot integration",
        "src/cli/test_commands.py - restore_clean_state()"
      ]
    },
    {
      "timestamp": "2025-10-25T11:50:00Z",
      "phase": "documentation",
      "status": "completed",
      "summary": "Создана документация snapshot_system.md",
      "files_created": [
        "docs/snapshot_system.md"
      ]
    },
    {
      "timestamp": "2025-10-25T11:55:00Z",
      "phase": "fail_fast_validation",
      "status": "completed",
      "summary": "Реализована fail-fast валидация зависимостей для squashfs и filesystem режимов",
      "changes": [
        "squashfs.py: Улучшена проверка _check_tool() - парсинг stdout+stderr вместо returncode",
        "squashfs.py: Добавлен RuntimeError при отсутствии mksquashfs/unsquashfs",
        "filesystem.py: Добавлен RuntimeError при отсутствии rsync",
        "filesystem.py: Удалён fallback на shutil.copytree - rsync обязателен",
        "docs/snapshot_system.md: Обновлена документация с требованиями зависимостей"
      ],
      "reasoning": "SOLID принципы: fail-fast вместо silent fallback, явное требование зависимостей",
      "behavior": "При отсутствии инструментов - немедленная ошибка с инструкцией по установке"
    },
    {
      "timestamp": "2025-10-25T12:00:00Z",
      "phase": "bug_fixes",
      "status": "completed",
      "summary": "Исправлены критические проблемы с правами доступа и детекцией OverlayFS",
      "changes": [
        "loader.py: Удалена auto-creation конфига stage-env.cfg в config/",
        "squashfs.py: Улучшена детекция overlayfs - multi-method с fallback (proc/filesystems, modprobe, lsmod)",
        "squashfs.py: Добавлен sudo для unsquashfs restore и chown для исправления прав",
        "squashfs.py: Warning → debug для overwriting_existing",
        "filesystem.py: Warning → debug для overwriting_existing",
        "manager.py: Проверка is_running() перед fallback cleanup",
        "004_token_transfer.yml: Исправлен loop синтаксис (заменён на явные шаги)"
      ],
      "issues_fixed": [
        "Operation not permitted при unsquashfs restore",
        "overlayfs_available=False несмотря на поддержку ядра",
        "Дублирование конфига в stage-env/config/",
        "Ложные warning при пересоздании снапшотов",
        "Fallback cleanup на незапущенных контейнерах",
        "Валидация YAML с неправильным loop синтаксисом"
      ]
    },
    {
      "timestamp": "2025-10-26T01:40:00Z",
      "phase": "bug_fixes",
      "status": "completed",
      "summary": "Рефакторинг парсеров: введена иерархия наследования для устранения дублирования кода",
      "changes": [
        "parser.py: Создан базовый класс BaseScenarioParser с общей логикой",
        "parser.py: ScenarioParser наследует от BaseScenarioParser",
        "parser.py: Добавлен SuiteSetupParser для обработки suite includes",
        "test_commands.py: Использует SuiteSetupParser вместо временных файлов",
        "parser.py: Удалено ~200 строк дублированного кода"
      ],
      "problem_solved": {
        "description": "Suite includes не обрабатывались из-за проблем с путями временных файлов",
        "root_cause": "Временный файл создавался в suite_dir (artifacts), парсер искал в suite_path (tests/e2e/utxo_blocking)",
        "original_error": "'tmp9kmtetps.yml' is not in the subpath of '/mnt/work/work/cellframe-node/tests/e2e/utxo_blocking'"
      },
      "architecture": {
        "base_class": "BaseScenarioParser - общая логика YAML загрузки и обработки includes",
        "scenario_parser": "ScenarioParser - парсинг тестовых сценариев (TestScenario)",
        "suite_parser": "SuiteSetupParser - парсинг suite setup с includes (SuiteSetupScenario)",
        "shared_methods": [
          "_load_yaml_file(path) - кэшированная загрузка YAML",
          "_process_includes(data, base_dir) - обработка includes с мульти-path поиском",
          "_deep_merge(base, override) - глубокое слияние словарей",
          "_resolve_path(path) - резолвинг относительных/абсолютных путей"
        ]
      },
      "benefits": [
        "Устранено дублирование кода (~200 строк)",
        "Правильный path resolution для includes",
        "Нет временных файлов (проще, быстрее)",
        "Единый источник истины для парсинга",
        "Расширяемость (легко добавить новые парсеры)"
      ],
      "testing_status": "Готово к тестированию - suite includes должны теперь корректно обрабатываться"
    },
    {
      "timestamp": "2025-10-26T06:25:00Z",
      "phase": "native_token_genesis_debugging",
      "status": "in_progress",
      "summary": "Глубокий анализ проблем с genesis: seed_mode и DAG-PoA event creation",
      "discovered_issues": {
        "issue_1_wrong_dag_command": {
          "symptom": "event list command error: can't recognize command=event;list",
          "root_cause": "Использовалась команда 'event list' вместо 'dag event list'",
          "fix": "Исправлено на: dag event list -net stagenet -chain zerochain -from events -limit 20",
          "code_ref": "genesis.py:996",
          "status": "fixed"
        },
        "issue_2_no_events_created": {
          "symptom": "total events: 0 - НИ ОДНОГО event не создаётся в DAG",
          "root_cause": "DAG-PoA требует seed_mode=true для создания ПЕРВОГО event (genesis event)",
          "sdk_code_reference": "dap_chain_cs_dag_poa.c:773: else if ( s_seed_mode || (a_hashes && a_hashes_count) )",
          "explanation": "Первый event НЕ имеет parent hashes → нужен seed_mode чтобы обойти эту проверку",
          "discovery_evidence": {
            "log_line": "dag_finalization_progress: total events: 0 (каждые 10 секунд в течение 120s)",
            "mempool_status": "Datum в mempool присутствует",
            "mempool_proc_status": "mempool_proc вызывается на node2 и node3",
            "event_creation_status": "Events НЕ создаются"
          },
          "fix_approach": "Включить seed_mode=true на ROOT нодах ПЕРЕД созданием TCELL, выключить ПОСЛЕ финализации",
          "status": "implementing"
        },
        "issue_3_certificate_distribution": {
          "symptom": "Приватные сертификаты копировались в /share/ca (НЕПРАВИЛЬНО!)",
          "root_cause": "Код копировал pvt.stagenet.master.N.dcert в shared directory",
          "security_issue": "Приватные ключи НЕ должны быть доступны всем нодам!",
          "fix": "Изменено на копирование ТОЛЬКО публичных сертификатов (stagenet.master.N) в /share/ca",
          "code_ref": "config/generator.py:575-593",
          "status": "fixed"
        },
        "issue_4_seed_mode_restart_required": {
          "symptom": "sed -i изменяет конфиг, но нода не перечитывает его",
          "root_cause": "Cellframe Node загружает seed_mode ОДИН РАЗ при старте (dap_chain_block_init)",
          "fix": "Добавлен 'sv restart cellframe-node' после изменения seed_mode",
          "code_ref": "genesis.py:1148-1153, 1188-1195",
          "wait_time": "5 секунд после restart для стабилизации",
          "status": "fixed"
        }
      },
      "new_genesis_flow": {
        "description": "Обновлённая последовательность с seed_mode управлением",
        "steps": [
          "Step 1: Enable seed_mode on ROOT nodes (node1,2,3)",
          "Step 2: Generate fee_wallet",
          "Step 3: Create TCELL token (zerochain)",
          "Step 4: Process token_decl через DAG-PoA (с seed_mode!)",
          "Step 5: Emit TCELL",
          "Step 6: Process emission через DAG-PoA (с seed_mode!)",
          "Step 7: Disable seed_mode on ROOT nodes + restart",
          "Step 8: Enable seed_mode on MASTER nodes (node4,5,6)",
          "Step 9: Create first TX on main chain",
          "Step 10: Get main genesis block hash",
          "Step 11: Disable seed_mode on MASTER nodes + restart",
          "Step 12: Update static_genesis_block in all configs",
          "Step 13: Sync network"
        ],
        "critical_points": [
          "✅ Seed mode для ROOT нод позволяет создать genesis events в DAG",
          "✅ Seed mode для MASTER нод позволяет создать genesis block в ESBocs",
          "✅ Restart после изменения seed_mode обязателен!",
          "✅ Seed mode ДОЛЖЕН быть выключен в финальном snapshot!"
        ]
      },
      "code_changes": [
        "genesis.py: enable_seed_mode_for_genesis() - универсальный метод для root/master нод",
        "genesis.py: disable_seed_mode_after_genesis() - с restart и ожиданием",
        "genesis.py: Улучшено логирование dag_finalization_progress (каждые 10s)",
        "genesis.py: Исправлена команда: dag event list -from events",
        "manager.py: Реорганизован genesis flow - seed_mode включается ДО создания datums",
        "config/generator.py: Исправлено - ТОЛЬКО публичные certs в /share/ca"
      ],
      "testing_plan": [
        "1. Запустить тест с новым seed_mode flow",
        "2. Проверить логи ROOT нод - должно быть: 'Genesis event produced'",
        "3. Проверить dag event list - events должны появиться",
        "4. Проверить что seed_mode=false в финальных конфигах",
        "5. Проверить что приватные certs ТОЛЬКО у своих нод"
      ],
      "next_actions": [
        "Запустить полный тест",
        "Анализировать логи ROOT нод на создание events",
        "Проверить что TX создаётся на main с seed_mode",
        "Документировать результаты в progress_log"
      ]
    },
    {
      "timestamp": "2025-10-26T02:30:00Z",
      "phase": "native_token_genesis",
      "status": "completed",
      "summary": "Реализована полная система динамической генерации TCELL токена и genesis блоков",
      "changes": [
        "genesis.py: Добавлен generate_fee_wallet() - создание fee_collector на node1",
        "genesis.py: Добавлен create_native_token() - token_decl TCELL на zerochain",
        "genesis.py: Добавлен emit_native_token() - эмиссия 1B TCELL на fee wallet",
        "genesis.py: Добавлен create_first_transaction() - первая tx на main chain",
        "genesis.py: Добавлен process_zerochain_datum() - DAG-PoA финализация датумов",
        "genesis.py: Добавлен sync_network() - синхронизация всех нод",
        "genesis.py: Добавлен get_genesis_block_hash() - извлечение genesis из chains",
        "manager.py: Интегрирован 4-фазный genesis flow в NetworkManager.start()"
      ],
      "architecture": {
        "phase_1_fee_wallet_and_token": {
          "description": "Генерация нативного токена TCELL",
          "steps": [
            "1. generate_fee_wallet() → fee_addr",
            "2. create_native_token() → token_hash (zerochain)",
            "3. process_zerochain_datum(token_hash) → finalized via DAG-PoA",
            "4. emit_native_token(fee_addr) → emission_hash (zerochain)",
            "5. process_zerochain_datum(emission_hash) → finalized",
            "6. create_first_transaction(emission_hash) → tx_hash (main)",
            "7. sync_network() → all nodes synced"
          ],
          "token_params": {
            "name": "TCELL",
            "total_supply": "1000000000",
            "decimals": "18",
            "initial_emission": "1000000000 to fee_collector",
            "first_tx": "100000000 TCELL on main chain"
          }
        },
        "phase_2_genesis_capture": {
          "description": "Извлечение genesis блоков",
          "steps": [
            "8. get_genesis_block_hash('zerochain') → genesis hash",
            "9. get_genesis_block_hash('main') → genesis hash"
          ],
          "status": "Hashes captured, TODO: auto-update chain configs"
        },
        "phase_3_node_registration": {
          "description": "Регистрация нод и алиасов",
          "steps": [
            "10. genesis.initialize() → validator orders",
            "11. genesis.register_node_aliases() → GDB aliases",
            "12. genesis.register_all_nodes_via_cli() → topology via CLI"
          ]
        },
        "phase_4_consensus": {
          "description": "Ожидание консенсуса сети",
          "steps": [
            "13. NetworkConsensusMonitor.wait_for_network_ready(150s)",
            "14. Verify node lists, chains, online status",
            "15. pause() → snapshot() → unpause()"
          ]
        }
      },
      "chain_separation": {
        "zerochain": {
          "datum_types": ["token", "emission", "ca", "decree"],
          "default_types": ["token", "emission", "decree"],
          "load_priority": 0,
          "consensus": "dag_poa",
          "tcell_operations": ["token_decl", "token_emit"]
        },
        "main": {
          "datum_types": ["transaction", "ca", "sign", "anchor", "custom"],
          "default_types": ["transaction", "anchor"],
          "load_priority": 2,
          "consensus": "esbocs",
          "tcell_operations": ["tx_create", "tx_transfer"]
        }
      },
      "implementation_details": {
        "fee_wallet": {
          "name": "fee_collector",
          "location": "node1",
          "usage": "Fee collection for main chain",
          "dynamic": true
        },
        "datum_processing": {
          "zerochain_method": "DAG-PoA via mempool_proc on root nodes",
          "mempool_check": "Poll mempool_list for datum presence",
          "finalization": "Verify datum in blocks via block list",
          "timeout": "60s per datum"
        },
        "sync_mechanism": {
          "trigger": "net sync all on each node",
          "monitoring": "net get status polling",
          "check_interval": "5s",
          "timeout": "120s",
          "graceful": "Warning on timeout, no failure"
        },
        "genesis_extraction": {
          "command": "block list -first 1",
          "regex": ["hash:\\s*(0x[A-Fa-f0-9]{64})", "(0x[A-Fa-f0-9]{64})"],
          "fallback": "Multiple patterns for robustness"
        }
      },
      "error_handling": {
        "tcell_genesis_failure": "Stop network, cleanup, raise RuntimeError",
        "genesis_capture_failure": "Warning only, continue (non-critical)",
        "node_registration_failure": "Warning only, may exist from restart",
        "consensus_timeout": "Stop network, collect diagnostics, raise RuntimeError"
      },
      "benefits": [
        "Динамический fee_addr (no hardcoding)",
        "TCELL токен в каждой сети автоматически",
        "Правильное разделение chains (zerochain/main)",
        "Genesis блоки захватываются для будущей статической конфигурации",
        "Полная обработка ошибок с shutdown при критических сбоях",
        "Логирование всех фаз для отладки"
      ],
      "testing_status": "Готово к тестированию - полный genesis flow реализован",
      "next_steps": [
        "Тестирование genesis flow на реальной сети",
        "Автоматическое обновление chain configs с genesis блоками",
        "Удаление hardcoded static_genesis_block и fee_addr из templates",
        "Валидация корректности load_priority и default_datum_types"
      ]
    }
  ],
  
  "current_phase": {
    "id": "phase_7_native_token_genesis",
    "status": "completed",
    "next_action": "Тестирование TCELL genesis flow и валидация корректности",
    "validation_status": "Реализовано и готово к тестированию"
  },
  
  "dependencies": {
    "squashfs_mode": {
      "required": ["mksquashfs", "unsquashfs"],
      "install": "sudo apt install squashfs-tools",
      "validation": "Проверяется при инициализации, fail-fast при отсутствии"
    },
    "filesystem_mode": {
      "required": ["rsync"],
      "install": "sudo apt install rsync",
      "validation": "Проверяется при инициализации, fail-fast при отсутствии"
    },
    "recreate_mode": {
      "required": [],
      "note": "Не требует дополнительных зависимостей"
    }
  }
}

