{
  "task_id": "stage_env_snapshot_system_20251024",
  "type": "infrastructure",
  "domain": "testing_infrastructure",
  "priority": "critical",
  "status": "active",
  "created": "2025-10-24T16:40:00Z",
  "updated": "2025-10-26T01:40:00Z",
  
  "auto_load": [
    ".context/modules/testing/stage_env_system.json",
    ".context/modules/testing/stage_env_scenario_language.json",
    ".context/modules/languages/python/python_development.json",
    ".context/modules/core/development_standards.json",
    ".context/modules/core/standards.json"
  ],
  
  "title": "Stage-Env Snapshot System - Ускорение тестов через снапшоты состояния",
  "description": "Реализация системы снапшотов для быстрого восстановления чистого состояния stagenet между сьютами вместо медленной пересборки",
  
  "workflow_rules": {
    "git_commits": "НЕ КОММИТИТЬ БЕЗ ЯВНОГО РАСПОРЯЖЕНИЯ ПОЛЬЗОВАТЕЛЯ",
    "reasoning": "Пользователь хочет контролировать каждый коммит самостоятельно",
    "enforcement": "mandatory"
  },
  
  "context": {
    "current_problem": "Очистка данных между сьютами через docker exec работает, но медленная и ненадёжная (сертификаты, конфликты файлов)",
    "goal": "Мгновенное восстановление чистого состояния сети для каждого сьюта",
    "constraints": [
      "Система должна быть отключаемой через конфиг",
      "Три режима работы на выбор",
      "Обратная совместимость с текущими тестами"
    ]
  },
  
  "objectives": [
    "Реализовать 3 режима изоляции сьютов",
    "Система снапшотов через SquashFS (опционально без сжатия)",
    "Система снапшотов через копирование файлов",
    "Режим пересоздания топологии для каждого сьюта",
    "Конфигурация режимов через stage-env.cfg",
    "Оптимизация скорости восстановления"
  ],
  
  "phases": [
    {
      "id": "phase_1_analysis",
      "name": "Анализ и проектирование",
      "status": "completed",
      "completed_at": "2025-10-25T11:00:00Z",
      "tasks": [
        {
          "id": "1.1",
          "description": "Анализ текущей системы очистки данных",
          "status": "completed",
          "findings": [
            "clean_test_data() через docker exec работает",
            "Медленно (~40s) и не гарантирует полную изоляцию",
            "Проблемы с сертификатами (lib/ca/)",
            "Проблемы с временными файлами",
            "Bind-mounted volumes требуют docker exec для очистки"
          ]
        },
        {
          "id": "1.2",
          "description": "Определить требования к системе",
          "status": "completed",
          "requirements": {
            "speed": "Восстановление < 3 секунд",
            "isolation": "100% изоляция между сьютами",
            "flexibility": "3 режима работы + disabled",
            "config": "Управление через stage-env.cfg",
            "fallback": "Graceful degradation при ошибках"
          }
        }
      ]
    },
    {
      "id": "phase_2_snapshot_modes",
      "name": "Реализация трёх режимов снапшотов",
      "status": "completed",
      "completed_at": "2025-10-25T11:30:00Z",
      "description": "Три взаимозаменяемых режима изоляции сьютов",
      
      "subphases": [
        {
          "id": "2.1_mode_recreate",
          "name": "Режим 1: Полное пересоздание (recreate)",
          "status": "completed",
          "file": "src/snapshots/recreate.py",
          "implementation": "Создаёт marker файл, при restore вызывает clean_test_data()",
          "performance": "~40s восстановление (baseline)"
        },
        {
          "id": "2.2_mode_filesystem",
          "name": "Режим 2: Снапшот через копирование файлов (filesystem)",
          "status": "completed",
          "file": "src/snapshots/filesystem.py",
          "implementation": "rsync или shutil.copytree для copy/restore",
          "performance": "~3s создание, ~3s восстановление"
        },
        {
          "id": "2.3_mode_squashfs",
          "name": "Режим 3: SquashFS read-only снапшоты (squashfs)",
          "status": "completed",
          "file": "src/snapshots/squashfs.py",
          "implementation": "mksquashfs/unsquashfs с опциональным сжатием",
          "performance": "~5s создание, ~2s восстановление"
        }
      ]
    },
    {
      "id": "phase_3_configuration",
      "name": "Конфигурация системы",
      "status": "completed",
      "completed_at": "2025-10-25T11:15:00Z",
      "description": "stage-env.cfg секция для управления снапшотами",
      
      "implementation": {
        "file": "config/stage-env.cfg",
        "section": "[suite_isolation]",
        "options_implemented": [
          "mode = filesystem|squashfs|recreate|disabled",
          "squashfs_compression = none|gzip|lzo|xz",
          "auto_create_on_startup = true",
          "snapshot_name = clean_state",
          "auto_cleanup = true",
          "keep_snapshot_count = 5",
          "snapshots_dir = ../testing/snapshots"
        ]
      }
    },
    {
      "id": "phase_4_implementation",
      "name": "Реализация snapshot manager",
      "status": "completed",
      "completed_at": "2025-10-25T11:25:00Z",
      "description": "Модуль для управления снапшотами",
      
      "components_created": [
        {
          "file": "src/snapshots/__init__.py",
          "exports": "SnapshotManager, SnapshotMode, all implementations"
        },
        {
          "file": "src/snapshots/manager.py",
          "class": "SnapshotManager",
          "methods": [
            "create_snapshot(name)",
            "restore_snapshot(name)",
            "delete_snapshot(name)",
            "list_snapshots()",
            "cleanup_old_snapshots(keep_count)",
            "get_snapshot_info(name)"
          ]
        },
        {
          "file": "src/snapshots/base.py",
          "class": "BaseSnapshot (ABC)",
          "purpose": "Abstract interface for all snapshot implementations"
        }
      ]
    },
    {
      "id": "phase_5_integration",
      "name": "Интеграция с NetworkManager и test runner",
      "status": "completed",
      "completed_at": "2025-10-25T11:35:00Z",
      "description": "Интеграция snapshot system во все компоненты",
      
      "integration_points": [
        {
          "file": "src/config/loader.py",
          "method": "get_suite_isolation_config()",
          "purpose": "Загрузка конфигурации снапшотов"
        },
        {
          "file": "src/network/manager.py",
          "changes": [
            "Добавлен SnapshotManager в __init__",
            "create_clean_snapshot() - создание после genesis init",
            "restore_clean_state() - восстановление снапшота",
            "clean_test_data() - fallback метод",
            "auto_create_on_startup integration"
          ]
        },
        {
          "file": "src/cli/test_commands.py",
          "changes": [
            "Заменён clean_test_data() на restore_clean_state()",
            "Вызов перед каждым test suite"
          ]
        }
      ]
    },
    {
      "id": "phase_6_testing",
      "name": "Тестирование и оптимизация",
      "status": "pending",
      "description": "Проверка всех режимов и оптимизация",
      
      "test_scenarios": [
        "Режим recreate: полная изоляция",
        "Режим filesystem: скорость восстановления",
        "Режим squashfs: разные уровни сжатия",
        "Переключение между режимами",
        "Совместимость с существующими тестами",
        "Fallback при ошибках",
        "Auto cleanup работает корректно"
      ],
      
      "benchmarks_todo": [
        "Измерить создание filesystem snapshot",
        "Измерить восстановление filesystem",
        "Измерить squashfs с разными compression",
        "Сравнить с baseline (recreate mode)",
        "Измерить disk usage для разных режимов"
      ]
    }
  ],
  
  "progress_log": [
    {
      "timestamp": "2025-10-25T10:56:00Z",
      "phase": "phase_1_analysis",
      "status": "completed",
      "summary": "Анализ завершён, определены требования"
    },
    {
      "timestamp": "2025-10-25T11:30:00Z",
      "phase": "phase_2_snapshot_modes",
      "status": "completed",
      "summary": "Реализованы все 3 режима снапшотов",
      "files_created": [
        "src/snapshots/__init__.py",
        "src/snapshots/manager.py",
        "src/snapshots/base.py",
        "src/snapshots/recreate.py",
        "src/snapshots/filesystem.py",
        "src/snapshots/squashfs.py"
      ]
    },
    {
      "timestamp": "2025-10-25T11:35:00Z",
      "phase": "phase_3_configuration",
      "status": "completed",
      "summary": "Добавлена секция [suite_isolation] в stage-env.cfg"
    },
    {
      "timestamp": "2025-10-25T11:40:00Z",
      "phase": "phase_4_implementation",
      "status": "completed",
      "summary": "SnapshotManager полностью реализован"
    },
    {
      "timestamp": "2025-10-25T11:45:00Z",
      "phase": "phase_5_integration",
      "status": "completed",
      "summary": "Интеграция в NetworkManager и test_commands.py завершена",
      "files_modified": [
        "src/config/loader.py - get_suite_isolation_config()",
        "src/network/manager.py - snapshot integration",
        "src/cli/test_commands.py - restore_clean_state()"
      ]
    },
    {
      "timestamp": "2025-10-25T11:50:00Z",
      "phase": "documentation",
      "status": "completed",
      "summary": "Создана документация snapshot_system.md",
      "files_created": [
        "docs/snapshot_system.md"
      ]
    },
    {
      "timestamp": "2025-10-25T11:55:00Z",
      "phase": "fail_fast_validation",
      "status": "completed",
      "summary": "Реализована fail-fast валидация зависимостей для squashfs и filesystem режимов",
      "changes": [
        "squashfs.py: Улучшена проверка _check_tool() - парсинг stdout+stderr вместо returncode",
        "squashfs.py: Добавлен RuntimeError при отсутствии mksquashfs/unsquashfs",
        "filesystem.py: Добавлен RuntimeError при отсутствии rsync",
        "filesystem.py: Удалён fallback на shutil.copytree - rsync обязателен",
        "docs/snapshot_system.md: Обновлена документация с требованиями зависимостей"
      ],
      "reasoning": "SOLID принципы: fail-fast вместо silent fallback, явное требование зависимостей",
      "behavior": "При отсутствии инструментов - немедленная ошибка с инструкцией по установке"
    },
    {
      "timestamp": "2025-10-25T12:00:00Z",
      "phase": "bug_fixes",
      "status": "completed",
      "summary": "Исправлены критические проблемы с правами доступа и детекцией OverlayFS",
      "changes": [
        "loader.py: Удалена auto-creation конфига stage-env.cfg в config/",
        "squashfs.py: Улучшена детекция overlayfs - multi-method с fallback (proc/filesystems, modprobe, lsmod)",
        "squashfs.py: Добавлен sudo для unsquashfs restore и chown для исправления прав",
        "squashfs.py: Warning → debug для overwriting_existing",
        "filesystem.py: Warning → debug для overwriting_existing",
        "manager.py: Проверка is_running() перед fallback cleanup",
        "004_token_transfer.yml: Исправлен loop синтаксис (заменён на явные шаги)"
      ],
      "issues_fixed": [
        "Operation not permitted при unsquashfs restore",
        "overlayfs_available=False несмотря на поддержку ядра",
        "Дублирование конфига в stage-env/config/",
        "Ложные warning при пересоздании снапшотов",
        "Fallback cleanup на незапущенных контейнерах",
        "Валидация YAML с неправильным loop синтаксисом"
      ]
    },
    {
      "timestamp": "2025-10-26T01:40:00Z",
      "phase": "bug_fixes",
      "status": "completed",
      "summary": "Рефакторинг парсеров: введена иерархия наследования для устранения дублирования кода",
      "changes": [
        "parser.py: Создан базовый класс BaseScenarioParser с общей логикой",
        "parser.py: ScenarioParser наследует от BaseScenarioParser",
        "parser.py: Добавлен SuiteSetupParser для обработки suite includes",
        "test_commands.py: Использует SuiteSetupParser вместо временных файлов",
        "parser.py: Удалено ~200 строк дублированного кода"
      ],
      "problem_solved": {
        "description": "Suite includes не обрабатывались из-за проблем с путями временных файлов",
        "root_cause": "Временный файл создавался в suite_dir (artifacts), парсер искал в suite_path (tests/e2e/utxo_blocking)",
        "original_error": "'tmp9kmtetps.yml' is not in the subpath of '/mnt/work/work/cellframe-node/tests/e2e/utxo_blocking'"
      },
      "architecture": {
        "base_class": "BaseScenarioParser - общая логика YAML загрузки и обработки includes",
        "scenario_parser": "ScenarioParser - парсинг тестовых сценариев (TestScenario)",
        "suite_parser": "SuiteSetupParser - парсинг suite setup с includes (SuiteSetupScenario)",
        "shared_methods": [
          "_load_yaml_file(path) - кэшированная загрузка YAML",
          "_process_includes(data, base_dir) - обработка includes с мульти-path поиском",
          "_deep_merge(base, override) - глубокое слияние словарей",
          "_resolve_path(path) - резолвинг относительных/абсолютных путей"
        ]
      },
      "benefits": [
        "Устранено дублирование кода (~200 строк)",
        "Правильный path resolution для includes",
        "Нет временных файлов (проще, быстрее)",
        "Единый источник истины для парсинга",
        "Расширяемость (легко добавить новые парсеры)"
      ],
      "testing_status": "Готово к тестированию - suite includes должны теперь корректно обрабатываться"
    }
  ],
  
  "current_phase": {
    "id": "phase_6_testing",
    "status": "in_progress",
    "next_action": "Запустить тесты и проверить корректность обработки suite includes (create_test_cert.yml, set_net_default.yml)",
    "validation_status": "Архитектурный рефакторинг завершён, awaiting integration testing"
  },
  
  "dependencies": {
    "squashfs_mode": {
      "required": ["mksquashfs", "unsquashfs"],
      "install": "sudo apt install squashfs-tools",
      "validation": "Проверяется при инициализации, fail-fast при отсутствии"
    },
    "filesystem_mode": {
      "required": ["rsync"],
      "install": "sudo apt install rsync",
      "validation": "Проверяется при инициализации, fail-fast при отсутствии"
    },
    "recreate_mode": {
      "required": [],
      "note": "Не требует дополнительных зависимостей"
    }
  }
}

