{
  "type": "coding_standards_module",
  "domain": "dap_sdk_coding_standards",
  "version": "1.0.0",
  "created": "2025-01-16T23:50:00Z",
  "updated": "2025-01-16T23:50:00Z",
  "source": "DAP SDK codebase analysis",
  "navigation_system": {
    "purpose": "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è DAP SDK –∏ Cellframe SDK",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/standards/dap_sdk_coding_standards.json",
    "file_role": "CODING_STANDARDS",
    "related_files": [
      ".context/manifest.json",
      ".context/modules/projects/dap_sdk_project.json"
    ],
    "quick_navigation": {
      "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
      "üõ†Ô∏è CLI": ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
      "üìã DAP SDK": ".context/modules/projects/dap_sdk_project.json - –ø—Ä–æ–µ–∫—Ç DAP SDK"
    },
    "usage_hint": "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DAP SDK –∏ Cellframe SDK",
    "ai_context": "–§–∞–π–ª –°–õ–ö —Å–∏—Å—Ç–µ–º—ã: dap_sdk_coding_standards.json"
  },
  "template_info": {
    "name": "DAP SDK / Cellframe SDK Coding Standards",
    "description": "–ü–æ–ª–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ DAP SDK –∏ Cellframe SDK",
    "version": "1.0.0",
    "domain": "c_programming_dap_sdk",
    "specialization": "quantum_resistant_blockchain_development",
    "applicability": "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ DAP SDK –∏ Cellframe SDK",
    "auto_load_triggers": [
      "dap-sdk",
      "cellframe-sdk", 
      "cellframe-node",
      "dap_",
      "DAP_",
      "#include \"dap_",
      "quantum-resistant",
      "post-quantum"
    ]
  },
  "core_principles": {
    "language_standards": {
      "rule": "English-only for commits and code comments",
      "description": "All commit messages and code comments must be written in English for international collaboration",
      "enforcement": "mandatory",
      "rationale": "Ensures accessibility for international contributors and maintainers",
      "examples": {
        "commit_messages": [
          "‚úÖ Add post-quantum signature verification",
          "‚úÖ Fix memory leak in crypto module", 
          "‚úÖ Implement Kyber key encapsulation",
          "‚ùå –î–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏",
          "‚ùå –ò—Å–ø—Ä–∞–≤–∏—Ç—å —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏"
        ],
        "code_comments": [
          "‚úÖ // Initialize post-quantum cryptographic context",
          "‚úÖ /* Allocate memory for signature verification */",
          "‚ùå // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
          "‚ùå /* –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ */"
        ]
      }
    },
    "security_first": {
      "rule": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "description": "–í—Å–µ —Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é",
      "enforcement": "mandatory"
    },
    "post_quantum_priority": {
      "rule": "–ü–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –í–°–ï–ì–î–ê –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
      "description": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —É–≥—Ä–æ–∑–µ –≤–∞–∂–Ω–µ–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "enforcement": "critical"
    },
    "no_openssl_policy": {
      "rule": "–ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenSSL",
      "description": "–ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤—ã",
      "rationale": "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
      "enforcement": "critical",
      "violation_action": "immediate_rejection"
    },
    "memory_safety": {
      "rule": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ DAP SDK –º–∞–∫—Ä–æ—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é",
      "description": "DAP_NEW, DAP_DELETE, DAP_FREE –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö malloc/free",
      "enforcement": "mandatory"
    },
    "cross_platform": {
      "rule": "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ Linux, macOS, Windows",
      "description": "–ò–∑–±–µ–≥–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ fallback",
      "enforcement": "recommended"
    }
  },
  "naming_conventions": {
    "functions": {
      "prefix": "dap_",
      "style": "snake_case",
      "pattern": "dap_module_action_object",
      "examples": [
        "dap_common_init()",
        "dap_config_get()",
        "dap_plugin_register_type_handler()",
        "dap_crypto_hash_fast()"
      ],
      "guidelines": [
        "–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ dap_",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ (–Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)",
        "–ü–æ—Ä—è–¥–æ–∫: –º–æ–¥—É–ª—å_–¥–µ–π—Å—Ç–≤–∏–µ_–æ–±—ä–µ–∫—Ç",
        "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: _init(), –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: _deinit()"
      ]
    },
    "variables": {
      "local_variables": {
        "prefix": "l_",
        "style": "snake_case",
        "examples": [
          "l_buffer_size",
          "l_result",
          "l_temp_string",
          "l_node_count"
        ]
      },
      "function_arguments": {
        "prefix": "a_",
        "style": "snake_case", 
        "examples": [
          "a_config_path",
          "a_buffer",
          "a_size",
          "a_callback_func"
        ]
      },
      "static_variables": {
        "prefix": "s_",
        "style": "snake_case",
        "examples": [
          "s_initialized",
          "s_global_config",
          "s_handler_registry"
        ]
      },
      "global_variables": {
        "prefix": "g_",
        "style": "snake_case",
        "examples": [
          "g_app_name",
          "g_debug_mode",
          "g_plugin_manager"
        ]
      },
      "guidelines": [
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ (–∫—Ä–æ–º–µ —Ü–∏–∫–ª–æ–≤)",
        "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞",
        "–ò–∑–±–µ–≥–∞—Ç—å –≤–µ–Ω–≥–µ—Ä—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏",
        "bool –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: is_, has_, can_, should_"
      ]
    },
    "macros": {
      "prefix": "DAP_",
      "style": "UPPER_CASE",
      "examples": [
        "DAP_NEW",
        "DAP_DELETE", 
        "DAP_MALLOC",
        "DAP_PLUGIN_TYPE_PYTHON",
        "DAP_LOG_FORMAT_NO_PREFIX"
      ],
      "guidelines": [
        "–í—Å–µ–≥–¥–∞ –≤ UPPER_CASE",
        "–ü—Ä–µ—Ñ–∏–∫—Å DAP_ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞–∫—Ä–æ—Å–æ–≤"
      ]
    },
    "types": {
      "suffix": "_t",
      "style": "snake_case",
      "pattern": "dap_module_object_t",
      "examples": [
        "dap_config_t",
        "dap_chain_t",
        "dap_plugin_manifest_t",
        "dap_plugin_type_handler_t"
      ],
      "struct_naming": [
        "typedef struct dap_structure_name {",
        "    // –ø–æ–ª—è",
        "} dap_structure_name_t;"
      ],
      "enum_naming": [
        "typedef enum dap_enum_name {",
        "    DAP_ENUM_VALUE_ONE,",
        "    DAP_ENUM_VALUE_TWO",
        "} dap_enum_name_t;"
      ]
    },
    "files": {
      "header_files": {
        "pattern": "dap_module_name.h",
        "examples": [
          "dap_common.h",
          "dap_plugin.h",
          "dap_plugin_dependency_manager.h"
        ]
      },
      "source_files": {
        "pattern": "dap_module_name.c",
        "examples": [
          "dap_common.c",
          "dap_plugin.c",
          "dap_plugin_dependency_manager.c"
        ]
      },
      "test_files": {
        "pattern": "dap_module_name_test.c",
        "examples": [
          "dap_crypto_test.c",
          "dap_plugin_test.c"
        ]
      }
    }
  },
  "memory_management": {
    "allocation": {
      "preferred_macros": [
        "DAP_NEW(type) - –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
        "DAP_NEW_Z(type) - –≤—ã–¥–µ–ª–∏—Ç—å –∏ –æ–±–Ω—É–ª–∏—Ç—å –ø–∞–º—è—Ç—å",
        "DAP_NEW_SIZE(type, size) - –≤—ã–¥–µ–ª–∏—Ç—å –ø–∞–º—è—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞",
        "DAP_MALLOC(size) - –ø—Ä—è–º–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
        "DAP_CALLOC(count, size) - –≤—ã–¥–µ–ª–∏—Ç—å –∏ –æ–±–Ω—É–ª–∏—Ç—å"
      ],
      "forbidden": [
        "malloc() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_MALLOC",
        "calloc() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_CALLOC", 
        "new - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_NEW",
        "alloca() - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö"
      ],
      "pattern": {
        "correct": [
          "dap_config_t *l_config = DAP_NEW(dap_config_t);",
          "if (!l_config) {",
          "    log_it(L_CRITICAL, \"%s\", c_error_memory_alloc);",
          "    return -ENOMEM;",
          "}"
        ],
        "wrong": [
          "dap_config_t *l_config = malloc(sizeof(dap_config_t));"
        ]
      }
    },
    "deallocation": {
      "preferred_macros": [
        "DAP_DELETE(ptr) - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
        "DAP_FREE(ptr) - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å",
        "DAP_DEL_MULTY(ptr) - –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤"
      ],
      "forbidden": [
        "free() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_FREE",
        "delete - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_DELETE"
      ],
      "guidelines": [
        "–í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ NULL –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è",
        "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ NULL –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º",
        "–û—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è"
      ],
      "pattern": {
        "correct": [
          "if (l_config) {",
          "    DAP_DELETE(l_config);",
          "    l_config = NULL;",
          "}"
        ]
      }
    },
    "validation": {
      "always_check": "–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏",
      "error_handling": "–í–æ–∑–≤—Ä–∞—â–∞—Ç—å -ENOMEM –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏",
      "logging": "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–∞–º—è—Ç–∏ —Å L_CRITICAL",
      "cleanup": "–í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞—Ç—å –ø–∞–º—è—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö cleanup/deinit"
    }
  },
  "logging_system": {
    "function": "log_it(level, format, ...)",
    "required_define": "#define LOG_TAG \"module_name\"",
    "levels": {
      "L_CRITICAL": {
        "value": 5,
        "usage": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –ø–∞–¥–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "examples": ["–û—à–∏–±–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"]
      },
      "L_ERROR": {
        "value": 4,
        "usage": "–û—à–∏–±–∫–∏, –Ω–µ –ø—Ä–∏–≤–æ–¥—è—â–∏–µ –∫ –ø–∞–¥–µ–Ω–∏—é, –Ω–æ –Ω–∞—Ä—É—à–∞—é—â–∏–µ —Ä–∞–±–æ—Ç—É",
        "examples": ["–û—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]
      },
      "L_WARNING": {
        "value": 3,
        "usage": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö",
        "examples": ["Deprecated —Ñ—É–Ω–∫—Ü–∏–∏", "–ù–µ–æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]
      },
      "L_NOTICE": {
        "value": 2,
        "usage": "–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "examples": ["–£—Å–ø–µ—à–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]
      },
      "L_INFO": {
        "value": 1,
        "usage": "–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ",
        "examples": ["–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"]
      },
      "L_DEBUG": {
        "value": 0,
        "usage": "–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "examples": ["–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π", "–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"]
      }
    },
    "formats": {
      "DAP_LOG_FORMAT_DEFAULT": "–ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º - –¥–ª—è production",
      "DAP_LOG_FORMAT_SIMPLE": "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏",
      "DAP_LOG_FORMAT_NO_TIME": "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤",
      "DAP_LOG_FORMAT_NO_PREFIX": "üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤"
    },
    "testing_rules": {
      "unit_tests": {
        "mandatory_format": "DAP_LOG_FORMAT_NO_PREFIX",
        "setup_code": "dap_log_set_format(DAP_LOG_FORMAT_NO_PREFIX);",
        "rationale": "–ß–∏—Å—Ç—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ UX —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
      },
      "cleanup": {
        "save_original": "dap_log_format_t l_original = dap_log_get_format();",
        "restore": "dap_log_set_format(l_original);"
      }
    },
    "patterns": {
      "basic_usage": [
        "#define LOG_TAG \"plugin_manager\"",
        "",
        "log_it(L_DEBUG, \"Entering %s\", __func__);",
        "log_it(L_INFO, \"Loading plugin: %s\", a_plugin_name);",
        "log_it(L_ERROR, \"Failed to load plugin: %s\", a_plugin_name);"
      ],
      "memory_error": [
        "if (!l_ptr) {",
        "    log_it(L_CRITICAL, \"%s\", c_error_memory_alloc);",
        "    return -ENOMEM;",
        "}"
      ]
    }
  },
  "error_handling": {
    "return_codes": {
      "success": {
        "value": 0,
        "usage": "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
      },
      "memory_error": {
        "value": "-ENOMEM",
        "usage": "–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"
      },
      "invalid_parameter": {
        "value": "-EINVAL", 
        "usage": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
      },
      "not_found": {
        "value": "-ENOENT",
        "usage": "–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
      },
      "permission_denied": {
        "value": "-EACCES",
        "usage": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
      },
      "operation_not_supported": {
        "value": "-ENOSYS",
        "usage": "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
      }
    },
    "validation_macros": {
      "dap_return_val_if_fail": {
        "usage": "dap_return_val_if_fail(condition, return_value)",
        "examples": [
          "dap_return_val_if_fail(a_plugin_name, -EINVAL);",
          "dap_return_val_if_fail(a_callback, -EINVAL);"
        ]
      },
      "dap_return_if_fail": {
        "usage": "dap_return_if_fail(condition)",
        "examples": [
          "dap_return_if_fail(s_initialized);"
        ]
      }
    },
    "patterns": {
      "parameter_validation": [
        "int dap_function_name(const char *a_param) {",
        "    dap_return_val_if_fail(a_param, -EINVAL);",
        "    // —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è",
        "    return 0;",
        "}"
      ],
      "error_propagation": [
        "int l_result = dap_sub_function(a_param);",
        "if (l_result != 0) {",
        "    log_it(L_ERROR, \"Sub function failed: %d\", l_result);",
        "    return l_result;",
        "}"
      ]
    }
  },
  "cryptography_rules": {
    "no_openssl": {
      "rule": "–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenSSL",
      "rationale": "–ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤—ã",
      "forbidden": [
        "#include <openssl/sha.h>",
        "SHA256(data, len, hash);",
        "EVP_*",
        "RSA_*",
        "EC_*"
      ],
      "correct_alternatives": {
        "sha256": "dap_hash_fast() –∏–ª–∏ dap_enc_hash()",
        "keccak": "XKCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —á–µ—Ä–µ–∑ dap_crypto_XKCP",
        "general": "–í—Å–µ —Ö—ç—à-—Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ dap_hash.h"
      },
      "examples": {
        "wrong": [
          "#include <openssl/sha.h>",
          "SHA256(data, len, hash);"
        ],
        "correct": [
          "#include \"dap_hash.h\"",
          "dap_hash_fast(data, len, hash);"
        ]
      }
    },
    "post_quantum_priority": {
      "primary_algorithms": [
        "Chipmunk - lattice-based multi-signature",
        "Kyber - post-quantum key encapsulation",
        "Dilithium - lattice-based signatures",
        "Falcon - compact lattice signatures",
        "MSRLN - key exchange"
      ],
      "deprecated_classical": [
        "ECDSA - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
        "RSA - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
      ]
    },
    "memory_security": {
      "zero_sensitive_memory": "–í—Å–µ–≥–¥–∞ –æ–±–Ω—É–ª—è—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º",
      "constant_time_operations": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å constant-time —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
      "secure_random": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP SDK —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª"
    }
  },
  "file_structure": {
    "header_file_template": [
      "/*",
      " * Authors:",
      " * [Author Name] <email@demlabs.net>",
      " * DeM Labs Ltd   https://demlabs.net",
      " * Copyright  (c) [year]",
      " * All rights reserved.",
      "",
      " This file is part of DAP SDK the open source project",
      "",
      "    DAP SDK is free software: you can redistribute it and/or modify",
      "    it under the terms of the GNU General Public License as published by",
      "    the Free Software Foundation, either version 3 of the License, or",
      "    (at your option) any later version.",
      "",
      "    DAP SDK is distributed in the hope that it will be useful,",
      "    but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "    GNU General Public License for more details.",
      "",
      "    You should have received a copy of the GNU General Public License",
      "    along with any DAP SDK based project.  If not, see <http://www.gnu.org/licenses/>.",
      "*/",
      "",
      "#pragma once",
      "",
      "#include <stdbool.h>",
      "#include <stdint.h>",
      "#include <stddef.h>",
      "#include \"dap_common.h\"",
      "",
      "#ifdef __cplusplus",
      "extern \"C\" {",
      "#endif",
      "",
      "// Type definitions",
      "// Function declarations",
      "",
      "#ifdef __cplusplus",
      "}",
      "#endif"
    ],
    "source_file_template": [
      "#include \"dap_module.h\"",
      "#include \"dap_common.h\"",
      "",
      "#define LOG_TAG \"module\"",
      "",
      "// Static variables",
      "// Static function declarations",
      "// Public function implementations",
      "// Static function implementations"
    ],
    "include_order": [
      "1. System headers (sorted alphabetically)",
      "2. DAP SDK headers (sorted alphabetically)", 
      "3. Local project headers",
      "4. Current module header (in .c files)"
    ]
  },
  "code_style": {
    "indentation": {
      "rule": "4 –ø—Ä–æ–±–µ–ª–∞ (–ù–ï —Ç–∞–±—ã)",
      "rationale": "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö"
    },
    "braces": {
      "style": "K&R style",
      "examples": [
        "if (condition) {",
        "    // code",
        "} else {",
        "    // code",
        "}"
      ]
    },
    "line_length": {
      "maximum": 120,
      "recommended": 100,
      "guidelines": [
        "–†–∞–∑–±–∏–≤–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ",
        "–í—ã—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"
      ]
    },
    "comments": {
      "language_requirement": {
        "rule": "All comments must be written in English",
        "enforcement": "mandatory",
        "rationale": "Ensures code readability for international contributors"
      },
      "block_comments": "/* */ for multi-line blocks",
      "inline_comments": "// for single-line comments",
      "function_documentation": [
        "/**",
        " * @brief Brief function description",
        " * ",
        " * Detailed description of function behavior and implementation.",
        " * ",
        " * @param a_param1 Description of first parameter",
        " * @param a_param2 Description of second parameter",
        " * @return Description of return value",
        " */"
      ],
      "examples": {
        "correct": [
          "// Initialize cryptographic context",
          "/* Allocate memory for signature buffer */",
          "// TODO: Implement post-quantum key exchange"
        ],
        "incorrect": [
          "// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
          "/* –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∏ */",
          "// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤—ã–π –æ–±–º–µ–Ω –∫–ª—é—á–∞–º–∏"
        ]
      }
    },
    "whitespace": {
      "around_operators": "–ü—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: a + b, a == b",
      "after_keywords": "–ü—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: if (condition)",
      "function_calls": "–ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞: function(args)",
      "trailing_whitespace": "–£–¥–∞–ª—è—Ç—å trailing –ø—Ä–æ–±–µ–ª—ã"
    }
  },
  "testing_standards": {
    "framework": "DAP SDK Test Framework",
    "test_file_naming": {
      "pattern": "*_test.c –∏ *_test.h",
      "examples": [
        "dap_crypto_test.c",
        "dap_plugin_test.c"
      ]
    },
    "test_function_naming": {
      "pattern": "static void s_test_<functionality>()",
      "examples": [
        "static void s_test_memory_allocation()",
        "static void s_test_plugin_loading()"
      ]
    },
    "assertions": {
      "preferred": "dap_assert(condition, \"Descriptive message\")",
      "avoid": "assert() –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
      "examples": [
        "dap_assert(result == 0, \"Plugin should load successfully\");",
        "dap_assert(ptr != NULL, \"Memory allocation should succeed\");"
      ]
    },
    "logging_setup": {
      "mandatory": [
        "dap_common_init(\"test_name\", NULL);",
        "dap_log_level_set(L_DEBUG);",
        "dap_log_set_external_output(LOGGER_OUTPUT_STDOUT, NULL);",
        "dap_log_set_format(DAP_LOG_FORMAT_NO_PREFIX);"
      ],
      "cleanup": [
        "dap_log_set_format(original_format);",
        "dap_common_deinit();"
      ]
    },
    "test_structure": [
      "1. Save original settings",
      "2. Setup test environment", 
      "3. Run test logic with assertions",
      "4. Cleanup and restore settings"
    ]
  },
  "build_system": {
    "primary": "CMake",
    "configurations": [
      "Debug - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏",
      "Release - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è production",
      "RelWithDebInfo - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è"
    ],
    "cmake_patterns": {
      "library_definition": [
        "add_library(dap_module",
        "    src/dap_module.c",
        "    include/dap_module.h",
        ")",
        "",
        "target_include_directories(dap_module PUBLIC include)",
        "target_link_libraries(dap_module dap_core)"
      ]
    }
  },
  "git_standards": {
    "commit_messages": {
      "language": "English only",
      "format": "Conventional Commits style preferred",
      "structure": [
        "type(scope): brief description",
        "",
        "Detailed explanation if needed",
        "",
        "Co-authored-by: Name <email@domain.com>"
      ],
      "types": [
        "feat: new feature implementation",
        "fix: bug fix",
        "docs: documentation changes",
        "style: code style changes (formatting, etc)",
        "refactor: code refactoring without functionality change",
        "test: adding or modifying tests",
        "chore: maintenance tasks, build process changes"
      ],
      "examples": {
        "correct": [
          "feat(crypto): add post-quantum signature verification",
          "fix(memory): resolve memory leak in hash calculation",
          "docs(api): update function documentation for dap_crypto_init",
          "test(crypto): add unit tests for Kyber key exchange"
        ],
        "incorrect": [
          "–î–æ–±–∞–≤–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∏",
          "–∏—Å–ø—Ä–∞–≤–∏–ª –±–∞–≥",
          "–æ–±–Ω–æ–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
          "–Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"
        ]
      },
      "guidelines": [
        "Use imperative mood (add, fix, update, not added, fixed, updated)",
        "Keep subject line under 72 characters",
        "Capitalize first letter of subject",
        "No period at end of subject line",
        "Use body to explain what and why, not how"
      ]
    },
    "branch_naming": {
      "pattern": "type/short-description",
      "examples": [
        "feature/post-quantum-crypto",
        "bugfix/memory-leak-crypto",
        "hotfix/security-vulnerability",
        "docs/api-documentation-update"
      ]
    }
  },
  "performance_guidelines": {
    "optimization_approach": "3-—Ñ–∞–∑–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
    "profiling_requirement": "–í–°–ï–ì–î–ê –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π",
    "simd_guidelines": {
      "when_to_use": "–î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å >30% –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
      "fallback_required": "–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ-SIMD –≤–µ—Ä—Å–∏—é",
      "batch_processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 4+ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
    },
    "memory_optimization": {
      "stack_vs_heap": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å stack –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
      "cache_locality": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏",
      "memory_pools": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å memory pools –¥–ª—è —á–∞—Å—Ç—ã—Ö –∞–ª–ª–æ–∫–∞—Ü–∏–π"
    }
  },
  "security_guidelines": {
    "input_validation": {
      "all_parameters": "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –í–°–ï –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
      "buffer_bounds": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –±—É—Ñ–µ—Ä–æ–≤",
      "null_checks": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ NULL –≤—Å–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏"
    },
    "secure_coding": {
      "no_buffer_overflows": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∫",
      "integer_overflow": "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ",
      "time_of_check": "–ò–∑–±–µ–≥–∞—Ç—å race conditions –≤ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö"
    },
    "cryptographic_security": {
      "constant_time": "Constant-time –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
      "secure_memory": "–û–±–Ω—É–ª—è—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
      "random_quality": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–µ –ì–°–ß"
    }
  },
  "integration_with_slc": {
    "auto_load_conditions": [
      "–ü—Ä–æ–µ–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ dap-sdk/",
      "–ü—Ä–æ–µ–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ cellframe-sdk/",
      "–§–∞–π–ª—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º dap_",
      "–§–∞–π–ª—ã —Å include \"dap_",
      "CMake —Ñ–∞–π–ª—ã —É–ø–æ–º–∏–Ω–∞—é—â–∏–µ DAP",
      "–ü—Ä–æ–µ–∫—Ç—ã —Å –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"
    ],
    "recommended_usage": [
      "–ó–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã —Å DAP SDK –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—Ä–∏ code review",
      "–ü—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π",
      "–°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞"
    ],
    "complementary_modules": [
      ".context/modules/projects/dap_sdk_project.json",
      ".context/modules/languages/c/c_development.json",
      ".context/modules/methodologies/performance_optimization.json"
    ]
  },
  "examples": {
    "minimal_module": {
      "header": [
        "#pragma once",
        "#include \"dap_common.h\"",
        "",
        "typedef struct dap_example {",
        "    char *name;",
        "    uint32_t value;",
        "} dap_example_t;",
        "",
        "int dap_example_init(void);",
        "void dap_example_deinit(void);",
        "dap_example_t *dap_example_create(const char *a_name, uint32_t a_value);",
        "void dap_example_delete(dap_example_t *a_example);"
      ],
      "source": [
        "#include \"dap_example.h\"",
        "",
        "#define LOG_TAG \"example\"",
        "",
        "static bool s_initialized = false;",
        "",
        "int dap_example_init(void) {",
        "    if (s_initialized) {",
        "        log_it(L_WARNING, \"Example module already initialized\");",
        "        return 0;",
        "    }",
        "    ",
        "    log_it(L_INFO, \"Initializing example module\");",
        "    s_initialized = true;",
        "    return 0;",
        "}",
        "",
        "void dap_example_deinit(void) {",
        "    if (!s_initialized) {",
        "        return;",
        "    }",
        "    ",
        "    log_it(L_INFO, \"Deinitializing example module\");",
        "    s_initialized = false;",
        "}",
        "",
        "dap_example_t *dap_example_create(const char *a_name, uint32_t a_value) {",
        "    dap_return_val_if_fail(a_name, NULL);",
        "    dap_return_val_if_fail(s_initialized, NULL);",
        "    ",
        "    dap_example_t *l_example = DAP_NEW(dap_example_t);",
        "    if (!l_example) {",
        "        log_it(L_CRITICAL, \"%s\", c_error_memory_alloc);",
        "        return NULL;",
        "    }",
        "    ",
        "    l_example->name = dap_strdup(a_name);",
        "    if (!l_example->name) {",
        "        log_it(L_CRITICAL, \"%s\", c_error_memory_alloc);",
        "        DAP_DELETE(l_example);",
        "        return NULL;",
        "    }",
        "    ",
        "    l_example->value = a_value;",
        "    ",
        "    log_it(L_DEBUG, \"Created example: %s, value: %u\", a_name, a_value);",
        "    return l_example;",
        "}",
        "",
        "void dap_example_delete(dap_example_t *a_example) {",
        "    if (!a_example) {",
        "        return;",
        "    }",
        "    ",
        "    if (a_example->name) {",
        "        DAP_FREE(a_example->name);",
        "    }",
        "    ",
        "    DAP_DELETE(a_example);",
        "}"
      ]
    },
    "test_module": [
      "#include \"dap_example.h\"",
      "#include \"dap_test.h\"",
      "",
      "static void s_test_example_creation(void) {",
      "    dap_example_t *l_example = dap_example_create(\"test\", 42);",
      "    dap_assert(l_example != NULL, \"Example creation should succeed\");",
      "    dap_assert(dap_strcmp(l_example->name, \"test\") == 0, \"Name should match\");",
      "    dap_assert(l_example->value == 42, \"Value should match\");",
      "    dap_example_delete(l_example);",
      "}",
      "",
      "void dap_example_test_run(void) {",
      "    dap_print_module_name(\"dap_example\");",
      "    ",
      "    // Save original settings",
      "    dap_log_format_t l_original_format = dap_log_get_format();",
      "    ",
      "    // Setup test environment",
      "    dap_common_init(\"example_test\", NULL);",
      "    dap_log_level_set(L_DEBUG);",
      "    dap_log_set_external_output(LOGGER_OUTPUT_STDOUT, NULL);",
      "    dap_log_set_format(DAP_LOG_FORMAT_NO_PREFIX);",
      "    ",
      "    // Initialize module",
      "    int l_result = dap_example_init();",
      "    dap_assert(l_result == 0, \"Module initialization should succeed\");",
      "    ",
      "    // Run tests",
      "    s_test_example_creation();",
      "    ",
      "    // Cleanup",
      "    dap_example_deinit();",
      "    dap_log_set_format(l_original_format);",
      "    dap_common_deinit();",
      "}"
    ]
  },
  "common_mistakes": {
    "language_violations": [
      "‚ùå Russian commit messages (use English)",
      "‚ùå Russian code comments (use English)",
      "‚ùå Mixed language documentation",
      "‚ùå Non-ASCII characters in commit messages"
    ],
    "memory_management": [
      "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ malloc() –≤–º–µ—Å—Ç–æ DAP_NEW",
      "‚ùå –ó–∞–±—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ NULL –ø–æ—Å–ª–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏",
      "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ NULL –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è",
      "‚ùå –£—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    ],
    "naming": [
      "‚ùå –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ dap_",
      "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ l_, a_, s_, g_",
      "‚ùå –ú–∞–∫—Ä–æ—Å—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ",
      "‚ùå –û–¥–Ω–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
    ],
    "logging": [
      "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ #define LOG_TAG",
      "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö",
      "‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
      "‚ùå –ù–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"
    ],
    "security": [
      "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenSSL —Ñ—É–Ω–∫—Ü–∏–π",
      "‚ùå –ù–µ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
      "‚ùå Buffer overflow –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö",
      "‚ùå –ù–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    ]
  },
  "quality_checklist": {
    "before_commit": [
      "‚úÖ Commit message written in English",
      "‚úÖ All code comments written in English",
      "‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–µ—Ñ–∏–∫—Å dap_",
      "‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã",
      "‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ DAP –º–∞–∫—Ä–æ—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é",
      "‚úÖ –ï—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
      "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω LOG_TAG –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è log_it()",
      "‚úÖ –ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenSSL",
      "‚úÖ –ö–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
      "‚úÖ –ù–∞–ø–∏—Å–∞–Ω—ã unit —Ç–µ—Å—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
      "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –≤ doxygen —Ñ–æ—Ä–º–∞—Ç–µ"
    ],
    "code_review": [
      "‚úÖ Commit messages and comments in English",
      "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è",
      "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é",
      "‚úÖ –ê–¥–µ–∫–≤–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
      "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞",
      "‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏",
      "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤",
      "‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º DAP SDK"
    ]
  }
} 