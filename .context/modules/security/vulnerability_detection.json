{
  "version": "2.0.0",
  "created": "2025-09-01T15:45:00Z",
  "updated": "2025-09-03T12:00:00Z",
  "module_info": {
    "name": "Vulnerability Detection Module",
    "description": "Специализированный модуль для поиска и анализа уязвимостей в blockchain системах",
    "category": "security",
    "type": "methodology",
    "auto_load_triggers": [
      "vulnerability",
      "security audit",
      "exploit",
      "уязвимость",
      "аудит безопасности",
      "эксплойт",
      "security analysis",
      "penetration testing"
    ]
  },
  "cve_naming_conventions": {
    "description": "Стандарты именования уязвимостей с инициалами проекта и динамической датой",
    "project_initials": "CF",
    "date_command": "date +%Y",
    "cve_format": "CVE-{PROJECT}-{YEAR}-{SEQUENCE}",
    "examples": [
      "CVE-CF-2025-STAKE-001",
      "CVE-CF-2025-TX-002",
      "CVE-CF-2025-CONSENSUS-003"
    ],
    "sequence_numbering": {
      "description": "Последовательная нумерация уязвимостей в рамках года",
      "format": "3-digit zero-padded number (001, 002, 003, etc.)",
      "reset_yearly": true,
      "categories": {
        "STAKE": "Staking-related vulnerabilities",
        "TX": "Transaction processing vulnerabilities",
        "CONSENSUS": "Consensus mechanism vulnerabilities",
        "CRYPTO": "Cryptographic vulnerabilities",
        "NETWORK": "Network protocol vulnerabilities",
        "MEMORY": "Memory management vulnerabilities",
        "AUTH": "Authentication and authorization vulnerabilities"
      }
    },
    "auto_generation": {
      "enabled": true,
      "script": "generate_cve_id.sh",
      "parameters": {
        "project": "CF",
        "category": "AUTO_DETECT",
        "year": "AUTO_DATE"
      }
    }
  },
  "vulnerability_detection_framework": {
    "static_analysis": {
      "description": "Статический анализ кода для поиска уязвимостей",
      "tools": [
        {
          "tool": "cppcheck",
          "command": "cppcheck --enable=all --std=c11 --platform=unix64",
          "focus": "Buffer overflows, null pointer dereference, memory leaks",
          "severity_levels": ["error", "warning", "style", "performance"]
        },
        {
          "tool": "clang-static-analyzer", 
          "command": "clang --analyze -Xanalyzer -analyzer-output=text",
          "focus": "Logic errors, dead code, security issues",
          "checkers": ["security", "deadcode", "core", "unix"]
        },
        {
          "tool": "flawfinder",
          "command": "flawfinder --minlevel=1 --html",
          "focus": "Security-related C/C++ constructs",
          "categories": ["buffer", "format", "race", "random", "tmpfile"]
        }
      ],
      "custom_checks": [
        {
          "name": "DAP SDK Memory Pattern Check",
          "pattern": "malloc|calloc|realloc|free",
          "violation": "Use DAP_NEW/DAP_DELETE instead of stdlib memory functions",
          "severity": "medium"
        },
        {
          "name": "OpenSSL Usage Check", 
          "pattern": "#include.*openssl|SSL_|EVP_|RSA_",
          "violation": "OpenSSL usage forbidden - use DAP SDK crypto only",
          "severity": "critical"
        },
        {
          "name": "Unsafe String Functions",
          "pattern": "strcpy|strcat|sprintf|gets",
          "violation": "Use safe string functions: strncpy, strncat, snprintf",
          "severity": "high"
        }
      ]
    },
    "dynamic_analysis": {
      "description": "Динамический анализ во время выполнения",
      "sanitizers": [
        {
          "name": "AddressSanitizer",
          "flags": "-fsanitize=address -fno-omit-frame-pointer",
          "detects": ["buffer overflows", "use-after-free", "double-free", "memory leaks"]
        },
        {
          "name": "ThreadSanitizer",
          "flags": "-fsanitize=thread",
          "detects": ["data races", "deadlocks", "thread safety issues"]
        },
        {
          "name": "UndefinedBehaviorSanitizer",
          "flags": "-fsanitize=undefined",
          "detects": ["integer overflow", "null pointer dereference", "undefined behavior"]
        }
      ],
      "runtime_checks": [
        "Memory access pattern validation",
        "Stack overflow detection", 
        "Heap corruption detection",
        "Race condition monitoring"
      ]
    },
    "fuzzing": {
      "description": "Фаззинг для поиска уязвимостей через автоматизированное тестирование",
      "targets": [
        {
          "function": "dap_chain_net_srv_stake_*",
          "input_types": ["transaction data", "stake parameters", "validator keys"],
          "fuzzing_strategy": "Structure-aware fuzzing с валидными и невалидными данными"
        },
        {
          "function": "dap_chain_tx_*", 
          "input_types": ["transaction payloads", "signatures", "conditions"],
          "fuzzing_strategy": "Mutation-based fuzzing транзакционных данных"
        }
      ],
      "fuzzing_tools": [
        {
          "tool": "AFL++",
          "usage": "Для фаззинга парсинг функций",
          "config": "Persistent mode для высокой производительности"
        },
        {
          "tool": "libFuzzer",
          "usage": "Для in-process фаззинга отдельных функций",
          "config": "Coverage-guided fuzzing с sanitizers"
        }
      ]
    },
    "manual_analysis": {
      "description": "Ручной анализ критических участков кода",
      "code_review_checklist": [
        {
          "category": "Input Validation",
          "checks": [
            "Все входные параметры валидируются",
            "Проверка границ массивов и буферов",
            "Валидация размеров данных",
            "Проверка NULL указателей"
          ]
        },
        {
          "category": "Memory Management",
          "checks": [
            "Корректное выделение и освобождение памяти",
            "Отсутствие use-after-free",
            "Проверка double-free",
            "Memory leak prevention"
          ]
        },
        {
          "category": "Concurrency",
          "checks": [
            "Правильная синхронизация доступа к разделяемым данным",
            "Отсутствие race conditions",
            "Deadlock prevention",
            "Atomic operations где необходимо"
          ]
        },
        {
          "category": "Logic Vulnerabilities",
          "checks": [
            "Корректность бизнес-логики стекинга",
            "Проверка математических операций на overflow",
            "Валидация состояний системы",
            "Проверка временных условий"
          ]
        }
      ]
    }
  },
  "staking_specific_threats": {
    "description": "Специфичные угрозы для стекинг систем",
    "threat_categories": [
      {
        "name": "Economic Attacks",
        "threats": [
          "Nothing at stake attack",
          "Long range attack", 
          "Grinding attack",
          "Stake bleeding attack"
        ],
        "detection_methods": [
          "Анализ логики выбора валидаторов",
          "Проверка penalty mechanisms",
          "Валидация slashing conditions"
        ]
      },
      {
        "name": "Technical Attacks",
        "threats": [
          "Double spending в стекинг транзакциях",
          "Replay attacks на стекинг операции",
          "Race conditions в delegate logic",
          "Buffer overflow в обработке стекинг данных"
        ],
        "detection_methods": [
          "Transaction replay detection",
          "Concurrency analysis",
          "Buffer boundary checking",
          "State consistency validation"
        ]
      },
      {
        "name": "Consensus Attacks",
        "threats": [
          "Finality reversion attacks",
          "Validator manipulation",
          "Consensus splitting",
          "Byzantine behavior exploitation"
        ],
        "detection_methods": [
          "Consensus algorithm analysis",
          "Byzantine fault tolerance testing",
          "Finality mechanism review",
          "Validator selection logic audit"
        ]
      }
    ]
  },
  "cve_examples": {
    "description": "Примеры CVE идентификаторов в новом формате для Cellframe SDK",
    "current_year_vulnerabilities": [
      {
        "id": "CVE-CF-2025-STAKE-001",
        "title": "Bitwise Operator Bug in Staking Validation",
        "severity": "HIGH",
        "category": "STAKE",
        "description": "Incorrect use of bitwise OR instead of logical OR in staking validation logic",
        "affected_component": "dap_chain_net_srv_stake_lock.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      },
      {
        "id": "CVE-CF-2025-STAKE-002",
        "title": "Buffer Overflow in memcmp Operations",
        "severity": "CRITICAL",
        "category": "STAKE",
        "description": "Buffer overflow vulnerability in memcmp operations without proper size validation",
        "affected_component": "dap_chain_net_srv_stake_pos_delegate.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      },
      {
        "id": "CVE-CF-2025-STAKE-003",
        "title": "Race Conditions in Hash Table Operations",
        "severity": "HIGH",
        "category": "STAKE",
        "description": "Race conditions in concurrent hash table operations without proper synchronization",
        "affected_component": "dap_chain_net_srv_stake_pos_delegate.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      },
      {
        "id": "CVE-CF-2025-STAKE-004",
        "title": "Insufficient Signature Validation",
        "severity": "HIGH",
        "category": "STAKE",
        "description": "Insufficient validation of cryptographic signatures in staking operations",
        "affected_component": "dap_chain_net_srv_stake_lock.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      },
      {
        "id": "CVE-CF-2025-STAKE-005",
        "title": "Insufficient Key Size Validation",
        "severity": "MEDIUM",
        "category": "STAKE",
        "description": "Missing validation of cryptographic key sizes in staking operations",
        "affected_component": "dap_chain_net_srv_stake_lock.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      },
      {
        "id": "CVE-CF-2025-STAKE-006",
        "title": "Time Manipulation Vulnerability",
        "severity": "CRITICAL",
        "category": "STAKE",
        "description": "Time manipulation vulnerability in staking unlock operations",
        "affected_component": "dap_chain_net_srv_stake_lock.c",
        "status": "FIXED",
        "discovery_date": "2025-09-01"
      }
    ],
    "future_templates": [
      {
        "category": "TX",
        "template": "CVE-CF-2025-TX-{SEQ}",
        "description": "Transaction processing vulnerabilities"
      },
      {
        "category": "CONSENSUS",
        "template": "CVE-CF-2025-CONSENSUS-{SEQ}",
        "description": "Consensus mechanism vulnerabilities"
      },
      {
        "category": "CRYPTO",
        "template": "CVE-CF-2025-CRYPTO-{SEQ}",
        "description": "Cryptographic vulnerabilities"
      },
      {
        "category": "NETWORK",
        "template": "CVE-CF-2025-NETWORK-{SEQ}",
        "description": "Network protocol vulnerabilities"
      },
      {
        "category": "MEMORY",
        "template": "CVE-CF-2025-MEMORY-{SEQ}",
        "description": "Memory management vulnerabilities"
      },
      {
        "category": "AUTH",
        "template": "CVE-CF-2025-AUTH-{SEQ}",
        "description": "Authentication and authorization vulnerabilities"
      }
    ]
  },
  "automated_detection_scripts": {
    "description": "Автоматизированные скрипты для поиска уязвимостей",
    "scripts": [
      {
        "name": "stake_vulnerability_scanner.py",
        "description": "Сканирование модулей стекинга на известные паттерны уязвимостей",
        "patterns": [
          "Unsafe pointer arithmetic",
          "Unchecked return values",
          "Missing input validation",
          "Race condition patterns"
        ]
      },
      {
        "name": "transaction_fuzzer.py",
        "description": "Фаззинг транзакционных функций стекинга",
        "targets": [
          "Transaction parsing functions",
          "Validation logic",
          "Condition evaluation",
          "State transition functions"
        ]
      },
      {
        "name": "memory_safety_checker.py",
        "description": "Проверка безопасности работы с памятью",
        "checks": [
          "Buffer overflow detection",
          "Use-after-free detection",
          "Double-free detection",
          "Memory leak detection"
        ]
      },
      {
        "name": "generate_cve_id.sh",
        "description": "Генерация CVE идентификаторов в правильном формате",
        "usage": "./generate_cve_id.sh [category] [description]",
        "output_format": "CVE-CF-$(date +%Y)-{CATEGORY}-{SEQ}",
        "example": "./generate_cve_id.sh STAKE 'New staking vulnerability'"
      }
    ]
  },
  "reporting": {
    "vulnerability_report_template": {
      "sections": [
        "Executive Summary",
        "Vulnerability Details",
        "Technical Analysis", 
        "Proof of Concept",
        "Impact Assessment",
        "Remediation Recommendations",
        "Timeline"
      ],
      "severity_classification": {
        "CRITICAL": "Immediate exploitation possible, severe impact",
        "HIGH": "Exploitation likely, significant impact",
        "MEDIUM": "Exploitation possible with conditions, moderate impact", 
        "LOW": "Difficult exploitation, minimal impact",
        "INFO": "Security improvement opportunity"
      }
    }
  },
  "navigation_system": {
    "purpose": "Модуль: Поиск и анализ уязвимостей с генерацией CVE ID",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/security/vulnerability_detection.json",
    "file_role": "SECURITY_MODULE",
    "related_files": [
      ".context/modules/methodologies/defi_security_audit.json",
      ".context/modules/projects/dap_sdk_project.json",
      ".context/tools/scripts/generate_cve_id.sh"
    ],
    "ai_context": "Модуль СЛК: Поиск уязвимостей в blockchain системах с генерацией CVE-CF-YYYY-CATEGORY-SEQ идентификаторов"
  },
  "dynamic_date_integration": {
    "description": "Интеграция динамической даты в CVE генерацию",
    "date_commands": {
      "current_year": "date +%Y",
      "current_date": "date +%Y-%m-%d",
      "timestamp": "date '+%Y-%m-%d %H:%M:%S'"
    },
    "auto_update_features": [
      "Автоматическое получение текущего года для CVE ID",
      "Логирование с временными метками",
      "Последовательная нумерация по годам и категориям",
      "Валидация формата CVE идентификаторов"
    ],
    "project_integration": {
      "initials": "CF",
      "full_name": "Cellframe",
      "description": "Cellframe SDK - Blockchain Framework"
    }
  }
}
