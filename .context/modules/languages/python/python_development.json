{
  "type": "universal_template_module",
  "domain": "python_development",
  "version": "2.1.0",
  "created": "2025-01-14T15:00:00Z",
  "updated": "2025-01-14T17:45:00Z",
  "template_source": "–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö Cellframe Network –∏ AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
  "navigation_system": {
    "purpose": "–®–∞–±–ª–æ–Ω —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/languages/python/python_development.json",
    "file_role": "LANGUAGE_TEMPLATE",
    "related_files": {
      ".context/manifest.json": "–ì–ª–∞–≤–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã",
      ".context/modules/languages/python/knowledge_base/dap_sdk_binding_standards.json": {
        "$ref": "#/knowledge_base/python_dap_binding_standards",
        "$file_path": ".context/modules/languages/python/knowledge_base/dap_sdk_binding_standards.json",
        "$auto_include_patterns": ["python binding", "dap sdk binding", "c extension", "ctypes", "–ø–∏—Ç–æ–Ω –±–∏–Ω–¥–∏–Ω–≥"],
        "$note": "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è Python –±–∏–Ω–¥–∏–Ω–≥–æ–≤ –¥–ª—è DAP SDK"
      }
    },
    "quick_navigation": {
      "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
      "üõ†Ô∏è CLI": ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
    },
    "usage_hint": "./slc info modules/languages/python/python_development.json –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    "ai_context": "–§–∞–π–ª –°–õ–ö —Å–∏—Å—Ç–µ–º—ã: python_development.json"
  },
  "template_info": {
    "name": "Python Development Template",
    "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω, –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é, AI/ML –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "target_projects": [
      "Cellframe Network –ø—Ä–æ–µ–∫—Ç—ã",
      "Blockchain –∏ cryptocurrency —Å–∏—Å—Ç–µ–º—ã",
      "AI/ML —Ä–µ—à–µ–Ω–∏—è –∏ –ò–ò –∞–≥–µ–Ω—Ç—ã",
      "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
      "API –∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã",
      "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
      "Data science –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    ],
    "applicability": "90%+ Python –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π"
  },
  "python_ecosystem": {
    "version_strategy": {
      "primary_versions": [
        "Python 3.10",
        "Python 3.11",
        "Python 3.12"
      ],
      "compatibility": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Python 3.8+ –¥–ª—è legacy –ø—Ä–æ–µ–∫—Ç–æ–≤",
      "recommendation": "Python 3.11+ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
      "virtual_environments": [
        "venv",
        "conda",
        "poetry",
        "pipenv"
      ]
    },
    "project_structure": {
      "modern_layout": {
        "src/project_name/": "–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞",
        "tests/": "–¢–µ—Å—Ç—ã (pytest structure)",
        "docs/": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (Sphinx/MkDocs)",
        "scripts/": "–£—Ç–∏–ª–∏—Ç—ã –∏ —Å–∫—Ä–∏–ø—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
        "configs/": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
        "data/": "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "requirements/": "–§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º",
        "pyproject.toml": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
      },
      "legacy_layout": {
        "project_name/": "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)",
        "setup.py": "Legacy packaging (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)",
        "requirements.txt": "–ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
      }
    },
    "dependency_management": {
      "poetry": {
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        "benefits": [
          "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
          "Virtual environments",
          "Packaging"
        ],
        "files": [
          "pyproject.toml",
          "poetry.lock"
        ]
      },
      "pip_tools": {
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Å pip",
        "files": [
          "requirements.in",
          "requirements.txt",
          "dev-requirements.txt"
        ],
        "workflow": "pip-compile –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ lock —Ñ–∞–π–ª–æ–≤"
      },
      "conda": {
        "description": "–î–ª—è data science –ø—Ä–æ–µ–∫—Ç–æ–≤",
        "files": [
          "environment.yml",
          "conda-lock.yml"
        ],
        "use_cases": [
          "ML/AI –ø—Ä–æ–µ–∫—Ç—ã",
          "–ù–∞—É—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
        ]
      }
    }
  },
  "cellframe_blockchain_development": {
    "core_libraries": {
      "web3_py": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Ethereum-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ —Å–µ—Ç—è–º–∏",
      "pycryptodome": "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
      "ecdsa": "Elliptic Curve Digital Signature Algorithm",
      "hashlib": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö—ç—à —Ñ—É–Ω–∫—Ü–∏–∏",
      "ed25519": "Edwards-curve Digital Signature Algorithm"
    },
    "blockchain_patterns": {
      "wallet_management": {
        "key_generation": "–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π",
        "address_derivation": "BIP32/BIP44 –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–æ—à–µ–ª—å–∫–∏",
        "signing": "–ü–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏",
        "security": "Secure memory handling –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π"
      },
      "transaction_handling": {
        "construction": "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        "broadcasting": "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–µ—Ç—å",
        "monitoring": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞",
        "error_handling": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ–µ–≤ —Å–µ—Ç–∏"
      },
      "smart_contracts": {
        "compilation": "–ö–æ–º–ø–∏–ª—è—Ü–∏—è Solidity –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
        "deployment": "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
        "interaction": "–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤",
        "event_monitoring": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–ª–æ–∫—á–µ–π–Ω–∞"
      }
    },
    "post_quantum_crypto": {
      "libraries": [
        "pqcrypto",
        "liboqs-python",
        "sphincsplus"
      ],
      "algorithms": [
        "Kyber (lattice-based)",
        "Dilithium (signatures)",
        "SPHINCS+ (hash-based)"
      ],
      "integration": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∞–º–∏"
    }
  },
  "ai_ml_development": {
    "core_frameworks": {
      "pytorch": {
        "description": "–û—Å–Ω–æ–≤–Ω–æ–π framework –¥–ª—è deep learning",
        "use_cases": [
          "Neural networks",
          "Computer vision",
          "NLP"
        ],
        "ecosystem": [
          "torchvision",
          "torchaudio",
          "transformers"
        ]
      },
      "tensorflow": {
        "description": "Google ML framework",
        "use_cases": [
          "Production ML",
          "Mobile deployment"
        ],
        "ecosystem": [
          "keras",
          "tensorflow-serving",
          "tensorboard"
        ]
      },
      "scikit_learn": {
        "description": "Classical machine learning",
        "use_cases": [
          "Data preprocessing",
          "Traditional ML",
          "Model selection"
        ]
      },
      "langchain": {
        "description": "LLM application framework",
        "use_cases": [
          "AI agents",
          "RAG systems",
          "Prompt engineering"
        ]
      }
    },
    "ai_agent_development": {
      "architecture_patterns": {
        "reactive_agents": "–ü—Ä–æ—Å—Ç—ã–µ rule-based –∞–≥–µ–Ω—Ç—ã",
        "deliberative_agents": "Planning –∏ reasoning –∞–≥–µ–Ω—Ç—ã",
        "learning_agents": "ML-based –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã",
        "multi_agent_systems": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã"
      },
      "key_components": {
        "perception": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "reasoning": "–õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π",
        "action": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π",
        "memory": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ–ø—ã—Ç–∞",
        "communication": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"
      },
      "implementation_frameworks": {
        "custom": "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Python",
        "langchain": "LLM-powered –∞–≥–µ–Ω—Ç—ã",
        "autogen": "Microsoft multi-agent framework",
        "crewai": "Collaborative AI agents"
      }
    },
    "prompt_engineering": {
      "techniques": {
        "zero_shot": "–ü—Ä—è–º—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤",
        "few_shot": "–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö",
        "chain_of_thought": "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ",
        "tree_of_thoughts": "–ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É —Ä–µ—à–µ–Ω–∏–π",
        "role_playing": "–ó–∞–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –¥–ª—è LLM"
      },
      "optimization": {
        "prompt_templates": "–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã",
        "variable_injection": "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        "validation": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤",
        "iteration": "–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤"
      },
      "evaluation": {
        "metrics": [
          "Relevance",
          "Coherence",
          "Factuality"
        ],
        "automated_testing": "A/B testing –ø—Ä–æ–º–ø—Ç–æ–≤",
        "human_evaluation": "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"
      }
    },
    "fine_tuning": {
      "approaches": {
        "full_fine_tuning": "–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏",
        "lora": "Low-Rank Adaptation - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
        "qlora": "Quantized LoRA –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π",
        "prompt_tuning": "–û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ prompt embeddings"
      },
      "data_preparation": {
        "data_collection": "–°–±–æ—Ä –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "preprocessing": "–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "augmentation": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞",
        "validation_split": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/validation/test"
      },
      "training_pipeline": {
        "hyperparameter_tuning": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        "monitoring": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è",
        "checkpointing": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π",
        "evaluation": "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"
      }
    }
  },
  "development_practices": {
    "code_quality": {
      "formatting": {
        "black": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞",
        "isort": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤",
        "pyproject.toml": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
      },
      "linting": {
        "ruff": "–ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏–Ω—Ç–µ—Ä",
        "pylint": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞",
        "mypy": "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è",
        "bandit": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–¥–∞"
      },
      "testing": {
        "pytest": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "coverage": "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏",
        "hypothesis": "Property-based testing",
        "pytest_asyncio": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"
      }
    },
    "security_practices": {
      "secrets_management": {
        "environment_variables": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
        "keyring": "–°–∏—Å—Ç–µ–º–Ω—ã–π keyring –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        "vault_integration": "HashiCorp Vault –¥–ª—è production",
        "azure_keyvault": "Azure Key Vault –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
      },
      "dependency_security": {
        "safety": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö",
        "pip_audit": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç pip –ø–∞–∫–µ—Ç–æ–≤",
        "semgrep": "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "requirements_pinning": "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
      },
      "crypto_security": {
        "secure_random": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ secrets –º–æ–¥—É–ª—è",
        "constant_time": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π",
        "memory_cleanup": "–û—á–∏—Å—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "key_derivation": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ—Ä–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"
      }
    },
    "performance_optimization": {
      "profiling": {
        "cProfile": "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä Python",
        "py_spy": "Sampling profiler –¥–ª—è production",
        "memory_profiler": "–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏",
        "line_profiler": "–ü–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
      },
      "optimization_techniques": {
        "asyncio": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "multiprocessing": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
        "numba": "JIT –∫–æ–º–ø–∏–ª—è—Ü–∏—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞",
        "cython": "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤",
        "numpy_vectorization": "–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
      }
    }
  },
  "api_microservices": {
    "web_frameworks": {
      "fastapi": {
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π API framework",
        "features": [
          "Auto docs",
          "Type hints",
          "Async support"
        ],
        "use_cases": [
          "REST APIs",
          "ML model serving",
          "Microservices"
        ]
      },
      "django": {
        "description": "Full-featured web framework",
        "features": [
          "ORM",
          "Admin panel",
          "Security"
        ],
        "use_cases": [
          "Web applications",
          "CMS",
          "Enterprise systems"
        ]
      },
      "flask": {
        "description": "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π web framework",
        "features": [
          "Flexibility",
          "Simplicity"
        ],
        "use_cases": [
          "Small APIs",
          "Prototypes",
          "Custom solutions"
        ]
      }
    },
    "api_design": {
      "rest_principles": "RESTful design patterns",
      "openapi_specification": "OpenAPI/Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
      "versioning": "API versioning strategies",
      "error_handling": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫",
      "rate_limiting": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
      "authentication": "JWT, OAuth2, API keys"
    },
    "database_integration": {
      "sqlalchemy": "ORM –¥–ª—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –ë–î",
      "alembic": "Database migrations",
      "asyncpg": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π PostgreSQL –¥—Ä–∞–π–≤–µ—Ä",
      "redis_py": "Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
      "mongodb": "NoSQL –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–µ –±–∞–∑—ã"
    }
  },
  "deployment_devops": {
    "containerization": {
      "docker": {
        "multi_stage_builds": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤",
        "python_base_images": [
          "python:3.11-slim",
          "python:3.11-alpine"
        ],
        "security": "Non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞",
        "optimization": "Layer caching, .dockerignore"
      }
    },
    "cloud_deployment": {
      "aws": {
        "lambda": "Serverless functions",
        "ecs": "Container orchestration",
        "sagemaker": "ML model deployment"
      },
      "azure": {
        "functions": "Serverless compute",
        "container_instances": "Container deployment",
        "ml_service": "Machine learning platform"
      },
      "gcp": {
        "cloud_functions": "Event-driven functions",
        "cloud_run": "Containerized applications",
        "vertex_ai": "ML/AI platform"
      }
    },
    "monitoring_observability": {
      "logging": {
        "structlog": "Structured logging",
        "loguru": "Simplified logging",
        "sentry": "Error tracking",
        "elk_stack": "Centralized logging"
      },
      "metrics": {
        "prometheus": "Metrics collection",
        "statsd": "Application metrics",
        "custom_metrics": "Business-specific metrics"
      },
      "tracing": {
        "opentelemetry": "Distributed tracing",
        "jaeger": "Trace visualization",
        "zipkin": "Distributed tracing system"
      }
    }
  },
  "project_templates": {
    "cellframe_project": {
      "structure": "src/cellframe_project/",
      "key_modules": [
        "crypto/",
        "blockchain/",
        "network/",
        "wallet/"
      ],
      "dependencies": [
        "web3",
        "pycryptodome",
        "ecdsa",
        "requests"
      ],
      "testing": "–¢–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    },
    "ai_agent": {
      "structure": "src/ai_agent/",
      "key_modules": [
        "agents/",
        "reasoning/",
        "memory/",
        "tools/"
      ],
      "dependencies": [
        "langchain",
        "openai",
        "transformers",
        "torch"
      ],
      "testing": "Unit tests + integration tests —Å LLM"
    },
    "ml_pipeline": {
      "structure": "src/ml_pipeline/",
      "key_modules": [
        "data/",
        "models/",
        "training/",
        "inference/"
      ],
      "dependencies": [
        "torch",
        "scikit-learn",
        "pandas",
        "numpy"
      ],
      "testing": "Model validation + data tests"
    },
    "python_dap_sdk": {
      "description": "Python –±–∏–Ω–¥–∏–Ω–≥–∏ –¥–ª—è DAP SDK - –Ω–∞—Ç–∏–≤–Ω—ã–µ C extensions",
      "structure": "plugins/plugin-python/python-dap/",
      "key_modules": [
        "dap/config/",
        "dap/core/",
        "dap/crypto/",
        "dap/network/",
        "dap/global_db/"
      ],
      "dependencies": [
        "native DAP SDK (embedded static)",
        "pytest",
        "pytest-cov"
      ],
      "special_requirements": {
        "c_extensions": "–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ C extensions",
        "native_bindings": "–ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DAP SDK —á–µ—Ä–µ–∑ C API",
        "cmake_build": "–°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ CMake —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º DAP SDK"
      },
      "testing_rules": {
        "critical_rule": "–¢–ï–°–¢–´ –ó–ê–ü–£–°–ö–ê–¢–¨ –¢–û–õ–¨–ö–û –ß–ï–†–ï–ó CMAKE/CTEST",
        "reason": "–ü—Ä–∏ —Å–±–æ—Ä–∫–µ —á–µ—Ä–µ–∑ CMake –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—É—Ç–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "correct_workflow": [
          "mkdir build && cd build",
          "cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON",
          "make -j$(nproc)",
          "ctest --verbose"
        ],
        "specific_test_commands": {
          "all_tests": "ctest --verbose",
          "unit_tests": "ctest -R unit --verbose",
          "integration_tests": "ctest -R integration --verbose",
          "regression_tests": "ctest -R regression --verbose"
        },
        "not_recommended": [
          "python -m pytest tests/ (–º–æ–∂–µ—Ç –Ω–µ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏)",
          "python setup.py test (–Ω–µ–ø–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞)",
          "–ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ pytest –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        ],
        "fallback_method": {
          "description": "–ï—Å–ª–∏ CTest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PYTHONPATH",
          "command": "export PYTHONPATH=$(pwd)/lib:$PYTHONPATH && python -m pytest tests/",
          "warning": "–ú–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"
        }
      },
      "module_structure": {
        "python_dap.so": "–û—Å–Ω–æ–≤–Ω–æ–π C extension –º–æ–¥—É–ª—å",
        "available_functions": "77+ —Ñ—É–Ω–∫—Ü–∏–π: config, client, server, logging, time",
        "missing_functions": "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ stream —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        "build_artifact": "lib/python_dapcpython-311-x86_64-linux-gnu.so"
      },
      "success_criteria": {
        "import_success": "import python_dap —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫",
        "config_functions": "py_dap_config_* —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã",
        "test_coverage": "Config 90%+, Core 80%+, Client/Server 70%+",
        "performance": "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è < 10 —Å–µ–∫—É–Ω–¥"
      }
    }
  },
  "best_practices": {
    "project_initialization": {
      "step_1": "poetry init –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ pyproject.toml",
      "step_2": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ pre-commit hooks",
      "step_3": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è IDE (VS Code, PyCharm)",
      "step_4": "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤",
      "step_5": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD pipeline"
    },
    "code_organization": {
      "separation_of_concerns": "–ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
      "dependency_injection": "–ò–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏",
      "configuration": "–í–Ω–µ—à–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ env –∏–ª–∏ files",
      "error_handling": "–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, graceful degradation"
    },
    "documentation": {
      "docstrings": "Google –∏–ª–∏ NumPy style docstrings",
      "type_hints": "–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ type hints",
      "readme": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
      "api_docs": "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"
    }
  },
  "mandatory_development_rules": {
    "description": "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–æ–≤ - —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–µ—É–∫–æ—Å–Ω–∏—Ç–µ–ª—å–Ω–æ",
    "pytest_testing_requirement": {
      "rule": "–í —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ Python –∑–∞–¥–∞—á–∞–º–∏ –í–°–ï–ì–î–ê –ø–∏—Å–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤ –Ω–∞ pytest",
      "implementation": {
        "parallel_development": "–°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º, –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—è –Ω–∞ –ø–æ—Ç–æ–º",
        "continuous_updates": "–û–±–Ω–æ–≤–ª—è—Ç—å –∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π",
        "coverage_target": "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 80%",
        "test_types": [
          "Unit —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤",
          "Integration —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
          "Functional —Ç–µ—Å—Ç—ã –¥–ª—è end-to-end —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
          "Edge case —Ç–µ—Å—Ç—ã –¥–ª—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –æ—à–∏–±–æ–∫"
        ]
      },
      "test_structure": {
        "directory_layout": {
          "tests/unit/": "–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª–∞—Å—Å–æ–≤",
          "tests/integration/": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
          "tests/functional/": "End-to-end —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
          "tests/fixtures/": "–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
          "conftest.py": "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pytest –∏ fixtures"
        },
        "naming_conventions": {
          "test_files": "test_*.py –∏–ª–∏ *_test.py",
          "test_functions": "test_* —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏",
          "test_classes": "Test* –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
        }
      },
      "pytest_best_practices": {
        "fixtures": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fixtures –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
        "parametrize": "pytest.mark.parametrize –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
        "markers": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å markers –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ (slow, integration, etc.)",
        "mocking": "Mock –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "assertions": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å descriptive assertions —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö"
      }
    },
    "autonomous_work_discipline": {
      "git_commit_discipline": {
        "frequency": "–†–µ–≥—É–ª—è—Ä–Ω–æ –∫–æ–º–º–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30-60 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
        "commit_messages": "–ü–æ–Ω—è—Ç–Ω—ã–µ commit messages –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Å—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π",
        "incremental_commits": "–ö–æ–º–º–∏—Ç–∏—Ç—å –¥–∞–∂–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        "branch_strategy": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å feature branches –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
        "before_commit_checklist": [
          "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç",
          "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º (ruff, pylint)",
          "–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–∫—Ä—ã—Ç —Ç–µ—Å—Ç–∞–º–∏",
          "–û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è API"
        ]
      },
      "quality_self_assessment": {
        "critical_self_review": "–ö—Ä–∏—Ç–∏—á–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ –∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "code_review_self": "–°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –∫–æ–¥ –∫–æ–ª–ª–µ–≥–∏",
        "testing_thoroughness": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ 'happy path', –Ω–æ –∏ edge cases –∏ error scenarios",
        "documentation_completeness": "–û–±–Ω–æ–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–æ–¥–æ–º",
        "performance_considerations": "–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π"
      },
      "autonomous_decision_making": {
        "self_sufficiency_principle": "–°—Ç–∞—Ä–∞—Ç—å—Å—è –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
        "research_first": "–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∫–æ–¥, –ø—Ä–∏–º–µ—Ä—ã",
        "experiment_and_validate": "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é –∏ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π",
        "document_decisions": "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è",
        "when_to_escalate": {
          "requirements_ambiguity": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–¥–µ–ª–∫–µ",
          "architectural_impact": "–†–µ—à–µ–Ω–∏—è —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏",
          "security_concerns": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
          "api_breaking_changes": "–ò–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API",
          "resource_constraints": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏/—Ä–µ—Å—É—Ä—Å–∞–º, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ"
        },
        "escalation_process": {
          "context_preparation": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
          "options_analysis": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è —Å –ø–ª—é—Å–∞–º–∏/–º–∏–Ω—É—Å–∞–º–∏",
          "risk_assessment": "–û—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞",
          "specific_questions": "–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –Ω–µ –æ–±—â–∏–µ '—á—Ç–æ –¥–µ–ª–∞—Ç—å?'"
        }
      }
    },
    "code_quality_enforcement": {
      "linting_requirements": {
        "ruff": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ruff –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞",
        "mypy": "–í–∫–ª—é—á–∏—Ç—å mypy –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏",
        "bandit": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "pre_commit": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å pre-commit hooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
      },
      "testing_standards": {
        "coverage_minimum": "–ú–∏–Ω–∏–º—É–º 80% –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏",
        "test_speed": "Unit —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è < 100ms –∫–∞–∂–¥—ã–π",
        "integration_tests": "Integration —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
        "continuous_testing": "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞"
      },
      "documentation_requirements": {
        "docstrings": "–í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å docstrings",
        "type_hints": "100% –ø–æ–∫—Ä—ã—Ç–∏–µ type hints –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API",
        "readme_updates": "–û–±–Ω–æ–≤–ª—è—Ç—å README –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        "changelog": "–í–µ—Å—Ç–∏ CHANGELOG.md –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
      }
    }
  },
  "success_metrics": {
    "code_quality": "Ruff score > 9.0, mypy –±–µ–∑ –æ—à–∏–±–æ–∫",
    "test_coverage": "> 85% –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏",
    "performance": "API response time < 200ms",
    "security": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ bandit –∏ safety",
    "maintainability": "–õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
  }
}