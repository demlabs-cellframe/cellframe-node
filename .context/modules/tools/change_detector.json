{
  "name": "Детектор изменений СЛК",
  "version": "1.0.0",
  "category": "tools",
  "description": "Система обнаружения и анализа изменений в структуре СЛК для генерации пакетов обновлений",
  "created": "2025-01-14",
  "author": "Саморазвитие СЛК - Система эволюции",
  "tags": [
    "change-detection",
    "evolution",
    "diff",
    "git-like",
    "versioning"
  ],
  "metadata": {
    "complexity": "средняя",
    "время_реализации": "2-3 дня",
    "целевая_аудитория": "система_слк_evolution",
    "требования": [
      "hashlib",
      "json",
      "pathlib",
      "datetime"
    ]
  },
  "назначение": {
    "описание": "Обнаружение всех изменений в структуре СЛК для создания пакетов синхронизации между независимыми копиями",
    "интеграция_с": [
      "modules/tools/slc_evolution_export.json",
      "modules/tools/slc_evolution_import.json"
    ],
    "выходные_данные": "Детальный манифест изменений с метаданными и контрольными суммами"
  },
  "типы_изменений": {
    "новые_файлы": {
      "описание": "Файлы добавленные с момента последнего экспорта",
      "паттерны": [
        "modules/**/*.json",
        "tasks/**/*.json",
        "tools/**/*.py",
        "docs/**/*.md",
        "context/**/*.json"
      ],
      "исключения": [
        ".slc/**/*",
        "**/.git/**/*",
        "**/node_modules/**/*",
        "**/__pycache__/**/*"
      ]
    },
    "измененные_файлы": {
      "описание": "Файлы с модификациями содержимого",
      "алгоритм_сравнения": "SHA-256 hash сравнение",
      "хранение_diff": "JSON-based semantic diff для структурированных файлов",
      "fallback": "Полная замена для бинарных или неструктурированных файлов"
    },
    "переименованные_файлы": {
      "описание": "Файлы с изменившимися путями",
      "алгоритм_обнаружения": "Content similarity + hash matching",
      "порог_совпадения": "85% содержимого идентично"
    },
    "удаленные_файлы": {
      "описание": "Файлы присутствовавшие в базовой версии но отсутствующие сейчас",
      "обработка": "Информация для удаления в целевой системе"
    },
    "метаданные_изменения": {
      "описание": "Изменения в manifest.json, navigation patterns, intelligent_loading",
      "критичность": "HIGH - требуют особого внимания при применении"
    }
  },
  "алгоритм_обнаружения": {
    "этап_1_инициализация": {
      "создание_baseline": "Снимок текущего состояния при первом запуске",
      "файл_состояния": ".slc/evolution_state.json",
      "структура_baseline": {
        "version": "версия_СКС",
        "timestamp": "время_создания_baseline",
        "files_registry": {
          "file_path": {
            "hash": "SHA-256_hash",
            "size": "размер_в_байтах",
            "modified": "timestamp_последней_модификации",
            "type": "json|python|markdown|binary"
          }
        }
      }
    },
    "этап_2_сканирование": {
      "обход_файловой_системы": "Рекурсивный обход с учетом паттернов включения/исключения",
      "вычисление_хешей": "SHA-256 для всех отслеживаемых файлов",
      "анализ_метаданных": "Размер, время модификации, тип файла"
    },
    "этап_3_сравнение": {
      "новые_файлы": "Файлы в current но отсутствующие в baseline",
      "измененные": "Файлы с различающимися hash",
      "переименованные": "Hash совпадает, path различается",
      "удаленные": "Файлы в baseline но отсутствующие в current"
    },
    "этап_4_семантический_анализ": {
      "json_структуры": "Deep diff для JSON файлов с сохранением структуры",
      "python_код": "AST-based анализ для обнаружения функциональных изменений",
      "зависимости": "Анализ imports и cross-references"
    }
  },
  "семантический_diff": {
    "для_json_файлов": {
      "алгоритм": "Recursive deep comparison с типизацией изменений",
      "типы_операций": [
        "added: новые ключи/значения",
        "removed: удаленные ключи/значения",
        "modified: измененные значения",
        "moved: переименованные ключи"
      ],
      "формат_вывода": {
        "path": "JSONPath к измененному элементу",
        "operation": "тип_операции",
        "old_value": "предыдущее_значение",
        "new_value": "новое_значение"
      }
    },
    "для_python_файлов": {
      "анализ_ast": "Парсинг в Abstract Syntax Tree для структурного сравнения",
      "отслеживаемые_элементы": [
        "class_definitions",
        "function_definitions",
        "imports",
        "global_variables",
        "decorators"
      ],
      "игнорируемые_изменения": [
        "whitespace",
        "comments",
        "docstrings (опционально)"
      ]
    }
  },
  "система_версионирования": {
    "схема_версий": "MAJOR.MINOR.PATCH + evolution_id",
    "evolution_id": "UUID для уникальной идентификации каждого набора изменений",
    "совместимость": {
      "major_changes": "Breaking changes требующие ручного разрешения",
      "minor_changes": "Новая функциональность с обратной совместимостью",
      "patch_changes": "Исправления и улучшения"
    },
    "теги_изменений": [
      "enhancement: улучшения функциональности",
      "bugfix: исправления ошибок",
      "security: улучшения безопасности",
      "performance: оптимизации производительности",
      "breaking: изменения ломающие совместимость"
    ]
  },
  "производительность": {
    "оптимизации": {
      "инкрементальное_сканирование": "Сканирование только измененных директорий",
      "кэширование_хешей": "Повторное использование hash для неизмененных файлов",
      "параллельная_обработка": "Многопоточное вычисление hash для больших файлов",
      "ленивая_загрузка": "Загрузка baseline только при необходимости"
    },
    "ограничения": {
      "максимальный_размер_файла": "100MB для отслеживания",
      "таймаут_операций": "30 секунд на операцию",
      "memory_limit": "Не более 500MB использования RAM"
    }
  },
  "безопасность": {
    "валидация_путей": "Проверка на path traversal атаки",
    "контрольные_суммы": "SHA-256 для целостности данных",
    "исключение_чувствительных_данных": [
      "**/.env",
      "**/.secrets",
      "**/private_keys/**/*",
      "**/*.pem",
      "**/*.key"
    ],
    "логирование": "Audit trail всех операций обнаружения изменений"
  },
  "формат_вывода": {
    "change_manifest": {
      "version": "версия_формата_манифеста",
      "source_version": "версия_источника",
      "target_versions": [
        "совместимые_версии"
      ],
      "evolution_id": "UUID_набора_изменений",
      "timestamp": "время_создания",
      "summary": {
        "files_added": "количество_новых_файлов",
        "files_modified": "количество_измененных_файлов",
        "files_deleted": "количество_удаленных_файлов",
        "files_renamed": "количество_переименованных_файлов"
      },
      "changes": [
        {
          "type": "added|modified|deleted|renamed",
          "path": "путь_к_файлу",
          "old_path": "старый_путь_для_renamed",
          "content_type": "json|python|markdown|binary",
          "size": "размер_файла",
          "hash": "SHA-256_hash",
          "diff": "семантический_diff_или_null",
          "metadata": "дополнительные_метаданные"
        }
      ]
    }
  },
  "интеграция_с_cli": {
    "команда_scan": "slc_cli.py scan-changes --output changes.json",
    "команда_diff": "slc_cli.py diff --from baseline --to current",
    "команда_baseline": "slc_cli.py create-baseline --force",
    "опции": {
      "--включить": "Дополнительные паттерны файлов для отслеживания",
      "--исключить": "Паттерны файлов для игнорирования",
      "--output": "Файл для сохранения результатов",
      "--format": "json|human|summary"
    }
  },
  "план_реализации": {
    "этап_1_базовый_детектор": [
      "☐ Создание ChangeDetector класса",
      "☐ Система baseline и file registry",
      "☐ Базовое обнаружение новых/измененных/удаленных файлов",
      "☐ SHA-256 hashing и сравнение"
    ],
    "этап_2_семантический_анализ": [
      "☐ JSON deep diff алгоритм",
      "☐ Python AST parsing для структурного анализа",
      "☐ Система тегирования типов изменений",
      "☐ Обнаружение переименований"
    ],
    "этап_3_интеграция": [
      "☐ CLI команды для управления изменениями",
      "☐ Интеграция с export/import системой",
      "☐ Оптимизация производительности",
      "☐ Тестирование и валидация"
    ]
  },
  "критерии_успеха": {
    "точность_обнаружения": "> 99% корректно идентифицированных изменений",
    "скорость_сканирования": "< 5 секунд для типичной структуры СКС",
    "использование_памяти": "< 100MB для обработки стандартной СКС",
    "совместимость": "Работа с различными версиями СКС"
  },
  "navigation_system": {
    "purpose": "Инструмент разработки",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/tools/change_detector.json",
    "file_role": "TOOLS_TEMPLATE",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "🏠 Главная": ".context/manifest.json - главный навигатор системы",
      "🛠️ CLI": ".context/tools/scripts/slc_cli.py - автоматизация"
    },
    "usage_hint": "./slc info modules/tools/change_detector.json для подробной информации",
    "ai_context": "Файл СЛК системы: change_detector.json"
  }
}