{
  "project_id": "cellframe_stage_env",
  "type": "testing_infrastructure",
  "domain": "testing",
  "status": "active",
  "created": "2025-10-24T00:00:00Z",
  
  "title": "Cellframe Stage Environment",
  "description": "Docker-based testing infrastructure for Cellframe Node with YAML scenario support, Python/Bash scripting, and network topology management",
  
  "overview": {
    "purpose": "Provides isolated, reproducible testing environment for Cellframe Node development",
    "key_features": [
      "Multi-node network simulation (up to 20 nodes)",
      "Docker Compose orchestration",
      "YAML-based test scenarios with Python/Bash support",
      "Automatic certificate generation and management",
      "Health checking and monitoring",
      "Artifact collection (logs, core dumps, reports)"
    ],
    "location": "tests/stage-env/",
    "repository": "https://gitlab.demlabs.net/cellframe/cellframe-stage-env.git"
  },
  
  "architecture": {
    "components": [
      {
        "name": "CLI Interface",
        "file": "stage_env.py",
        "description": "Main entry point with Typer CLI commands"
      },
      {
        "name": "Network Manager",
        "path": "src/network/",
        "description": "Network topology management, node lifecycle"
      },
      {
        "name": "Docker Manager",
        "path": "src/docker/",
        "description": "Docker Compose generation and container management"
      },
      {
        "name": "Config Generator",
        "path": "src/config/",
        "description": "Node configuration generation from templates"
      },
      {
        "name": "Certificate Manager",
        "path": "src/certs/",
        "description": "Certificate generation (C utility wrapper)"
      },
      {
        "name": "Scenario System",
        "path": "src/scenarios/",
        "description": "YAML scenario parsing and execution with Python/Bash support"
      },
      {
        "name": "Artifacts Manager",
        "path": "src/utils/artifacts.py",
        "description": "Log collection, crash dumps, test reports"
      }
    ]
  },
  
  "scenario_language": {
    "format": "YAML",
    "supported_steps": [
      "cli: Execute CLI command on node",
      "rpc: Execute JSON-RPC call",
      "python: Execute Python code with context access",
      "bash: Execute Bash script on node",
      "wait: Pause execution",
      "loop: Repeat steps"
    ],
    "supported_checks": [
      "cli: Verify CLI output",
      "rpc: Verify RPC result",
      "python: Python assertions",
      "bash: Bash exit code check"
    ],
    "features": [
      "Variable substitution {{var}}",
      "Include system for reusable components",
      "Extract patterns from output",
      "Common library in stage-env/tests/common/"
    ]
  },
  
  "configuration": {
    "main_config": "stage-env.cfg",
    "sections": {
      "network": "Network name and consensus type",
      "topology": "Node counts (root/master/full)",
      "paths": "Cache, artifacts, log directories",
      "logging": "Log level and retention",
      "artifacts": "Collection settings",
      "timeouts": "Startup and health check timeouts",
      "node_source": "Cellframe-node package source (URL/local/repo)"
    },
    "path_resolution": "All paths resolved from config file location"
  },
  
  "directory_structure": {
    "config/": "Configuration templates and topologies",
    "src/": "Python source code",
    "tests/": "Base tests and common components",
    "testing/": "Runtime directories (cache, artifacts, logs)",
    "docker/": "Dockerfile and entrypoint scripts"
  },
  
  "key_files": [
    {
      "file": "stage_env.py",
      "purpose": "Main CLI with commands: start, stop, restart, clean, run-tests, snapshots"
    },
    {
      "file": "src/scenarios/schema.py",
      "purpose": "Pydantic models for YAML scenarios"
    },
    {
      "file": "src/scenarios/executor.py",
      "purpose": "Scenario execution engine with Python/Bash support"
    },
    {
      "file": "src/network/manager.py",
      "purpose": "Network lifecycle management"
    },
    {
      "file": "src/docker/compose.py",
      "purpose": "Docker Compose file generation"
    }
  ],
  
  "usage_patterns": {
    "start_network": "./stage-env --config ../stage-env.cfg start --wait",
    "run_tests": "./stage-env --config ../stage-env.cfg run-tests e2e/wallet/",
    "clean_all": "./stage-env clean --all",
    "snapshot_list": "./stage-env snapshots list"
  },
  
  "integration_points": [
    "Used by tests/run.sh for CI/CD",
    "Integrates with local cellframe-node builds",
    "Can use custom .deb packages",
    "Supports multiple network topologies",
    "Compatible with pytest and YAML scenarios"
  ],
  
  "recent_improvements": [
    "✅ Python and Bash blocks in scenarios",
    "✅ Extended logging with command/response capture",
    "✅ 48 E2E and functional test scenarios",
    "✅ Common components library",
    "✅ Health checker with proper container names",
    "✅ Genesis initialization from containers",
    "✅ Unified path resolution"
  ],
  
  "standards_compliance": [
    "Follows DAP SDK coding standards",
    "Python: Black formatting, type hints",
    "YAML: Consistent indentation and structure",
    "Logging: Structured logging with structlog",
    "Error handling: Comprehensive with context"
  ],
  
  "future_enhancements": [
    "SquashFS + OverlayFS optimization (10x faster startup)",
    "Docker image customization (packages, scripts)",
    "Custom deb repositories support",
    "Additional nodes in scenarios",
    "Performance metrics and benchmarking"
  ]
}

