{
  "name": "Anthropic API Code Examples",
  "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Claude 4 —Å SLC Agent",
  "version": "1.0.0",
  "created_at": "2025-01-27T19:35:00Z",
  "category": "code_examples",
  "tags": [
    "anthropic",
    "claude-4",
    "python",
    "async",
    "examples"
  ],
  "basic_integration": {
    "description": "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
    "sync_example": "import os\nfrom anthropic import Anthropic\n\nclass ClaudeClient:\n    def __init__(self):\n        self.client = Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))\n        self.model = 'claude-sonnet-4-0'\n    \n    def send_message(self, content, system_prompt=None):\n        try:\n            response = self.client.messages.create(\n                model=self.model,\n                max_tokens=1024,\n                temperature=0.7,\n                system=system_prompt,\n                messages=[{'role': 'user', 'content': content}]\n            )\n            return response.content[0].text\n        except Exception as e:\n            return f'–û—à–∏–±–∫–∞: {e}'",
    "async_example": "import os\nimport asyncio\nfrom anthropic import AsyncAnthropic\n\nclass AsyncClaudeClient:\n    def __init__(self):\n        self.client = AsyncAnthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))\n        self.model = 'claude-sonnet-4-0'\n        self.conversation_history = []\n    \n    async def send_message(self, content: str, system_prompt=None) -> str:\n        self.conversation_history.append({'role': 'user', 'content': content})\n        \n        try:\n            response = await self.client.messages.create(\n                model=self.model,\n                max_tokens=1024,\n                temperature=0.7,\n                system=system_prompt,\n                messages=self.conversation_history\n            )\n            \n            assistant_message = response.content[0].text\n            self.conversation_history.append({'role': 'assistant', 'content': assistant_message})\n            \n            return assistant_message\n        except Exception as e:\n            return f'–û—à–∏–±–∫–∞ Claude API: {e}'"
  },
  "streaming_integration": {
    "description": "–ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–ª—è —Ä–µ–∞–ª—Ç–∞–π–º —á–∞—Ç–∞",
    "streaming_example": "from anthropic import AsyncAnthropic\nfrom typing import AsyncGenerator\n\nclass StreamingClaudeClient:\n    def __init__(self):\n        self.client = AsyncAnthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))\n        self.model = 'claude-sonnet-4-0'\n    \n    async def stream_response(self, content: str) -> AsyncGenerator[str, None]:\n        try:\n            async with self.client.messages.stream(\n                model=self.model,\n                max_tokens=1024,\n                temperature=0.7,\n                messages=[{'role': 'user', 'content': content}]\n            ) as stream:\n                async for text in stream.text_stream:\n                    yield text\n        except Exception as e:\n            yield f'–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞: {e}'"
  },
  "error_handling": {
    "description": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∞",
    "robust_client": "import asyncio\nimport logging\nfrom anthropic import AsyncAnthropic, APIError, RateLimitError\n\nclass RobustClaudeClient:\n    def __init__(self, max_retries: int = 3):\n        self.client = AsyncAnthropic(\n            api_key=os.environ.get('ANTHROPIC_API_KEY'),\n            max_retries=max_retries\n        )\n        self.model = 'claude-sonnet-4-0'\n        self.logger = logging.getLogger(__name__)\n    \n    async def send_message_with_retry(self, content: str, retry_count: int = 0) -> str:\n        try:\n            response = await self.client.messages.create(\n                model=self.model,\n                max_tokens=1024,\n                temperature=0.7,\n                messages=[{'role': 'user', 'content': content}]\n            )\n            return response.content[0].text\n            \n        except RateLimitError as e:\n            if retry_count < 3:\n                wait_time = 2 ** retry_count\n                await asyncio.sleep(wait_time)\n                return await self.send_message_with_retry(content, retry_count + 1)\n            return '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'\n            \n        except Exception as e:\n            self.logger.error(f'API error: {e}')\n            return f'–û—à–∏–±–∫–∞: {e}'"
  },
  "slc_integration": {
    "description": "–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SLC Agent",
    "slc_claude_client": "class SLCClaudeIntegration:\n    def __init__(self):\n        self.client = AsyncAnthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))\n        self.model = 'claude-sonnet-4-0'\n        self.system_prompt = '''–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SLC Agent.\n        –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ SLC —Å–∏—Å—Ç–µ–º—ã,\n        –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏—è, –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.'''\n    \n    async def process_user_message(self, message: str) -> dict:\n        try:\n            response = await self.client.messages.create(\n                model=self.model,\n                max_tokens=1024,\n                temperature=0.7,\n                system=self.system_prompt,\n                messages=[{'role': 'user', 'content': message}]\n            )\n            \n            return {\n                'success': True,\n                'response': response.content[0].text,\n                'intent': await self._analyze_intent(message)\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e),\n                'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'\n            }\n    \n    async def _analyze_intent(self, message: str) -> dict:\n        analysis_prompt = f'''–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:\n        1. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ\n        2. –ù—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n        3. –ö–∞–∫–∏–µ SLC –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å\n        \n        –°–æ–æ–±—â–µ–Ω–∏–µ: {message}'''\n        \n        try:\n            response = await self.client.messages.create(\n                model=self.model,\n                max_tokens=200,\n                temperature=0.3,\n                messages=[{'role': 'user', 'content': analysis_prompt}]\n            )\n            return {'analysis': response.content[0].text}\n        except:\n            return {'analysis': '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
  },
  "navigation_system": {
    "purpose": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/projects/slc_agent/anthropic_code_examples.json",
    "file_role": "PROJECT_TEMPLATE",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
      "üõ†Ô∏è CLI": ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
    },
    "usage_hint": "./slc info modules/projects/slc_agent/anthropic_code_examples.json –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    "ai_context": "–§–∞–π–ª –°–õ–ö —Å–∏—Å—Ç–µ–º—ã: anthropic_code_examples.json"
  }
}