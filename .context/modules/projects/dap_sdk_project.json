{
  "type": "specialized_template_module",
  "domain": "dap_sdk_project",
  "version": "2.1.0",
  "created": "2025-01-14T19:30:00Z",
  "updated": "2025-01-14T19:30:00Z",
  "imported_from": "context-old v2.0",
  "template_source": "–î–∞–º–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ DAP SDK (.dumps/dap-sdk.17816.0/)",
  "navigation_system": {
    "purpose": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/modules/projects/dap_sdk_project.json",
    "file_role": "PROJECT_TEMPLATE",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "üè† –ì–ª–∞–≤–Ω–∞—è": ".context/manifest.json - –≥–ª–∞–≤–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
      "üõ†Ô∏è CLI": ".context/tools/scripts/slc_cli.py - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"
    },
    "usage_hint": "./slc info modules/projects/dap_sdk_project.json –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    "ai_context": "–§–∞–π–ª –°–õ–ö —Å–∏—Å—Ç–µ–º—ã: dap_sdk_project.json"
  },
  "template_info": {
    "name": "DAP SDK / Cellframe Blockchain Development",
    "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
    "version": "2.1.0",
    "domain": "blockchain_cryptography",
    "specialization": "post_quantum_crypto",
    "applicability": "Production-ready –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
    "target_projects": [
      "Decentralized Application Platform (DAP)",
      "Post-quantum blockchain networks",
      "Quantum-resistant multi-signature systems",
      "High-performance cryptographic libraries",
      "Cross-platform C applications"
    ]
  },
  "project_identity": {
    "full_name": "DAP SDK",
    "description": "Decentralized Application Platform Software Development Kit with quantum-resistant cryptography",
    "primary_languages": [
      "C",
      "C++"
    ],
    "architecture": "Modular post-quantum blockchain platform",
    "license": "Cellframe License",
    "target_platforms": [
      "Linux",
      "macOS",
      "Windows"
    ]
  },
  "legacy_knowledge": {
    "source": "context-old v2.0 - Production-tested expertise",
    "chipmunk_optimization": {
      "algorithm": "Lattice-based multi-signature scheme",
      "status": "‚úÖ PRODUCTION READY - 100% test pass rate",
      "phase_1": "Hash function optimization (secp256k1_sha256 integration)",
      "phase_2": "Vectorization infrastructure (block processing 4/8 elements)",
      "phase_3": "Aggressive SIMD optimization (AVX2/NEON target)",
      "performance_baselines": {
        "key_generation": "310ms per signer (baseline)",
        "signing": "32.8ms per signature",
        "throughput": "2.3 signatures/second",
        "target_improvement": "3-5x performance boost via SIMD"
      }
    },
    "post_quantum_suite": {
      "primary": "Chipmunk (lattice-based multi-signature)",
      "supporting": [
        "Kyber (KEM)",
        "Dilithium (signatures)",
        "Falcon (compact signatures)",
        "MSRLN (key exchange)",
        "SPHINCS+ (hash-based)"
      ],
      "philosophy": "Post-quantum algorithms ALWAYS have priority over classical"
    }
  },
  "architecture": {
    "core_modules": {
      "crypto": {
        "description": "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
        "focus": "Post-quantum cryptography implementation",
        "key_algorithms": [
          "Chipmunk",
          "Kyber",
          "Dilithium",
          "Falcon"
        ],
        "classical_deprecated": [
          "ECDSA",
          "RSA - compatibility only"
        ]
      },
      "core": {
        "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞",
        "components": [
          "API framework",
          "Memory management",
          "Error handling"
        ]
      },
      "net": {
        "description": "–°–µ—Ç–µ–≤—ã–µ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
        "features": [
          "HTTP server/client",
          "JSON-RPC",
          "P2P communication"
        ]
      },
      "global_db": {
        "description": "–°–∏—Å—Ç–µ–º–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
        "support": "SQLite (stable), PostgreSQL (partial)"
      },
      "io": {
        "description": "–í–≤–æ–¥/–≤—ã–≤–æ–¥ –∏ —Å–æ–±—ã—Ç–∏—è",
        "status": "Core functionality working"
      }
    },
    "build_system": {
      "primary": "CMake",
      "configurations": {
        "debug": "build_debug/ - Debug build with symbols",
        "release": "build.release/ - Optimized release build",
        "test": "build_test/ - Test configuration with full suite",
        "ci": "build_ci/ - CI/CD pipeline build",
        "asan": "build_asan/ - AddressSanitizer for memory debugging"
      }
    }
  },
  "development_environment": {
    "supported_platforms": [
      "macOS",
      "Linux",
      "Windows"
    ],
    "primary_languages": [
      "C",
      "C++"
    ],
    "build_system": "CMake",
    "testing_framework": "Custom DAP test framework",
    "profiling_strategy": {
      "macos": "Release builds + integrated micro-benchmarks",
      "linux": "Callgrind profiling with RelWithDebInfo builds"
    },
    "quality_assurance": {
      "test_suites": [
        "crypto-test",
        "core-test",
        "net-test"
      ],
      "crypto_status": "‚úÖ 100% PASS - Production ready",
      "core_status": "‚úÖ 100% PASS - Stable",
      "net_status": "‚ö†Ô∏è WARNINGS - Functionally stable"
    }
  },
  "security_framework": {
    "post_quantum_priority": {
      "rule": "–ü–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –í–°–ï–ì–î–ê –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
      "rationale": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —É–≥—Ä–æ–∑–µ –≤–∞–∂–Ω–µ–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "policy": "Chipmunk, Kyber, MSRLN - –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è production"
    },
    "security_practices": {
      "memory_management": "Always zero sensitive memory before freeing",
      "constant_time_ops": "Constant-time comparison for sensitive data",
      "secure_random": "Use DAP SDK random functions, not system rand()",
      "no_openssl_policy": "–°—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ '–ù–ï–¢ OpenSSL' - —Ç–æ–ª—å–∫–æ DAP SDK –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"
    }
  },
  "performance_optimization": {
    "methodology": "3-phase optimization strategy",
    "current_bottlenecks": {
      "ntt_operations": "55.3% of total runtime in Chipmunk",
      "memory_allocation": "chipmunk_keypair: 52KB heap allocation",
      "logging_overhead": "log_it() runtime overhead",
      "modular_arithmetic": "Barrett reduction vs compiler % optimization"
    },
    "optimization_techniques": {
      "simd_vectorization": "AVX2/NEON block processing 4/8 elements",
      "memory_optimization": "Stack allocation vs heap for temporary data",
      "algorithm_tuning": "Manual Barrett reduction 2.4x faster than compiler",
      "cache_optimization": "Memory layout optimization for hot paths"
    },
    "benchmarking": {
      "framework": "Integrated micro-benchmarks",
      "environments": "Apple Silicon M-series baseline",
      "regression_testing": "Continuous performance monitoring"
    }
  },
  "project_structure": {
    "directories": {
      "src/crypto/": "Post-quantum cryptographic implementations",
      "src/core/": "Framework core components",
      "src/net/": "Network and communication layer",
      "test/": "Test suites and benchmarks",
      "build_*/": "Build configurations",
      "docs/": "Technical documentation"
    },
    "key_files": {
      "CMakeLists.txt": "Main build configuration",
      "crypto/src/chipmunk/": "Primary Chipmunk implementation",
      "crypto/test/crypto/": "Crypto test suite",
      "README.md": "Project overview and setup"
    }
  },
  "deployment_readiness": {
    "production_status": {
      "core_crypto": "‚úÖ PRODUCTION READY",
      "chipmunk_specific": "‚úÖ PRODUCTION READY - 100% test pass rate",
      "database": "‚úÖ READY (SQLite), ‚ö†Ô∏è PostgreSQL needs dependency",
      "networking": "‚úÖ READY (warnings only)",
      "overall_status": "‚úÖ CORE DEPLOYMENT READY"
    },
    "next_milestones": [
      "Complete Chipmunk SIMD optimization (Phase 3)",
      "Achieve 3-5x performance improvements",
      "Platform-specific optimizations",
      "Security audit completion"
    ]
  },
  "template_usage": {
            "create_command": "slc_cli.py create modules/projects/dap_sdk_project.json my_blockchain_app",
    "generated_structure": [
      "CMakeLists.txt with DAP SDK configuration",
      "src/crypto/ with post-quantum algorithm stubs",
      "src/core/ with framework foundation",
      "test/ with crypto test framework",
      "docs/ with DAP SDK documentation templates"
    ],
    "next_steps": [
      "Configure post-quantum algorithm selection",
      "Set up cross-platform build system",
      "Implement performance benchmarking",
      "Add security validation tests"
    ]
  },
  "integration_points": {
    "related_templates": {
      "performance_optimization": "methodologies/performance_optimization.json",
      "c_development": "languages/c/c_development.json",
      "cryptography": "projects/cryptography_project.json"
    },
    "suggested_workflow": [
      "1. Generate DAP SDK project structure",
      "2. Load performance optimization methodology",
      "3. Apply C/C++ system programming patterns",
      "4. Implement crypto-specific optimizations"
    ]
  },
  "core_philosophy": {
    "post_quantum_priority": {
      "rule": "–ü–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –í–°–ï–ì–î–ê –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
      "rationale": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —É–≥—Ä–æ–∑–µ –≤–∞–∂–Ω–µ–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "policy": "Chipmunk, Kyber, MSRLN - –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è production"
    },
    "security_first": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "no_openssl_policy": "–°—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ '–ù–ï–¢ OpenSSL' - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ DAP SDK –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é",
    "quantum_resistance": "–í—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤—ã–º–∏"
  },
  "current_development_focus": {
    "primary_task": "Chipmunk Performance Optimization",
    "current_phase": "PHASE 2 - VECTORIZATION OPTIMIZATIONS",
    "progress": "25% - –≥–æ—Ç–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è Phase 3",
    "priority": "HIGH",
    "description": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Chipmunk –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç–∏",
    "optimization_roadmap": {
      "completed_phases": [
        "PHASE 1: Hash function optimization (secp256k1_sha256)",
        "Static inline critical functions",
        "DEBUG_MORE disabled by default",
        "NTT vectorization infrastructure",
        "Manual Barrett reduction implementation"
      ],
      "current_phase_details": {
        "focus": "Vectorization optimizations for NTT operations",
        "target_improvement": "2-3x performance boost",
        "key_components": [
          "NTT s1: 20.1%",
          "NTT s0: 19.4%",
          "InvNTT v0: 15.8%"
        ]
      },
      "next_phase": "PHASE 3: Aggressive SIMD optimization",
      "future_targets": [
        "3-5x performance boost",
        "AVX2/NEON vectorization",
        "cache optimization"
      ]
    }
  },
  "module_architecture": {
    "crypto": {
      "description": "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
      "status": "‚úÖ STABLE - 100% PASS, Chipmunk production ready",
      "priority": "CRITICAL",
      "algorithms": {
        "post_quantum": {
          "chipmunk": "Lattice-based multi-signature scheme - PRIMARY FOCUS",
          "kyber": "Post-quantum key encapsulation mechanism",
          "dilithium": "Lattice-based digital signatures",
          "falcon": "Lattice-based signatures",
          "msrln": "Microsoft Research lattice-based cryptography",
          "sphincsplus": "Hash-based signatures"
        },
        "classical_deprecated": {
          "ecdsa": "For compatibility only - marked deprecated",
          "rsa": "For compatibility only - marked deprecated"
        }
      }
    },
    "core": {
      "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞",
      "status": "‚úÖ STABLE - 100% PASS",
      "components": [
        "Framework core",
        "Memory management",
        "Threading",
        "Utilities"
      ]
    },
    "net": {
      "description": "–°–µ—Ç–µ–≤—ã–µ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
      "status": "‚ö†Ô∏è WARNINGS - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω",
      "components": [
        "HTTP server",
        "JSON-RPC",
        "P2P networking",
        "Encryption services"
      ]
    },
    "global_db": {
      "description": "–°–∏—Å—Ç–µ–º–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö",
      "status": "‚ö†Ô∏è PARTIAL - SQLite OK, PostgreSQL needs dependency",
      "components": [
        "SQLite backend",
        "PostgreSQL backend",
        "Data serialization"
      ]
    },
    "io": {
      "description": "–í–≤–æ–¥/–≤—ã–≤–æ–¥ –∏ —Å–æ–±—ã—Ç–∏—è",
      "status": "‚ö†Ô∏è WARNINGS - core functionality working",
      "components": [
        "Event system",
        "File I/O",
        "Network I/O"
      ]
    }
  },
  "build_configurations": {
    "primary_platform": "macOS darwin 24.5.0",
    "build_system": "CMake",
    "configurations": {
      "debug": {
        "path": "build_debug/",
        "description": "Debug build with symbols",
        "usage": "Development and debugging"
      },
      "release": {
        "path": "build.release/",
        "description": "Optimized release build",
        "usage": "Performance testing and production"
      },
      "test": {
        "path": "build_test/",
        "description": "Test configuration",
        "usage": "Running test suites"
      },
      "ci": {
        "path": "build_ci/",
        "description": "CI/CD pipeline build",
        "usage": "Continuous integration"
      },
      "asan": {
        "path": "build_asan/",
        "description": "AddressSanitizer build",
        "usage": "Memory error detection"
      }
    }
  },
  "performance_context": {
    "chipmunk_baseline": {
      "environment": "Apple Silicon M-series, release builds",
      "metrics": {
        "key_generation": "413ms per signer",
        "signing": "41ms per signature",
        "throughput": "1.0 signatures/second"
      },
      "bottlenecks": {
        "ntt_operations": "55.3% of total runtime",
        "top_functions": [
          "NTT s1: 20.1%",
          "NTT s0: 19.4%",
          "InvNTT v0: 15.8%"
        ]
      }
    },
    "optimization_strategy": {
      "profiling_approach": {
        "macos": "Release builds + integrated micro-benchmarks",
        "linux": "Callgrind profiling with RelWithDebInfo builds"
      },
      "target_improvements": {
        "phase_2": "2-3x performance boost via vectorization",
        "phase_3": "3-5x performance boost via aggressive SIMD"
      }
    }
  },
  "testing_framework": {
    "test_suites": [
      "crypto-test",
      "core-test",
      "net-test"
    ],
    "framework": "Custom DAP test framework",
    "current_status": {
      "crypto_module": "‚úÖ 100% PASS RATE",
      "core_module": "‚úÖ 100% PASS RATE",
      "net_module": "‚ö†Ô∏è WARNINGS - –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω",
      "global_db": "‚ö†Ô∏è PARTIAL - SQLite –ø—Ä–æ—Ö–æ–¥–∏—Ç, PostgreSQL –Ω—É–∂–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
      "io_module": "‚ö†Ô∏è WARNINGS - core —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    },
    "performance_testing": {
      "implementation": "crypto/test/crypto/chipmunk_microbench.c",
      "purpose": "Performance regression testing",
      "status": "‚úÖ ACTIVE"
    }
  },
  "detailed_logging": {
    "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é s_debug_more –∏ –º–∞–∫—Ä–æ—Å debug_if",
    "implementation": {
      "static_variable": "static bool s_debug_more = false;",
      "debug_macro": "#define debug_if(condition, level, ...) if (condition) log_it(level, __VA_ARGS__)",
      "usage": "debug_if(s_debug_more, L_DEBUG, \"Detailed debug info: %s\", variable)",
      "modules": [
        "chipmunk",
        "chipmunk_ring",
        "chipmunk_hots",
        "crypto_core"
      ]
    },
    "enable_debug": {
      "compile_time": "–ò–∑–º–µ–Ω–∏—Ç—å s_debug_more = true –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ –º–æ–¥—É–ª—è",
      "runtime": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_LOG_LEVEL=DEBUG –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
      "selective": "–í–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    },
    "best_practices": [
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å debug_if –≤–º–µ—Å—Ç–æ log_it –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
      "–í–∫–ª—é—á–∞—Ç—å s_debug_more —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏",
      "–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å debug –ª–æ–≥–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤ production –∫–æ–¥–µ",
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏ L_DEBUG, L_INFO, L_WARNING, L_ERROR",
      "–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã –º–æ–¥—É–ª–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
    ],
    "examples": [
      "debug_if(s_debug_more, L_DEBUG, \"NTT: Forward transform completed (exact Rust algorithm)\")",
      "debug_if(s_debug_more, L_INFO, \"Key generation: %d/%d completed\", i+1, total)",
      "debug_if(s_debug_more, L_DEBUG, \"Polynomial coeffs: %d %d %d %d\", c0, c1, c2, c3)"
    ]
  },
  "core_macros_and_functions": {
    "description": "–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ DAP SDK –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π",
    "memory_management": {
      "DAP_NEW": {
        "description": "–ú–∞–∫—Ä–æ—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω—É–ª—è–º–∏",
        "signature": "DAP_NEW(type) –∏–ª–∏ DAP_NEW_SIZE(type, size)",
        "usage": "type* ptr = DAP_NEW(struct my_struct);",
        "safety": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –Ω—É–ª—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
      },
      "DAP_NEW_Z": {
        "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –¥–ª—è DAP_NEW",
        "usage": "DAP_NEW_Z(struct_name) - –≤—ã–¥–µ–ª—è–µ—Ç –∏ –æ–±–Ω—É–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
      },
      "DAP_NEW_SIZE": {
        "description": "–í—ã–¥–µ–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º",
        "usage": "uint8_t* buffer = DAP_NEW_SIZE(uint8_t, 1024);",
        "safety": "–û–±–Ω—É–ª—è–µ—Ç –≤—Å—é –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å"
      },
      "DAP_DEL": {
        "description": "–ú–∞–∫—Ä–æ—Å –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏",
        "signature": "DAP_DEL(pointer)",
        "usage": "DAP_DEL(my_ptr); my_ptr = NULL;",
        "safety": "–ü–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ NULL"
      },
      "DAP_DEL_Z": {
        "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è –¥–ª—è DAP_DEL",
        "usage": "DAP_DEL_Z(ptr); - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∏ –æ–±–Ω—É–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å"
      },
      "DAP_DELETE": {
        "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏",
        "usage": "DAP_DELETE(ptr); - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç ptr != NULL –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º"
      },
      "DAP_FREE": {
        "description": "–ü—Ä–æ—Å—Ç–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –±–µ–∑ –æ–±–Ω—É–ª–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è",
        "usage": "DAP_FREE(ptr); - —Ç–æ–ª—å–∫–æ free(), –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
      }
    },
    "logging_system": {
      "log_it": {
        "description": "–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DAP SDK",
        "signature": "log_it(level, format, ...)",
        "levels": {
          "L_CRITICAL": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
          "L_ERROR": "–û—à–∏–±–∫–∏",
          "L_WARNING": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
          "L_INFO": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
          "L_DEBUG": "–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
          "L_NOTICE": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        },
        "usage": "log_it(L_INFO, \"Operation completed successfully\");",
        "tag_system": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LOG_TAG –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"
      },
      "debug_if": {
        "description": "–£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏",
        "signature": "debug_if(condition, level, format, ...)",
        "implementation": "#define debug_if(condition, level, ...) if (condition) log_it(level, __VA_ARGS__)",
        "usage": "debug_if(s_debug_more, L_DEBUG, \"Variable value: %d\", value);",
        "performance": "–ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–≥–¥–∞ condition = false"
      },
      "LOG_TAG": {
        "description": "–ú–∞–∫—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–≥–∞ –º–æ–¥—É–ª—è",
        "usage": "#define LOG_TAG \"my_module\"",
        "purpose": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö"
      }
    },
    "debugging_tools": {
      "dump_it": {
        "description": "–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∞–º–ø–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "signature": "dump_it(tag, data, size)",
        "usage": "dump_it(\"Key data\", key_bytes, key_size);",
        "output": "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π –¥–∞–º–ø —Å ASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º"
      },
      "assert": {
        "description": "–ú–∞–∫—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏",
        "dap_assert": "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
        "dap_assert_pvt": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "dap_return_val_if_fail": "–í–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ",
        "dap_return_if_fail": "–í–æ–∑–≤—Ä–∞—Ç void –ø—Ä–∏ –æ—à–∏–±–∫–µ"
      }
    },
    "secure_memory": {
      "DAP_FREE_S": {
        "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏",
        "usage": "DAP_FREE_S(secret_data, size);",
        "security": "–û–±–Ω—É–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º"
      },
      "secure_clean": {
        "description": "–û–±–Ω—É–ª–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "usage": "secure_clean(buffer, sizeof(buffer));",
        "purpose": "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      }
    },
    "error_handling": {
      "DAP_ERROR": {
        "description": "–ö–æ–¥—ã –æ—à–∏–±–æ–∫ DAP SDK",
        "usage": "return DAP_ERROR_MEMORY;",
        "common_codes": [
          "DAP_ERROR_MEMORY - –æ—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏",
          "DAP_ERROR_INVALID_ARG - –Ω–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç",
          "DAP_ERROR_NULL_PTR - –Ω—É–ª–µ–≤–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å",
          "DAP_ERROR_CRYPTO - –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"
        ]
      },
      "dap_return_val_if_pass": {
        "description": "–ú–∞–∫—Ä–æ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è",
        "usage": "dap_return_val_if_pass(ptr == NULL, -EINVAL);",
        "purpose": "–£–ø—Ä–æ—â–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫"
      }
    },
    "cryptographic_macros": {
      "DAP_ENC_KEY_TYPE_*": {
        "description": "–¢–∏–ø—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π",
        "examples": [
          "DAP_ENC_KEY_TYPE_SIG_CHIPMUNK - Chipmunk –ø–æ–¥–ø–∏—Å—å",
          "DAP_ENC_KEY_TYPE_SIG_CHIPMUNK_RING - Chipmunk –∫–æ–ª—å—Ü–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å",
          "DAP_ENC_KEY_TYPE_SIG_DILITHIUM - Dilithium –ø–æ–¥–ø–∏—Å—å",
          "DAP_ENC_KEY_TYPE_SIG_FALCON - Falcon –ø–æ–¥–ø–∏—Å—å"
        ]
      },
      "DAP_SIGN_TYPE_*": {
        "description": "–¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–µ–π",
        "usage": "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–¥–ø–∏—Å–∏",
        "examples": [
          "SIG_TYPE_CHIPMUNK - Chipmunk –ø–æ–¥–ø–∏—Å—å",
          "SIG_TYPE_DILITHIUM - Dilithium –ø–æ–¥–ø–∏—Å—å",
          "SIG_TYPE_RING_CHIPMUNK - Chipmunk –∫–æ–ª—å—Ü–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å"
        ]
      }
    },
    "build_system_macros": {
      "DAP_PQRL": {
        "description": "–§–ª–∞–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
        "usage": "#ifdef DAP_PQRL ... #endif",
        "purpose": "–£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø–æ—Å—Ç-–∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞"
      },
      "DAP_CRYPTO": {
        "description": "–§–ª–∞–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
        "purpose": "–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–º–æ–¥—É–ª–µ–π"
      }
    },
    "best_practices": {
      "memory": [
        "–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_NEW*/DAP_DEL* –≤–º–µ—Å—Ç–æ malloc/free",
        "–û—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –ø–∞–º—è—Ç—å –≤ —Ç–æ–º –∂–µ scope, –≥–¥–µ –æ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∞",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DAP_FREE_S –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"
      ],
      "logging": [
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å debug_if –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–í–∫–ª—é—á–∞—Ç—å s_debug_more —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
        "–î–æ–±–∞–≤–ª—è—Ç—å LOG_TAG –≤ –∫–∞–∂–¥–æ–º –º–æ–¥—É–ª–µ"
      ],
      "error_handling": [
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dap_return_val_if_pass –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫",
        "–í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫",
        "–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
        "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
      ],
      "security": [
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å secure_clean –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–ò–∑–±–µ–≥–∞—Ç—å —Ö–∞—Ä–¥–∫–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π",
        "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
      ]
    }
  },
  "cryptographic_standards": {
    "hash_functions": {
      "primary": "secp256k1_sha256 - optimized version integrated from secp256k1",
      "secondary": "SHA3/Keccak via XKCP",
      "performance": "secp256k1_sha256 significantly faster than dap_hash_fast"
    },
    "memory_security": {
      "allocation": "DAP_NEW*/DAP_DELETE macros",
      "cleanup": "Always zero sensitive memory before freeing",
      "comparison": "Constant-time comparison for sensitive data"
    },
    "random_generation": {
      "policy": "Use DAP SDK random functions, not system rand()",
      "implementation": "crypto/src/rand/",
      "quality": "Cryptographically secure random number generation"
    }
  },
  "development_workflow": {
    "daily_development": {
      "build_validation": "Multiple configuration testing",
      "performance_monitoring": "Continuous performance regression testing",
      "security_validation": "Regular security audits of crypto implementations"
    },
    "code_review_focus": [
      "Post-quantum algorithm correctness",
      "Constant-time implementation verification",
      "Memory security validation",
      "Performance impact assessment"
    ],
    "optimization_cycle": [
      "Profile with release builds + micro-benchmarks",
      "Identify bottlenecks in crypto operations",
      "Implement vectorization/SIMD optimizations",
      "Validate cryptographic correctness",
      "Measure performance improvements"
    ]
  },
  "current_milestones": {
    "immediate": [
      "Complete Chipmunk SIMD optimization (Phase 3)",
      "Achieve target performance improvements",
      "Document optimization results"
    ],
    "short_term": [
      "Finalize all crypto algorithm optimizations",
      "Complete integration testing",
      "Prepare production documentation"
    ],
    "long_term": [
      "Full post-quantum crypto suite deployment",
      "Platform-specific optimizations",
      "Security audit completion"
    ]
  },
  "team_guidelines": {
    "crypto_development": {
      "priority": "Post-quantum algorithms have absolute priority",
      "testing": "All algorithms must pass 100% test suite",
      "performance": "Profile before and after any crypto changes",
      "security": "Constant-time implementation required"
    },
    "code_integration": {
      "callbacks": "All crypto algorithms must register full callback sets",
      "serialization": "Implement all ser/deser functions consistently",
      "documentation": "Document all performance-critical changes"
    },
    "platform_support": {
      "primary": "macOS development with cross-platform validation",
      "testing": "Validate on all target platforms before merge",
      "optimization": "Platform-specific optimizations welcome but optional"
    }
  },
  "context_loading_strategy": {
    "for_crypto_work": [
      "crypto.json",
      "chipmunk performance data"
    ],
    "for_core_development": [
      "core.json",
      "build configurations"
    ],
    "for_networking": [
      "net.json",
      "protocol specifications"
    ],
    "for_database": [
      "global-db.json",
      "schema definitions"
    ],
    "for_performance": [
      "performance profiles",
      "optimization roadmap"
    ],
    "for_security": [
      "crypto standards",
      "security audit results"
    ],
    "for_c_development": [
      "modules/languages/c/c_development.json",
      "modules/languages/c/c_development_enhanced.json",
      "modules/languages/c/c_debugging_tools.json",
      "core/standards.json",
      "core/development_standards.json"
    ],
    "for_debugging": [
      "modules/languages/c/c_debugging_tools.json",
      "debugging tools configuration",
      "gdb non-interactive scripts",
      "valgrind analysis templates",
      "clang static analyzer setup"
    ]
  },
  "success_metrics": {
    "crypto_performance": "Chipmunk optimization targets achieved",
    "test_coverage": "100% pass rate on all crypto tests",
    "security_validation": "Security audit passed",
    "cross_platform": "Successful builds on Linux, macOS, Windows",
    "production_readiness": "Core crypto components deployment ready"
  }
}