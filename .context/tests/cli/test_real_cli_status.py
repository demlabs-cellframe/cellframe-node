#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø CLI –°–ò–°–¢–ï–ú–´ –°–õ–ö
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –º–æ–∫–∏–Ω–≥–∞
"""

import unittest
import sys
import os
import importlib
from pathlib import Path
from io import StringIO
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –°–õ–ö
sys.path.insert(0, str(Path(__file__).parent.parent.parent / '.context'))


class TestRealCLIStatus(unittest.TestCase):
    """–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è CLI —Å–∏—Å—Ç–µ–º—ã"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.base_path = Path(__file__).parent.parent.parent
        self.cli_modules_path = self.base_path / '.context' / 'tools' / 'cli_modules'
        self.cli_script_path = self.base_path / '.context' / 'tools' / 'scripts' / 'slc_cli.py'
    
    def test_cli_infrastructure_exists(self):
        """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è CLI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê CLI –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏
        self.assertTrue(self.cli_modules_path.exists(), 
                       f"CLI –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {self.cli_modules_path}")
        print(f"   ‚úÖ CLI –º–æ–¥—É–ª–∏ –Ω–∞–π–¥–µ–Ω—ã: {self.cli_modules_path}")
        
        self.assertTrue(self.cli_script_path.exists(),
                       f"CLI —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cli_script_path}")
        print(f"   ‚úÖ CLI —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω: {self.cli_script_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥—É–ª–µ–π
        commands_path = self.cli_modules_path / 'commands'
        self.assertTrue(commands_path.exists(),
                       f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {commands_path}")
        print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞–π–¥–µ–Ω–∞: {commands_path}")
        
        core_path = self.cli_modules_path / 'core'
        self.assertTrue(core_path.exists(),
                       f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è core –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {core_path}")
        print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è core –Ω–∞–π–¥–µ–Ω–∞: {core_path}")
        
        common_path = self.cli_modules_path / 'common'
        self.assertTrue(common_path.exists(),
                       f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è common –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {common_path}")
        print(f"   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è common –Ω–∞–π–¥–µ–Ω–∞: {common_path}")
    
    def test_base_command_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∫–æ–º–∞–Ω–¥"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–û–í–û–ì–û –ö–õ–ê–°–°–ê –ö–û–ú–ê–ù–î:")
        
        try:
            from tools.cli_modules.common.base_command import BaseCommand, CommandRegistry
            print("   ‚úÖ BaseCommand —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            print("   ‚úÖ CommandRegistry —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã BaseCommand
            self.assertTrue(hasattr(BaseCommand, 'name'))
            self.assertTrue(hasattr(BaseCommand, 'description'))
            self.assertTrue(hasattr(BaseCommand, 'execute'))
            print("   ‚úÖ BaseCommand –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã")
            
            return True
            
        except ImportError as e:
            self.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BaseCommand: {e}")
    
    def test_command_modules_discovery(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π –∫–æ–º–∞–Ω–¥"""
        print("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ú–û–î–£–õ–ï–ô –ö–û–ú–ê–ù–î:")
        
        commands_path = self.cli_modules_path / 'commands'
        command_files = list(commands_path.glob('*_commands.py'))
        
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–∞–Ω–¥: {len(command_files)}")
        
        expected_modules = [
            'template_commands.py',
            'context_commands.py', 
            'ai_commands.py',
            'organization_commands.py',
            'template_intelligence_commands.py',
            'task_commands.py',
            'management_commands.py',
            'help_commands.py'
        ]
        
        found_modules = [f.name for f in command_files]
        
        for expected in expected_modules:
            if expected in found_modules:
                print(f"   ‚úÖ {expected}")
            else:
                print(f"   ‚ùå {expected} - –ù–ï –ù–ê–ô–î–ï–ù")
        
        self.assertGreater(len(command_files), 0, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è –∫–æ–º–∞–Ω–¥")
        
        return found_modules
    
    def test_command_classes_import(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∞—Å—Å–æ–≤ –∫–æ–º–∞–Ω–¥"""
        print("\nüîç –ò–ú–ü–û–†–¢ –ö–õ–ê–°–°–û–í –ö–û–ú–ê–ù–î:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        test_imports = [
            ('tools.cli_modules.commands.template_commands', ['TemplatesCommand', 'SearchCommand', 'InfoCommand', 'CreateCommand']),
            ('tools.cli_modules.commands.context_commands', ['LoadContextCommand']),
            ('tools.cli_modules.commands.task_commands', ['ListCommand']),
        ]
        
        successful_imports = 0
        total_commands = 0
        
        for module_name, command_classes in test_imports:
            try:
                module = importlib.import_module(module_name)
                print(f"   ‚úÖ –ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                
                for command_class_name in command_classes:
                    total_commands += 1
                    if hasattr(module, command_class_name):
                        command_class = getattr(module, command_class_name)
                        print(f"      ‚úÖ {command_class_name}")
                        successful_imports += 1
                    else:
                        print(f"      ‚ùå {command_class_name} - –ù–ï –ù–ê–ô–î–ï–ù")
                        
            except ImportError as e:
                print(f"   ‚ùå –ú–æ–¥—É–ª—å {module_name}: {e}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {successful_imports}/{total_commands}")
        return successful_imports, total_commands
    
    def test_cli_script_execution(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CLI —Å–∫—Ä–∏–ø—Ç–∞"""
        print("\nüîç –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø CLI –°–ö–†–ò–ü–¢–ê:")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ CLI —Å–∫—Ä–∏–ø—Ç–∞ —Å --help
            result = subprocess.run([
                sys.executable, 
                str(self.cli_script_path), 
                '--help'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print("   ‚úÖ CLI —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                print("   ‚úÖ --help —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print(f"   ‚ùå CLI —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.returncode}")
                print(f"   üìù STDERR: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("   ‚ùå CLI —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–∏—Å (timeout)")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CLI —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return False
    
    def test_core_modules_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ core –º–æ–¥—É–ª–µ–π"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê CORE –ú–û–î–£–õ–ï–ô:")
        
        core_modules = [
            'unified_context_engine.py',
            'advanced_template_intelligence.py', 
            'file_organization_engine.py',
            'system_validator.py',
            'project_generator.py',
            'template_manager.py'
        ]
        
        core_path = self.cli_modules_path / 'core'
        available_modules = 0
        
        for module_name in core_modules:
            module_path = core_path / module_name
            if module_path.exists():
                print(f"   ‚úÖ {module_name}")
                available_modules += 1
            else:
                print(f"   ‚ùå {module_name} - –ù–ï –ù–ê–ô–î–ï–ù")
        
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ core –º–æ–¥—É–ª–µ–π: {available_modules}/{len(core_modules)}")
        return available_modules, len(core_modules)
    
    def test_slc_wrapper_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ SLC wrapper"""
        print("\nüîç –¢–ï–°–¢ SLC WRAPPER:")
        
        slc_wrapper = self.base_path / 'slc'
        
        if not slc_wrapper.exists():
            print("   ‚ùå SLC wrapper –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("   ‚úÖ SLC wrapper –Ω–∞–π–¥–µ–Ω")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ wrapper
            result = subprocess.run([
                str(slc_wrapper), 
                'help'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                print("   ‚úÖ SLC wrapper —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print("   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ help –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                return True
            else:
                print(f"   ‚ùå SLC wrapper –æ—à–∏–±–∫–∞: {result.returncode}")
                if result.stderr:
                    print(f"   üìù STDERR: {result.stderr[:200]}...")
                return False
                
        except subprocess.TimeoutExpired:
            print("   ‚ùå SLC wrapper –∑–∞–≤–∏—Å (timeout)")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ SLC wrapper: {e}")
            return False


class TestCLIComprehensiveAnalysis(unittest.TestCase):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ CLI —Å–∏—Å—Ç–µ–º—ã"""
    
    def test_comprehensive_cli_analysis(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è CLI"""
        print("\n" + "="*60)
        print("üß† –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó CLI –°–ò–°–¢–ï–ú–´ –°–õ–ö")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        test_suite = unittest.TestLoader().loadTestsFromTestCase(TestRealCLIStatus)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stream = StringIO()
        runner = unittest.TextTestRunner(stream=stream, verbosity=2)
        result = runner.run(test_suite)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_tests = result.testsRun
        failures = len(result.failures)
        errors = len(result.errors)
        successes = total_tests - failures - errors
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successes}")
        print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failures}")
        print(f"   üí• –û—à–∏–±–æ–∫: {errors}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successes/total_tests)*100:.1f}%")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if failures + errors == 0:
            print("   üéâ CLI —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!")
        elif failures + errors <= 2:
            print("   ‚ö†Ô∏è  –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   üö® –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ CLI —Å–∏—Å—Ç–µ–º—ã")
        
        print("\n" + "="*60)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2) 