variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_UPDATE_FLAGS: --force

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

stages:
    - build
    - post_build
    - publish
    - deploy

.ci-polygon:
  tags:
     - ci-polygon
.ci-ansible:
  tags:
     - ci-ansible

.ci-test:
  tags:
     - ci-test

.build:  
  extends: .ci-polygon
  stage: build
  timeout: 3 hours 30 minutes
  dependencies: []
  interruptible: true
  variables:
    
    PATCH_NUM_MAIN: "${master_PATCH_NUM}"

  rules:
    - if: $CI_COMMIT_REF_NAME =~ /-asan$/
      variables:                                   
        DAP_ASAN: "1"  
    - if: $CI_COMMIT_REF_NAME =~ /-ubsan$/
      variables:                                   
        DAP_UBSAN: "1"  
    - if: $CI_COMMIT_REF_NAME =~ /-tsan$/
      variables:                                   
        DAP_TSAN: "1"
    - if: $CI_COMMIT_REF_NAME =~ /.*$/
      variables:                                   
        DUMMY_VAR_FOR_ALLOW_JOB: "1"
  artifacts:
    paths:
      - build_*/*.deb

.publish:
  extends: .ci-polygon
  image: demlabs/amd64/debian-buster:linuxbuilder
  stage: publish
  before_script: /opt/buildtools/prepare_environment.sh 
  

.deploy:
  extends: .ci-ansible
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual
      allow_failure: true

  allow_failure: true

.fill_version_mk: &fill_version_mk
  - PATCH_NUM_VAR_NAME=$(echo "${CI_COMMIT_REF_SLUG}" | tr "-" _)_PATCH_NUM
  - echo ${PATCH_NUM_VAR_NAME}
  - 'PATCH_NUM=$(curl -s --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/${PATCH_NUM_VAR_NAME}" | jq -r ".value // empty")'
  - echo "Gitlab var patch number for ${PATCH_NUM_VAR_NAME} is ${PATCH_NUM}."
  - '[ -z "${PATCH_NUM}" ] && PATCH_NUM=${PATCH_NUM_MAIN}'
  - source ./version.mk
  - '[ -z "${PATCH_NUM}" ] && PATCH_NUM=${VERSION_PATCH}' 
 
    #re-create version.mk based on current data
  - echo "VERSION_MAJOR=$VERSION_MAJOR" > ./version.mk
  - echo "VERSION_MINOR=$VERSION_MINOR" >> ./version.mk
  - echo "VERSION_PATCH=$PATCH_NUM" >> ./version.mk
  - cat ./version.mk
     #create var
  - 'curl -s --request POST --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables" --form "key=$PATCH_NUM_VAR_NAME" --form "value=${PATCH_NUM}" || true'
  - 'PIPLINE_NAME="Build $PATCH_NUM: $CI_COMMIT_MESSAGE"'
  - 'curl -H "Job-Token: $CI_JOB_TOKEN" -X PUT --data "name=$PIPLINE_NAME" $CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/metadata' 

amd64:macos.release:
    extends: .build
    image: demlabs/macos/amd64:qt5
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-osx
      - *fill_version_mk
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target osx release #-DBUILD_DIAGTOOL=ON 
      - ./prod_build/pack.sh --target osx release --sign /opt/buildtools/sign/macos/demlabs.sh
      - /opt/buildtools/deploy_files.sh pub_cellframe macos/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.pkg 
      - /opt/buildtools/deploy_files.sh pub_cellframe macos/cellframe-node/$CI_COMMIT_REF_NAME/  build_*/*-signed.pkg --redirect-from macos/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64

    artifacts:
      paths:
        - build_*/*.pkg

.amd64:macos.debug:
    extends: .build
    image: demlabs/debian/amd64:qt5
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
      - *fill_version_mk
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux rwd -DBUILD_WITH_PYTHON_ENV=ON -DBUILD_DIAGTOOL=ON -DCELLFRAME_NO_OPTIMIZATION=OFF
      - ./prod_build/pack.sh --target linux rwd
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb  --redirect-from linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64.opt
    artifacts:
      paths:
        - build_*/*.pkg



version:up:
  stage: post_build
  tags:
    - ansible-runner
  variables:
    GIT_STRATEGY: none
  rules:
    - when: on_success
  
  script:
    - PATCH_NUM_VAR_NAME=$(echo "${CI_COMMIT_REF_SLUG}" | tr "-" _)_PATCH_NUM
    - echo ${PATCH_NUM_VAR_NAME}
    - 'PATCH_NUM=$(curl -s --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/${PATCH_NUM_VAR_NAME}" | jq -r ".value // empty")'
    - PATCH_NUM=$((PATCH_NUM + 1))
    - 'echo "New patch version: ${PATCH_NUM}"'
    - 'curl -s --request PUT --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/$PATCH_NUM_VAR_NAME" --form "key=$PATCH_NUM_VAR_NAME" --form "value=${PATCH_NUM}" || true'
    

