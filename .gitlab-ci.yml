variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SUBMODULE_UPDATE_FLAGS: --force

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

stages:
    - tools
    - test_build
    - diagnostic_builds
    - build
    - post_build
    - publish
    - deploy

cppcheck_full_analysis:
# Performs an in-depth static code analysis with cppcheck, producing a detailed HTML report for manual inspection.
  stage: tools
  image: demlabs/debian/amd64:cpp_check
  timeout: 12h
  script:
    - cd /builds/cellframe/cellframe-node
    - mkdir -p build && cd build
    - cmake -DENABLE_CPPCHECK_ANALYSIS=ON ..
    - make cppcheck_analysis
    - echo "HTML report generated at build/cppcheck_html_report/index.html"
  artifacts:
    paths:
      - build/cppcheck_html_report/
    expire_in: 1 day
  rules:
    - when: manual
      allow_failure: true
  tags:
    - ci-polygon

cppcheck_code_quality:
# Generates a code quality report in JSON format for merge requests, identifying potential issues in the codebase.
  stage: tools
  image: demlabs/debian/amd64:cpp_check
  timeout: 3h
  script:
    - cd /builds/cellframe/cellframe-node
    - /usr/bin/cppcheck --xml --library=std --suppress=missingIncludeSystem --suppress=preprocessorErrorDirective -j$(nproc) -q . 2> cppcheck-report.xml
    - cppcheck-codequality --input-file cppcheck-report.xml --output-file gl-code-quality-report.json
    - cat gl-code-quality-report.json
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: 4 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      allow_failure: true
  tags:
    - ci-polygon

.ci-polygon:
  tags:
     - ci-polygon
.ci-ansible:
  tags:
     - ci-ansible

.ci-test:
  tags:
     - ci-test

.build:  
  extends: .ci-polygon
  stage: build
  timeout: 3 hours 30 minutes
  dependencies: []
  interruptible: true
  variables:
    PATCH_NUM_MAIN: "${master_PATCH_NUM}"
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /.*$/
      variables:                                   
        DUMMY_VAR_FOR_ALLOW_JOB: "1"
  artifacts:
    paths:
      - build_*/*.deb

.publish:
  extends: .ci-polygon
  image: demlabs/amd64/debian-buster:linuxbuilder
  stage: publish
  before_script: /opt/buildtools/prepare_environment.sh 

.deploy:
  extends: .ci-ansible
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: manual
      allow_failure: true
  allow_failure: true

.fill_version_mk: &fill_version_mk
  - PATCH_NUM_VAR_NAME=P_$(echo "${CI_COMMIT_REF_SLUG}" | tr "-" _)_PATCH_NUM
  - echo ${PATCH_NUM_VAR_NAME}
  - 'PATCH_NUM=$(curl -s --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/${PATCH_NUM_VAR_NAME}" | jq -r ".value // empty")'
  - echo "Gitlab var patch number for ${PATCH_NUM_VAR_NAME} is ${PATCH_NUM}."
  - '[ -z "${PATCH_NUM}" ] && PATCH_NUM=${PATCH_NUM_MAIN}'
  - source ./version.mk
  - '[ -z "${PATCH_NUM}" ] && PATCH_NUM=${VERSION_PATCH}' 
    #re-create version.mk based on current data
  - echo "VERSION_MAJOR=$VERSION_MAJOR" > ./version.mk
  - echo "VERSION_MINOR=$VERSION_MINOR" >> ./version.mk
  - echo "VERSION_PATCH=$PATCH_NUM" >> ./version.mk
  - cat ./version.mk
     #create var
  - 'curl -s --request POST --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables" --form "key=$PATCH_NUM_VAR_NAME" --form "value=${PATCH_NUM}" || true'
  - 'PIPLINE_NAME="Build $PATCH_NUM: $CI_COMMIT_MESSAGE"'
  - 'curl -H "Job-Token: $CI_JOB_TOKEN" -X PUT --data "name=$PIPLINE_NAME" $CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/metadata' 

amd64:linux.rwd.bld:
    extends: .build
    stage: test_build
    image: demlabs/debian/amd64:qt5
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
      - *fill_version_mk
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux rwd -DBUILD_WITH_PYTHON_ENV=ON 
      - ./prod_build/pack.sh --target linux rwd
    artifacts:
      paths:
        - version.mk
        - build_*/*.deb

autotests:
  extends: .ci-test
  interruptible: true
  stage: diagnostic_builds
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  variables:
    GIT_STRATEGY: none
  dependencies:
    - amd64:linux.rwd.bld
  script:
    - |
      source version.mk
      echo "Testing version: ${VERSION_MAJOR}.${VERSION_MINOR}-${VERSION_PATCH}"
      DEB_FILE=$(find build_* -type f -name "cellframe-node-${VERSION_MAJOR}.${VERSION_MINOR}-${VERSION_PATCH}-rwd-amd64.deb")
      echo "Using package: $DEB_FILE"
      /opt/tests-in-docker/artifacts.sh "$DEB_FILE"

asan_build:
  extends: .build
  stage: diagnostic_builds
  variables:
    DAP_ASAN: "1"
  dependencies:
    - amd64:linux.rwd.bld
  image: demlabs/debian/amd64:qt5
  rules:
   - when: manual
     allow_failure: true
  before_script:
   - /opt/buildtools/prepare_environment.sh arm64-linux
  script:
    - ./prod_build/build.sh --target linux rwd 
    - ./prod_build/pack.sh --target linux rwd
    - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 

ubsan_build:
  extends: .build
  stage: diagnostic_builds
  variables:
    DAP_UBSAN: "1"
  dependencies:
    - amd64:linux.rwd.bld
  image: demlabs/debian/amd64:qt5
  rules:
   - when: manual
     allow_failure: true
  before_script:
   - /opt/buildtools/prepare_environment.sh arm64-linux
  script:
    - ./prod_build/build.sh --target linux rwd 
    - ./prod_build/pack.sh --target linux rwd
    - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb     

tsan_build:
  extends: .build
  stage: diagnostic_builds
  variables:
    DAP_TSAN: "1"
  dependencies:
    - amd64:linux.rwd.bld
  image: demlabs/debian/amd64:qt5
  rules:
   - when: manual
     allow_failure: true
  before_script:
   - /opt/buildtools/prepare_environment.sh arm64-linux
  script:
    - ./prod_build/build.sh --target linux rwd 
    - ./prod_build/pack.sh --target linux rwd
    - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 

amd64:linux.rwd:
    extends: .build
    stage: build
    dependencies:
      - amd64:linux.rwd.bld
    image: demlabs/debian/amd64:qt5
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb --redirect-with-link linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64 --just-redirect
      
amd64:linux.release:
    extends: .build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux release -DBUILD_WITH_PYTHON_ENV=ON 
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 

amd64:windows.rwd:
    extends: .build
    image: demlabs/windows/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target windows rwd
      - ./prod_build/pack.sh --target windows rwd 
      - /opt/buildtools/deploy_files.sh pub_cellframe windows/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.exe 
      - /opt/buildtools/deploy_files.sh pub_cellframe windows/cellframe-node/$CI_COMMIT_REF_NAME/ build_windows_rwd/*.exe --redirect-with-link windows/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64 --just-redirect

amd64:macos.release:
    extends: .build
    image: demlabs/macos/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-osx
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target osx release
      - ./prod_build/pack.sh --target osx release --sign /opt/buildtools/sign/macos/demlabs.sh
      - /opt/buildtools/deploy_files.sh pub_cellframe macos/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*-signed.pkg --redirect-with-link macos/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64 
    artifacts:
      paths:
        - build_*/*.pkg

amd64:linux.debug:
    extends: .build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux debug -DBUILD_WITH_PYTHON_ENV=ON 
      - ./prod_build/pack.sh --target linux debug
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb

amd64:linux.rwd.opt:
    extends: .build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux rwd -DBUILD_WITH_PYTHON_ENV=ON -DCELLFRAME_NO_OPTIMIZATION=OFF
      - ./prod_build/pack.sh --target linux rwd
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb --redirect-with-link linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64.opt --just-redirect

amd64:linux.tps:
    extends: .build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    when: manual
    script:
      - ./prod_build/build.sh --target linux release -DBUILD_WITH_TPS_TEST=ON
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb

amd64:linux.updtr:
    extends: .build
    stage: build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    rules:
      - when: manual
        allow_failure: true
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux release -DBUILD_WITH_PYTHON_ENV=ON -DADD_UPDATER=ON
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb

.amd64:linux.release:
    extends: .build
    image: demlabs/debian/amd64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script: 
      - /opt/buildtools/prepare_environment.sh amd64-linux
    script: 
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux release -DBUILD_WITH_PYTHON_ENV=ON
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/  build_linux_release/*-amd64.deb --redirect-from linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-amd64
      - anybadge -l "node version" -v "$(source version.mk; echo "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH")" -f node-version-badge.svg -c blue
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ ./node-version-badge.svg || true

armhf:linux.release:
    extends: .build
    image: demlabs/debian/arm32:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script:
      - /opt/buildtools/prepare_environment.sh armhf-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux release
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*armhf*.deb --redirect-with-link linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-armhf --just-redirect

arm64:linux.release:
    extends: .build
    image: demlabs/debian/arm64:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script:
      - /opt/buildtools/prepare_environment.sh arm64-linux
    script:
      - echo "Do hard work"
      - ./prod_build/build.sh --target linux release
      - ./prod_build/pack.sh --target linux release
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*.deb 
      - /opt/buildtools/deploy_files.sh pub_cellframe linux/cellframe-node/$CI_COMMIT_REF_NAME/ build_*/*arm64*.deb --redirect-with-link linux/cellframe-node/$CI_COMMIT_REF_NAME/latest-arm64 --just-redirect
  
any:android.release:
    extends: .build
    image: demlabs/android/any:qt5
    dependencies:
      - amd64:linux.rwd.bld
    before_script:
      - /opt/buildtools/prepare_environment.sh arm64-linux
      - 'apt install -y openjdk-17-jdk'
      - 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/'
    script: 
      - ./prod_build/pack.sh --target android release --sign /opt/buildtools/sign/android/default.sh
      - /opt/buildtools/deploy_files.sh pub_cellframe android/cellframe-node/$CI_COMMIT_REF_NAME/ *.apk 

version:up:
  stage: post_build
  dependencies: []
  tags:
    - ansible-runner
  variables:
    GIT_STRATEGY: none
  rules:
    - when: on_success
  script:
    - PATCH_NUM_VAR_NAME=P_$(echo "${CI_COMMIT_REF_SLUG}" | tr "-" _)_PATCH_NUM
    - echo ${PATCH_NUM_VAR_NAME}
    - 'PATCH_NUM=$(curl -s --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/${PATCH_NUM_VAR_NAME}" | jq -r ".value // empty")'
    - PATCH_NUM=$((PATCH_NUM + 1))
    - 'echo "New patch version: ${PATCH_NUM}"'
    - 'curl -s --request PUT --header "PRIVATE-TOKEN: ${ACCESS_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/variables/$PATCH_NUM_VAR_NAME" --form "key=$PATCH_NUM_VAR_NAME" --form "value=${PATCH_NUM}" || true'



cellframe_rpc_api_response_validation:
  stage: tools
  image: python:3.12-slim
  tags:
    - ci-polygon
  timeout: 30m
  rules:
    - when: manual
      allow_failure: true
  variables:
    CELLFRAME_VALIDATOR_REPO: ""
    CELLFRAME_VALIDATOR_REF: "master"
    VALIDATOR_TARGET: "rpc"
#    CELLFRAME_RPC_URL: "http://rpc.cellframe.net"
#    CELLFRAME_RPC_URL: "http://64.176.71.223"
#    CELLFRAME_RPC_URL: "http://64.176.71.224"
#    CELLFRAME_RPC_URL: "http://64.176.8.238"
#    CELLFRAME_RPC_URL: "http://45.77.52.56"  
    CELLFRAME_RPC_URL: "http://194.87.118.235"    
  
    # tests parametrs
    TEST_ENABLE_WALLET_LIST: "1"
    TEST_NET: "KelVPN"
    TEST_ADDR: ""
    TEST_WALLET: ""
    TEST_TOKEN: "KEL"
    TEST_CHAIN: "main"
    TEST_BLOCK_HASH: ""
    TEST_TAIL: "null"
    TEST_LIMIT: ""
  before_script:
    - set -euo pipefail
    - apt-get update && apt-get install -y --no-install-recommends git && rm -rf /var/lib/apt/lists/*
    - |
      if [ -z "${CELLFRAME_VALIDATOR_REPO}" ]; then
        export CELLFRAME_VALIDATOR_REPO="https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.demlabs.net/nikolay.panko/cellframe-node-cli.git"
      fi
      export VALIDATOR_DIR="validator"
      echo "Using validator repo: ${CELLFRAME_VALIDATOR_REPO} @ ${CELLFRAME_VALIDATOR_REF}"
    - git clone --depth 1 --branch "${CELLFRAME_VALIDATOR_REF}" "${CELLFRAME_VALIDATOR_REPO}" "${VALIDATOR_DIR}"
    - python -m venv "${VALIDATOR_DIR}/.venv"
    - . "${VALIDATOR_DIR}/.venv/bin/activate"
    - pip install --upgrade pip
    - pip install -r "${VALIDATOR_DIR}/requirements.txt"

  script:
    - |
      set -euo pipefail
      export PYTHONUNBUFFERED=1
      . "${VALIDATOR_DIR}/.venv/bin/activate"
      "${VALIDATOR_DIR}/.venv/bin/python" "${VALIDATOR_DIR}/main/run_tests.py" --target "${VALIDATOR_TARGET}" --verbose \
        | tee validator_reports_output.txt
      mkdir -p validator_reports
      awk '/^=== Summary ===/{flag=1; next} flag {print}' validator_reports_output.txt > validator_reports/summary.json

  artifacts:
    when: always
    expire_in: 7 days
    paths:
      - validator/responses/*.json
      - validator_reports/summary.json